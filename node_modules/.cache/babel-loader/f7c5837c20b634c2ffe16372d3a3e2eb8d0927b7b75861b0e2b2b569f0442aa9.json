{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar mat4 = require('gl-matrix').mat4;\nvar vec4 = require('gl-matrix').vec4;\nvar pixelRatio = require('../util/pixelRatio');\nvar convertFov = require('../util/convertFov');\nvar mod = require('../util/mod');\nvar real = require('../util/real');\nvar clamp = require('../util/clamp');\nvar decimal = require('../util/decimal');\nvar compose = require('../util/compose');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// Default viewport dimensions.\n// Start with zero to ensure that those values are handled correctly.\nvar defaultWidth = 0;\nvar defaultHeight = 0;\n\n// Default view parameters.\nvar defaultYaw = 0;\nvar defaultPitch = 0;\nvar defaultRoll = 0;\nvar defaultFov = Math.PI / 4;\nvar defaultProjectionCenterX = 0;\nvar defaultProjectionCenterY = 0;\n\n// A fov of exactly 0 or π breaks some computations, so we constrain it to the\n// [fovLimitEpsilon, π - fovLimitEpsilon] interval. We use 6 decimal places for\n// the epsilon value to avoid broken rendering due to loss of precision in\n// floating point computations.\nvar fovLimitEpsilon = 0.000001;\n\n/**\n * @interface RectilinearViewParams\n *\n * A camera configuration for a {@link RectilinearView}.\n *\n * @property {number} yaw The yaw angle, in the [-π, π] range.\n *     When `yaw < 0`, the view rotates to the left.\n *     When `yaw > 0`, the view rotates to the right.\n *\n * @property {number} pitch The pitch angle, in the [-π, π] range.\n *     When `pitch < 0`, the view rotates downwards.\n *     When `pitch > 0`, the view rotates upwards.\n *\n * @property {number} roll The roll angle, in the [-π, π] range.\n *     When `roll < 0`, the view rotates clockwise.\n *     When `roll > 0`, the view rotates counter-clockwise.\n *\n * @property {fov} fov The vertical field of view, in the [0, π] range.\n */\n\n/**\n * @interface RectilinearViewCoords\n *\n * The position of a point in a 360° image.\n *\n * @property {number} yaw The yaw angle, in the [-π, π] range.\n * @property {number} pitch The pitch angle, in the [-π, π] range.\n */\n\n/**\n * @typedef {function} RectilinearViewLimiter\n *\n * View limiter for a {@link RectilinearView}.\n *\n * A view limiter is a function that receives a {@link RectilinearViewParams}\n * object, optionally modifies it in place, and returns it. It can be used to\n * enforce constraints on the view parameters.\n *\n * See {@link RectilinearView.limit} for commonly used limiters. They may be\n * composed together or with user-defined limiters with {@link util.compose}.\n *\n * @param {RectilinearViewParams} params\n * @return {RectilinearViewParams}\n */\n\n/**\n * @class RectilinearView\n * @implements View\n * @classdesc\n *\n * A {@link View} implementing a rectilinear projection for 360° images.\n *\n * @param {RectilinearViewParams=} params The initial view parameters. If\n *     unspecified, defaults to `{yaw: 0, pitch: 0, roll: 0, fov: Math.PI/4 }`.\n * @param {RectilinearViewLimiter=} limiter The view limiter. If unspecified,\n *     no view limiting is applied. See {@link RectilinearView.limit} for\n *     commonly used limiters.\n */\nfunction RectilinearView(params, limiter) {\n  // The initial values for the view parameters.\n  this._yaw = params && params.yaw != null ? params.yaw : defaultYaw;\n  this._pitch = params && params.pitch != null ? params.pitch : defaultPitch;\n  this._roll = params && params.roll != null ? params.roll : defaultRoll;\n  this._fov = params && params.fov != null ? params.fov : defaultFov;\n  this._width = params && params.width != null ? params.width : defaultWidth;\n  this._height = params && params.height != null ? params.height : defaultHeight;\n  this._projectionCenterX = params && params.projectionCenterX != null ? params.projectionCenterX : defaultProjectionCenterX;\n  this._projectionCenterY = params && params.projectionCenterY != null ? params.projectionCenterY : defaultProjectionCenterY;\n\n  // The initial value for the view limiter.\n  this._limiter = limiter || null;\n\n  // The last calculated projection matrix and its inverse.\n  this._projMatrix = mat4.create();\n  this._invProjMatrix = mat4.create();\n\n  // The last calculated view frustum.\n  this._frustum = [vec4.create(),\n  // left\n  vec4.create(),\n  // right\n  vec4.create(),\n  // bottom\n  vec4.create(),\n  // top\n  vec4.create() // camera\n  ];\n\n  // Whether the projection matrices and the view frustum need to be updated.\n  this._projectionChanged = true;\n\n  // Temporary variables used for calculations.\n  this._params = {};\n  this._fovs = {};\n  this._tmpVec = vec4.create();\n\n  // Force view limiting on initial parameters.\n  this._update();\n}\neventEmitter(RectilinearView);\n\n/**\n * Destructor.\n */\nRectilinearView.prototype.destroy = function () {\n  clearOwnProperties(this);\n};\n\n/**\n * Get the yaw angle.\n * @return {number}\n */\nRectilinearView.prototype.yaw = function () {\n  return this._yaw;\n};\n\n/**\n * Get the pitch angle.\n * @return {number}\n */\nRectilinearView.prototype.pitch = function () {\n  return this._pitch;\n};\n\n/**\n * Get the roll angle.\n * @return {number}\n */\nRectilinearView.prototype.roll = function () {\n  return this._roll;\n};\nRectilinearView.prototype.projectionCenterX = function () {\n  return this._projectionCenterX;\n};\nRectilinearView.prototype.projectionCenterY = function () {\n  return this._projectionCenterY;\n};\n\n/**\n * Get the fov value.\n * @return {number}\n */\nRectilinearView.prototype.fov = function () {\n  return this._fov;\n};\n\n/**\n * Get the viewport width.\n * @return {number}\n */\nRectilinearView.prototype.width = function () {\n  return this._width;\n};\n\n/**\n * Get the viewport height.\n * @return {number}\n */\nRectilinearView.prototype.height = function () {\n  return this._height;\n};\n\n/**\n * Get the viewport dimensions. If an argument is supplied, it is filled in with\n * the result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {Size=} size\n * @return {Size}\n */\nRectilinearView.prototype.size = function (size) {\n  size = size || {};\n  size.width = this._width;\n  size.height = this._height;\n  return size;\n};\n\n/**\n * Get the view parameters. If an argument is supplied, it is filled in with the\n * result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {RectilinearViewParams=} obj\n * @return {RectilinearViewParams}\n */\nRectilinearView.prototype.parameters = function (params) {\n  params = params || {};\n  params.yaw = this._yaw;\n  params.pitch = this._pitch;\n  params.roll = this._roll;\n  params.fov = this._fov;\n  return params;\n};\n\n/**\n * Get the view limiter, or null if unset.\n * @return {?RectilinearViewLimiter}\n */\nRectilinearView.prototype.limiter = function () {\n  return this._limiter;\n};\n\n/**\n * Set the yaw angle.\n * @param {number} yaw\n */\nRectilinearView.prototype.setYaw = function (yaw) {\n  this._resetParams();\n  this._params.yaw = yaw;\n  this._update(this._params);\n};\n\n/**\n * Set the pitch angle.\n * @param {number} pitch\n */\nRectilinearView.prototype.setPitch = function (pitch) {\n  this._resetParams();\n  this._params.pitch = pitch;\n  this._update(this._params);\n};\n\n/**\n * Set the roll angle.\n * @param {number} roll\n */\nRectilinearView.prototype.setRoll = function (roll) {\n  this._resetParams();\n  this._params.roll = roll;\n  this._update(this._params);\n};\n\n/**\n * Set the fov value.\n * @param {number} fov\n */\nRectilinearView.prototype.setFov = function (fov) {\n  this._resetParams();\n  this._params.fov = fov;\n  this._update(this._params);\n};\nRectilinearView.prototype.setProjectionCenterX = function (projectionCenterX) {\n  this._resetParams();\n  this._params.projectionCenterX = projectionCenterX;\n  this._update(this._params);\n};\nRectilinearView.prototype.setProjectionCenterY = function (projectionCenterY) {\n  this._resetParams();\n  this._params.projectionCenterY = projectionCenterY;\n  this._update(this._params);\n};\n\n/**\n * Add yawOffset to the current yaw value.\n * @param {number} yawOffset\n */\nRectilinearView.prototype.offsetYaw = function (yawOffset) {\n  this.setYaw(this._yaw + yawOffset);\n};\n\n/**\n * Add pitchOffset to the current pitch value.\n * @param {number} pitchOffset\n */\nRectilinearView.prototype.offsetPitch = function (pitchOffset) {\n  this.setPitch(this._pitch + pitchOffset);\n};\n\n/**\n * Add rollOffset to the current roll value.\n * @param {number} rollOffset\n */\nRectilinearView.prototype.offsetRoll = function (rollOffset) {\n  this.setRoll(this._roll + rollOffset);\n};\n\n/**\n * Add fovOffset to the current fov value.\n * @param {number} fovOffset\n */\nRectilinearView.prototype.offsetFov = function (fovOffset) {\n  this.setFov(this._fov + fovOffset);\n};\n\n/**\n * Set the viewport dimensions.\n * @param {Size} size\n */\nRectilinearView.prototype.setSize = function (size) {\n  this._resetParams();\n  this._params.width = size.width;\n  this._params.height = size.height;\n  this._update(this._params);\n};\n\n/**\n * Set the view parameters. Unspecified parameters are left unchanged.\n * @param {RectilinearViewParameters} params\n */\nRectilinearView.prototype.setParameters = function (params) {\n  this._resetParams();\n  this._params.yaw = params.yaw;\n  this._params.pitch = params.pitch;\n  this._params.roll = params.roll;\n  this._params.fov = params.fov;\n  this._params.projectionCenterX = params.projectionCenterX;\n  this._params.projectionCenterY = params.projectionCenterY;\n  this._update(this._params);\n};\n\n/**\n * Set the view limiter.\n * @param {?RectilinearViewLimiter} limiter The new limiter, or null to unset.\n */\nRectilinearView.prototype.setLimiter = function (limiter) {\n  this._limiter = limiter || null;\n  this._update();\n};\nRectilinearView.prototype._resetParams = function () {\n  var params = this._params;\n  params.yaw = null;\n  params.pitch = null;\n  params.roll = null;\n  params.fov = null;\n  params.width = null;\n  params.height = null;\n};\nRectilinearView.prototype._update = function (params) {\n  // Avoid object allocation when no parameters are supplied.\n  if (params == null) {\n    this._resetParams();\n    params = this._params;\n  }\n\n  // Save old parameters for later comparison.\n  var oldYaw = this._yaw;\n  var oldPitch = this._pitch;\n  var oldRoll = this._roll;\n  var oldFov = this._fov;\n  var oldProjectionCenterX = this._projectionCenterX;\n  var oldProjectionCenterY = this._projectionCenterY;\n  var oldWidth = this._width;\n  var oldHeight = this._height;\n\n  // Fill in object with the new set of parameters to pass into the limiter.\n  params.yaw = params.yaw != null ? params.yaw : oldYaw;\n  params.pitch = params.pitch != null ? params.pitch : oldPitch;\n  params.roll = params.roll != null ? params.roll : oldRoll;\n  params.fov = params.fov != null ? params.fov : oldFov;\n  params.width = params.width != null ? params.width : oldWidth;\n  params.height = params.height != null ? params.height : oldHeight;\n  params.projectionCenterX = params.projectionCenterX != null ? params.projectionCenterX : oldProjectionCenterX;\n  params.projectionCenterY = params.projectionCenterY != null ? params.projectionCenterY : oldProjectionCenterY;\n\n  // Apply view limiting when defined.\n  if (this._limiter) {\n    params = this._limiter(params);\n    if (!params) {\n      throw new Error('Bad view limiter');\n    }\n  }\n\n  // Normalize parameters.\n  params = this._normalize(params);\n\n  // Grab the limited parameters.\n  var newYaw = params.yaw;\n  var newPitch = params.pitch;\n  var newRoll = params.roll;\n  var newFov = params.fov;\n  var newWidth = params.width;\n  var newHeight = params.height;\n  var newProjectionCenterX = params.projectionCenterX;\n  var newProjectionCenterY = params.projectionCenterY;\n\n  // Consistency check.\n  if (!real(newYaw) || !real(newPitch) || !real(newRoll) || !real(newFov) || !real(newWidth) || !real(newHeight) || !real(newProjectionCenterX) || !real(newProjectionCenterY)) {\n    throw new Error('Bad view - suspect a broken limiter');\n  }\n\n  // Update parameters.\n  this._yaw = newYaw;\n  this._pitch = newPitch;\n  this._roll = newRoll;\n  this._fov = newFov;\n  this._width = newWidth;\n  this._height = newHeight;\n  this._projectionCenterX = newProjectionCenterX;\n  this._projectionCenterY = newProjectionCenterY;\n\n  // Check whether the parameters changed and emit the corresponding events.\n  if (newYaw !== oldYaw || newPitch !== oldPitch || newRoll !== oldRoll || newFov !== oldFov || newWidth !== oldWidth || newHeight !== oldHeight || newProjectionCenterX !== oldProjectionCenterX || newProjectionCenterY !== oldProjectionCenterY) {\n    this._projectionChanged = true;\n    this.emit('change');\n  }\n  if (newWidth !== oldWidth || newHeight !== oldHeight) {\n    this.emit('resize');\n  }\n};\nRectilinearView.prototype._normalize = function (params) {\n  this._normalizeCoordinates(params);\n\n  // Make sure that neither the horizontal nor the vertical fields of view\n  // exceed π - fovLimitEpsilon.\n  var hfovPi = convertFov.htov(Math.PI, params.width, params.height);\n  var maxFov = isNaN(hfovPi) ? Math.PI : Math.min(Math.PI, hfovPi);\n  params.fov = clamp(params.fov, fovLimitEpsilon, maxFov - fovLimitEpsilon);\n  return params;\n};\nRectilinearView.prototype._normalizeCoordinates = function (params) {\n  // Constrain yaw, pitch and roll to the [-π, π] interval.\n  if ('yaw' in params) {\n    params.yaw = mod(params.yaw - Math.PI, -2 * Math.PI) + Math.PI;\n  }\n  if ('pitch' in params) {\n    params.pitch = mod(params.pitch - Math.PI, -2 * Math.PI) + Math.PI;\n  }\n  if ('roll' in params) {\n    params.roll = mod(params.roll - Math.PI, -2 * Math.PI) + Math.PI;\n  }\n  return params;\n};\n\n/**\n * Normalize view coordinates so that they are the closest to the current view.\n * Useful for tweening the view through the shortest path. If a result argument\n * is supplied, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {RectilinearViewCoords} result The result argument for the normalized\n *     view coordinates.\n */\nRectilinearView.prototype.normalizeToClosest = function (coords, result) {\n  var viewYaw = this._yaw;\n  var viewPitch = this._pitch;\n  var coordYaw = coords.yaw;\n  var coordPitch = coords.pitch;\n\n  // Check if the yaw is closer after subtracting or adding a full circle.\n  var prevYaw = coordYaw - 2 * Math.PI;\n  var nextYaw = coordYaw + 2 * Math.PI;\n  if (Math.abs(prevYaw - viewYaw) < Math.abs(coordYaw - viewYaw)) {\n    coordYaw = prevYaw;\n  } else if (Math.abs(nextYaw - viewYaw) < Math.abs(coordYaw - viewYaw)) {\n    coordYaw = nextYaw;\n  }\n\n  // Check if the pitch is closer after subtracting or adding a full circle.\n  var prevPitch = coordPitch - 2 * Math.PI;\n  var nextPitch = coordPitch + 2 * Math.PI;\n  if (Math.abs(prevPitch - viewPitch) < Math.abs(coordPitch - viewPitch)) {\n    coordPitch = prevPitch;\n  } else if (Math.abs(prevPitch - viewPitch) < Math.abs(coordPitch - viewPitch)) {\n    coordPitch = nextPitch;\n  }\n  result = result || {};\n  result.yaw = coordYaw;\n  result.pitch = coordPitch;\n  return result;\n};\nRectilinearView.prototype.updateWithControlParameters = function (parameters) {\n  // axisScaledX and axisScaledY are scaled according to their own axis\n  // x and y are scaled by the same value\n\n  // If the viewport dimensions are zero, assume a square viewport\n  // when converting from hfov to vfov.\n  var vfov = this._fov;\n  var hfov = convertFov.vtoh(vfov, this._width, this._height);\n  if (isNaN(hfov)) {\n    hfov = vfov;\n  }\n\n  // TODO: revisit this after we rethink the control parameters.\n  this.offsetYaw(parameters.axisScaledX * hfov + parameters.x * 2 * hfov + parameters.yaw);\n  this.offsetPitch(parameters.axisScaledY * vfov + parameters.y * 2 * hfov + parameters.pitch);\n  this.offsetRoll(-parameters.roll);\n  this.offsetFov(parameters.zoom * vfov);\n};\nRectilinearView.prototype._updateProjection = function () {\n  var projMatrix = this._projMatrix;\n  var invProjMatrix = this._invProjMatrix;\n  var frustum = this._frustum;\n  if (this._projectionChanged) {\n    var width = this._width;\n    var height = this._height;\n    var vfov = this._fov;\n    var hfov = convertFov.vtoh(vfov, width, height);\n    var aspect = width / height;\n    var projectionCenterX = this._projectionCenterX;\n    var projectionCenterY = this._projectionCenterY;\n    if (projectionCenterX !== 0 || projectionCenterY !== 0) {\n      var offsetAngleX = Math.atan(projectionCenterX * 2 * Math.tan(hfov / 2));\n      var offsetAngleY = Math.atan(projectionCenterY * 2 * Math.tan(vfov / 2));\n      var fovs = this._fovs;\n      fovs.leftDegrees = (hfov / 2 + offsetAngleX) * 180 / Math.PI;\n      fovs.rightDegrees = (hfov / 2 - offsetAngleX) * 180 / Math.PI;\n      fovs.upDegrees = (vfov / 2 + offsetAngleY) * 180 / Math.PI;\n      fovs.downDegrees = (vfov / 2 - offsetAngleY) * 180 / Math.PI;\n      mat4.perspectiveFromFieldOfView(projMatrix, fovs, -1, 1);\n    } else {\n      mat4.perspective(projMatrix, vfov, aspect, -1, 1);\n    }\n    mat4.rotateZ(projMatrix, projMatrix, this._roll);\n    mat4.rotateX(projMatrix, projMatrix, this._pitch);\n    mat4.rotateY(projMatrix, projMatrix, this._yaw);\n    mat4.invert(invProjMatrix, projMatrix);\n    this._matrixToFrustum(projMatrix, frustum);\n    this._projectionChanged = false;\n  }\n};\nRectilinearView.prototype._matrixToFrustum = function (p, f) {\n  // Extract frustum planes from projection matrix.\n  // http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n  vec4.set(f[0], p[3] + p[0], p[7] + p[4], p[11] + p[8], 0); // left\n  vec4.set(f[1], p[3] - p[0], p[7] - p[4], p[11] - p[8], 0); // right\n  vec4.set(f[2], p[3] + p[1], p[7] + p[5], p[11] + p[9], 0); // top\n  vec4.set(f[3], p[3] - p[1], p[7] - p[5], p[11] - p[9], 0); // bottom\n  vec4.set(f[4], p[3] + p[2], p[7] + p[6], p[11] + p[10], 0); // camera\n};\n\n/**\n * Returns the projection matrix for the current view.\n * @returns {mat4}\n */\nRectilinearView.prototype.projection = function () {\n  this._updateProjection();\n  return this._projMatrix;\n};\n\n/**\n * Returns the inverse projection matrix for the current view.\n * @returns {mat4}\n */\nRectilinearView.prototype.inverseProjection = function () {\n  this._updateProjection();\n  return this._invProjMatrix;\n};\n\n/**\n * Return whether the view frustum intersects the given rectangle.\n *\n * This function may return false positives, but never false negatives.\n * It is used for frustum culling, i.e., excluding invisible tiles from the\n * rendering process.\n *\n * @param {vec2[]} rectangle The vertices of the rectangle.\n */\nRectilinearView.prototype.intersects = function (rectangle) {\n  this._updateProjection();\n  var frustum = this._frustum;\n  var vertex = this._tmpVec;\n\n  // Check whether the rectangle is on the outer side of any of the frustum\n  // planes. This is a sufficient condition, though not necessary, for the\n  // rectangle to be completely outside the frustum.\n  for (var i = 0; i < frustum.length; i++) {\n    var plane = frustum[i];\n    var inside = false;\n    for (var j = 0; j < rectangle.length; j++) {\n      var corner = rectangle[j];\n      vec4.set(vertex, corner[0], corner[1], corner[2], 0);\n      if (vec4.dot(plane, vertex) >= 0) {\n        inside = true;\n      }\n    }\n    if (!inside) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Select the level that should be used to render the view.\n * @param {Level[]} levelList the list of levels from which to select.\n * @return {Level} the selected level.\n */\nRectilinearView.prototype.selectLevel = function (levelList) {\n  // Multiply the viewport width by the device pixel ratio to get the required\n  // horizontal resolution in pixels.\n  //\n  // Calculate the fraction of a cube face that would be visible given the\n  // current vertical field of view. Then, for each level, multiply by the\n  // level height to get the height in pixels of the portion that would be\n  // visible.\n  //\n  // Search for the smallest level that satifies the the required height,\n  // falling back on the largest level if none do.\n\n  var requiredPixels = pixelRatio() * this._height;\n  var coverFactor = Math.tan(0.5 * this._fov);\n  for (var i = 0; i < levelList.length; i++) {\n    var level = levelList[i];\n    if (coverFactor * level.height() >= requiredPixels) {\n      return level;\n    }\n  }\n  return levelList[levelList.length - 1];\n};\n\n/**\n * Convert view parameters into screen position. If a result argument is\n * provided, it is filled in and returned. Otherwise, a fresh object is filled\n * in and returned.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {Coords=} result The result argument for the screen coordinates.\n * @return {Coords}\n */\nRectilinearView.prototype.coordinatesToScreen = function (coords, result) {\n  var ray = this._tmpVec;\n  if (!result) {\n    result = {};\n  }\n  var width = this._width;\n  var height = this._height;\n\n  // Undefined on a null viewport.\n  if (width <= 0 || height <= 0) {\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n\n  // Compute view ray pointing into the (yaw, pitch) direction.\n  var yaw = coords.yaw;\n  var pitch = coords.pitch;\n  var x = Math.sin(yaw) * Math.cos(pitch);\n  var y = -Math.sin(pitch);\n  var z = -Math.cos(yaw) * Math.cos(pitch);\n  vec4.set(ray, x, y, z, 1);\n\n  // Project view ray onto clip space.\n  vec4.transformMat4(ray, ray, this.projection());\n\n  // w in clip space equals -z in camera space.\n  if (ray[3] >= 0) {\n    // Point is in front of camera.\n    // Convert to viewport coordinates.\n    result.x = width * (ray[0] / ray[3] + 1) / 2;\n    result.y = height * (1 - ray[1] / ray[3]) / 2;\n  } else {\n    // Point is behind camera.\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n  return result;\n};\n\n/**\n * Convert screen coordinates into view coordinates. If a result argument is\n * provided, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {Coords} coords The screen coordinates.\n * @param {RectilinearViewCoords=} result The view coordinates.\n * @return {RectilinearViewCoords}\n */\nRectilinearView.prototype.screenToCoordinates = function (coords, result) {\n  var ray = this._tmpVec;\n  if (!result) {\n    result = {};\n  }\n  var width = this._width;\n  var height = this._height;\n\n  // Convert viewport coordinates to clip space.\n  var vecx = 2 * coords.x / width - 1;\n  var vecy = 1 - 2 * coords.y / height;\n  vec4.set(ray, vecx, vecy, 1, 1);\n\n  // Project back to world space.\n  vec4.transformMat4(ray, ray, this.inverseProjection());\n\n  // Convert to spherical coordinates.\n  var r = Math.sqrt(ray[0] * ray[0] + ray[1] * ray[1] + ray[2] * ray[2]);\n  result.yaw = Math.atan2(ray[0], -ray[2]);\n  result.pitch = Math.acos(ray[1] / r) - Math.PI / 2;\n  this._normalizeCoordinates(result);\n  return result;\n};\n\n/**\n * Calculate the perspective transform required to position an element with\n * perspective.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {number} radius Radius of the sphere embedding the element.\n * @param {string} extraTransforms Extra transformations to be applied after\n *     the element is positioned. This may be used to rotate the element.\n * @return {string} The CSS 3D transform to be applied to the element.\n */\nRectilinearView.prototype.coordinatesToPerspectiveTransform = function (coords, radius, extraTransforms) {\n  extraTransforms = extraTransforms || \"\";\n  var height = this._height;\n  var width = this._width;\n  var fov = this._fov;\n  var perspective = 0.5 * height / Math.tan(fov / 2);\n  var transform = '';\n\n  // Center hotspot in screen.\n  transform += 'translateX(' + decimal(width / 2) + 'px) ';\n  transform += 'translateY(' + decimal(height / 2) + 'px) ';\n  transform += 'translateX(-50%) translateY(-50%) ';\n\n  // Set the perspective depth.\n  transform += 'perspective(' + decimal(perspective) + 'px) ';\n  transform += 'translateZ(' + decimal(perspective) + 'px) ';\n\n  // Set the camera rotation.\n  transform += 'rotateZ(' + decimal(-this._roll) + 'rad) ';\n  transform += 'rotateX(' + decimal(-this._pitch) + 'rad) ';\n  transform += 'rotateY(' + decimal(this._yaw) + 'rad) ';\n\n  // Set the hotspot rotation.\n  transform += 'rotateY(' + decimal(-coords.yaw) + 'rad) ';\n  transform += 'rotateX(' + decimal(coords.pitch) + 'rad) ';\n\n  // Move back to sphere.\n  transform += 'translateZ(' + decimal(-radius) + 'px) ';\n\n  // Apply the extra transformations\n  transform += extraTransforms + ' ';\n  return transform;\n};\n\n/**\n * Factory functions for view limiters. See {@link RectilinearViewLimiter}.\n * @namespace\n */\nRectilinearView.limit = {\n  /**\n   * Returns a view limiter that constrains the yaw angle.\n   * @param {number} min The minimum yaw value.\n   * @param {number} max The maximum yaw value.\n   * @return {RectilinearViewLimiter}\n   */\n  yaw: function (min, max) {\n    return function limitYaw(params) {\n      params.yaw = clamp(params.yaw, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the pitch angle.\n   * @param {number} min The minimum pitch value.\n   * @param {number} max The maximum pitch value.\n   * @return {RectilinearViewLimiter}\n   */\n  pitch: function (min, max) {\n    return function limitPitch(params) {\n      params.pitch = clamp(params.pitch, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the roll angle.\n   * @param {number} min The minimum roll value.\n   * @param {number} max The maximum roll value.\n   * @return {RectilinearViewLimiter}\n   */\n  roll: function (min, max) {\n    return function limitRoll(params) {\n      params.roll = clamp(params.roll, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the horizontal field of view.\n   * @param {number} min The minimum horizontal field of view.\n   * @param {number} max The maximum horizontal field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  hfov: function (min, max) {\n    return function limitHfov(params) {\n      var width = params.width;\n      var height = params.height;\n      if (width > 0 && height > 0) {\n        var vmin = convertFov.htov(min, width, height);\n        var vmax = convertFov.htov(max, width, height);\n        params.fov = clamp(params.fov, vmin, vmax);\n      }\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the vertical field of view.\n   * @param {number} min The minimum vertical field of view.\n   * @param {number} max The maximum vertical field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  vfov: function (min, max) {\n    return function limitVfov(params) {\n      params.fov = clamp(params.fov, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that prevents zooming in beyond the given\n   * resolution.\n   * @param {number} size The cube face width in pixels or, equivalently, one\n   *     fourth of the equirectangular width in pixels.\n   * @return {RectilinearViewLimiter}\n   */\n  resolution: function (size) {\n    return function limitResolution(params) {\n      var height = params.height;\n      if (height) {\n        var requiredPixels = pixelRatio() * height;\n        var minFov = 2 * Math.atan(requiredPixels / size);\n        params.fov = clamp(params.fov, minFov, Infinity);\n      }\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that limits the horizontal and vertical field of\n   * view, prevents zooming in past the image resolution, and limits the pitch\n   * range to prevent the camera wrapping around at the poles. These are the\n   * most common view constraints for a 360° panorama.\n   * @param {number} maxResolution The cube face width in pixels or,\n   *     equivalently, one fourth of the equirectangular width in pixels.\n   * @param {number} maxVFov The maximum vertical field of view.\n   * @param {number} [maxHFov=maxVFov] The maximum horizontal field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  traditional: function (maxResolution, maxVFov, maxHFov) {\n    maxHFov = maxHFov != null ? maxHFov : maxVFov;\n    return compose(RectilinearView.limit.resolution(maxResolution), RectilinearView.limit.vfov(0, maxVFov), RectilinearView.limit.hfov(0, maxHFov), RectilinearView.limit.pitch(-Math.PI / 2, Math.PI / 2));\n  }\n};\nRectilinearView.type = RectilinearView.prototype.type = 'rectilinear';\nmodule.exports = RectilinearView;","map":{"version":3,"names":["eventEmitter","require","mat4","vec4","pixelRatio","convertFov","mod","real","clamp","decimal","compose","clearOwnProperties","defaultWidth","defaultHeight","defaultYaw","defaultPitch","defaultRoll","defaultFov","Math","PI","defaultProjectionCenterX","defaultProjectionCenterY","fovLimitEpsilon","RectilinearView","params","limiter","_yaw","yaw","_pitch","pitch","_roll","roll","_fov","fov","_width","width","_height","height","_projectionCenterX","projectionCenterX","_projectionCenterY","projectionCenterY","_limiter","_projMatrix","create","_invProjMatrix","_frustum","_projectionChanged","_params","_fovs","_tmpVec","_update","prototype","destroy","size","parameters","setYaw","_resetParams","setPitch","setRoll","setFov","setProjectionCenterX","setProjectionCenterY","offsetYaw","yawOffset","offsetPitch","pitchOffset","offsetRoll","rollOffset","offsetFov","fovOffset","setSize","setParameters","setLimiter","oldYaw","oldPitch","oldRoll","oldFov","oldProjectionCenterX","oldProjectionCenterY","oldWidth","oldHeight","Error","_normalize","newYaw","newPitch","newRoll","newFov","newWidth","newHeight","newProjectionCenterX","newProjectionCenterY","emit","_normalizeCoordinates","hfovPi","htov","maxFov","isNaN","min","normalizeToClosest","coords","result","viewYaw","viewPitch","coordYaw","coordPitch","prevYaw","nextYaw","abs","prevPitch","nextPitch","updateWithControlParameters","vfov","hfov","vtoh","axisScaledX","x","axisScaledY","y","zoom","_updateProjection","projMatrix","invProjMatrix","frustum","aspect","offsetAngleX","atan","tan","offsetAngleY","fovs","leftDegrees","rightDegrees","upDegrees","downDegrees","perspectiveFromFieldOfView","perspective","rotateZ","rotateX","rotateY","invert","_matrixToFrustum","p","f","set","projection","inverseProjection","intersects","rectangle","vertex","i","length","plane","inside","j","corner","dot","selectLevel","levelList","requiredPixels","coverFactor","level","coordinatesToScreen","ray","sin","cos","z","transformMat4","screenToCoordinates","vecx","vecy","r","sqrt","atan2","acos","coordinatesToPerspectiveTransform","radius","extraTransforms","transform","limit","max","limitYaw","limitPitch","limitRoll","limitHfov","vmin","vmax","limitVfov","resolution","limitResolution","minFov","Infinity","traditional","maxResolution","maxVFov","maxHFov","type","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/views/Rectilinear.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar mat4 = require('gl-matrix').mat4;\nvar vec4 = require('gl-matrix').vec4;\nvar pixelRatio = require('../util/pixelRatio');\nvar convertFov = require('../util/convertFov');\nvar mod = require('../util/mod');\nvar real = require('../util/real');\nvar clamp = require('../util/clamp');\nvar decimal = require('../util/decimal');\nvar compose = require('../util/compose');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// Default viewport dimensions.\n// Start with zero to ensure that those values are handled correctly.\nvar defaultWidth = 0;\nvar defaultHeight = 0;\n\n// Default view parameters.\nvar defaultYaw = 0;\nvar defaultPitch = 0;\nvar defaultRoll = 0;\nvar defaultFov = Math.PI/4;\nvar defaultProjectionCenterX = 0;\nvar defaultProjectionCenterY = 0;\n\n// A fov of exactly 0 or π breaks some computations, so we constrain it to the\n// [fovLimitEpsilon, π - fovLimitEpsilon] interval. We use 6 decimal places for\n// the epsilon value to avoid broken rendering due to loss of precision in\n// floating point computations.\nvar fovLimitEpsilon = 0.000001;\n\n\n/**\n * @interface RectilinearViewParams\n *\n * A camera configuration for a {@link RectilinearView}.\n *\n * @property {number} yaw The yaw angle, in the [-π, π] range.\n *     When `yaw < 0`, the view rotates to the left.\n *     When `yaw > 0`, the view rotates to the right.\n *\n * @property {number} pitch The pitch angle, in the [-π, π] range.\n *     When `pitch < 0`, the view rotates downwards.\n *     When `pitch > 0`, the view rotates upwards.\n *\n * @property {number} roll The roll angle, in the [-π, π] range.\n *     When `roll < 0`, the view rotates clockwise.\n *     When `roll > 0`, the view rotates counter-clockwise.\n *\n * @property {fov} fov The vertical field of view, in the [0, π] range.\n */\n\n\n/**\n * @interface RectilinearViewCoords\n *\n * The position of a point in a 360° image.\n *\n * @property {number} yaw The yaw angle, in the [-π, π] range.\n * @property {number} pitch The pitch angle, in the [-π, π] range.\n */\n\n\n/**\n * @typedef {function} RectilinearViewLimiter\n *\n * View limiter for a {@link RectilinearView}.\n *\n * A view limiter is a function that receives a {@link RectilinearViewParams}\n * object, optionally modifies it in place, and returns it. It can be used to\n * enforce constraints on the view parameters.\n *\n * See {@link RectilinearView.limit} for commonly used limiters. They may be\n * composed together or with user-defined limiters with {@link util.compose}.\n *\n * @param {RectilinearViewParams} params\n * @return {RectilinearViewParams}\n */\n\n/**\n * @class RectilinearView\n * @implements View\n * @classdesc\n *\n * A {@link View} implementing a rectilinear projection for 360° images.\n *\n * @param {RectilinearViewParams=} params The initial view parameters. If\n *     unspecified, defaults to `{yaw: 0, pitch: 0, roll: 0, fov: Math.PI/4 }`.\n * @param {RectilinearViewLimiter=} limiter The view limiter. If unspecified,\n *     no view limiting is applied. See {@link RectilinearView.limit} for\n *     commonly used limiters.\n */\nfunction RectilinearView(params, limiter) {\n  // The initial values for the view parameters.\n  this._yaw = params && params.yaw != null ? params.yaw : defaultYaw;\n  this._pitch = params && params.pitch != null ? params.pitch : defaultPitch;\n  this._roll = params && params.roll != null ? params.roll : defaultRoll;\n  this._fov = params && params.fov != null ? params.fov : defaultFov;\n  this._width = params && params.width != null ?\n    params.width : defaultWidth;\n  this._height = params && params.height != null ?\n    params.height : defaultHeight;\n  this._projectionCenterX = params && params.projectionCenterX != null ?\n    params.projectionCenterX : defaultProjectionCenterX;\n  this._projectionCenterY = params && params.projectionCenterY != null ?\n    params.projectionCenterY : defaultProjectionCenterY;\n\n  // The initial value for the view limiter.\n  this._limiter = limiter || null;\n\n  // The last calculated projection matrix and its inverse.\n  this._projMatrix = mat4.create();\n  this._invProjMatrix = mat4.create();\n\n  // The last calculated view frustum.\n  this._frustum = [\n    vec4.create(), // left\n    vec4.create(), // right\n    vec4.create(), // bottom\n    vec4.create(), // top\n    vec4.create()  // camera\n  ];\n\n  // Whether the projection matrices and the view frustum need to be updated.\n  this._projectionChanged = true;\n\n  // Temporary variables used for calculations.\n  this._params = {};\n  this._fovs = {};\n  this._tmpVec = vec4.create();\n\n  // Force view limiting on initial parameters.\n  this._update();\n}\n\neventEmitter(RectilinearView);\n\n\n/**\n * Destructor.\n */\nRectilinearView.prototype.destroy = function() {\n  clearOwnProperties(this);\n};\n\n\n/**\n * Get the yaw angle.\n * @return {number}\n */\nRectilinearView.prototype.yaw = function() {\n  return this._yaw;\n};\n\n\n/**\n * Get the pitch angle.\n * @return {number}\n */\nRectilinearView.prototype.pitch = function() {\n  return this._pitch;\n};\n\n\n/**\n * Get the roll angle.\n * @return {number}\n */\nRectilinearView.prototype.roll = function() {\n  return this._roll;\n};\n\n\nRectilinearView.prototype.projectionCenterX = function() {\n  return this._projectionCenterX;\n};\n\n\nRectilinearView.prototype.projectionCenterY = function() {\n  return this._projectionCenterY;\n};\n\n\n/**\n * Get the fov value.\n * @return {number}\n */\nRectilinearView.prototype.fov = function() {\n  return this._fov;\n};\n\n\n/**\n * Get the viewport width.\n * @return {number}\n */\nRectilinearView.prototype.width = function() {\n  return this._width;\n};\n\n\n/**\n * Get the viewport height.\n * @return {number}\n */\nRectilinearView.prototype.height = function() {\n  return this._height;\n};\n\n\n/**\n * Get the viewport dimensions. If an argument is supplied, it is filled in with\n * the result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {Size=} size\n * @return {Size}\n */\nRectilinearView.prototype.size = function(size) {\n  size = size || {};\n  size.width = this._width;\n  size.height = this._height;\n  return size;\n};\n\n\n/**\n * Get the view parameters. If an argument is supplied, it is filled in with the\n * result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {RectilinearViewParams=} obj\n * @return {RectilinearViewParams}\n */\nRectilinearView.prototype.parameters = function(params) {\n  params = params || {};\n  params.yaw = this._yaw;\n  params.pitch = this._pitch;\n  params.roll = this._roll;\n  params.fov = this._fov;\n  return params;\n};\n\n\n/**\n * Get the view limiter, or null if unset.\n * @return {?RectilinearViewLimiter}\n */\nRectilinearView.prototype.limiter = function() {\n  return this._limiter;\n};\n\n\n/**\n * Set the yaw angle.\n * @param {number} yaw\n */\nRectilinearView.prototype.setYaw = function(yaw) {\n  this._resetParams();\n  this._params.yaw = yaw;\n  this._update(this._params);\n};\n\n\n/**\n * Set the pitch angle.\n * @param {number} pitch\n */\nRectilinearView.prototype.setPitch = function(pitch) {\n  this._resetParams();\n  this._params.pitch = pitch;\n  this._update(this._params);\n};\n\n\n/**\n * Set the roll angle.\n * @param {number} roll\n */\nRectilinearView.prototype.setRoll = function(roll) {\n  this._resetParams();\n  this._params.roll = roll;\n  this._update(this._params);\n};\n\n\n/**\n * Set the fov value.\n * @param {number} fov\n */\nRectilinearView.prototype.setFov = function(fov) {\n  this._resetParams();\n  this._params.fov = fov;\n  this._update(this._params);\n};\n\n\nRectilinearView.prototype.setProjectionCenterX = function(projectionCenterX) {\n  this._resetParams();\n  this._params.projectionCenterX = projectionCenterX;\n  this._update(this._params);\n};\n\n\nRectilinearView.prototype.setProjectionCenterY = function(projectionCenterY) {\n  this._resetParams();\n  this._params.projectionCenterY = projectionCenterY;\n  this._update(this._params);\n};\n\n\n/**\n * Add yawOffset to the current yaw value.\n * @param {number} yawOffset\n */\nRectilinearView.prototype.offsetYaw = function(yawOffset) {\n  this.setYaw(this._yaw + yawOffset);\n};\n\n\n/**\n * Add pitchOffset to the current pitch value.\n * @param {number} pitchOffset\n */\nRectilinearView.prototype.offsetPitch = function(pitchOffset) {\n  this.setPitch(this._pitch + pitchOffset);\n};\n\n\n/**\n * Add rollOffset to the current roll value.\n * @param {number} rollOffset\n */\nRectilinearView.prototype.offsetRoll = function(rollOffset) {\n  this.setRoll(this._roll + rollOffset);\n};\n\n\n/**\n * Add fovOffset to the current fov value.\n * @param {number} fovOffset\n */\nRectilinearView.prototype.offsetFov = function(fovOffset) {\n  this.setFov(this._fov + fovOffset);\n};\n\n\n/**\n * Set the viewport dimensions.\n * @param {Size} size\n */\nRectilinearView.prototype.setSize = function(size) {\n  this._resetParams();\n  this._params.width = size.width;\n  this._params.height = size.height;\n  this._update(this._params);\n};\n\n\n/**\n * Set the view parameters. Unspecified parameters are left unchanged.\n * @param {RectilinearViewParameters} params\n */\nRectilinearView.prototype.setParameters = function(params) {\n  this._resetParams();\n  this._params.yaw = params.yaw;\n  this._params.pitch = params.pitch;\n  this._params.roll = params.roll;\n  this._params.fov = params.fov;\n  this._params.projectionCenterX = params.projectionCenterX;\n  this._params.projectionCenterY = params.projectionCenterY;\n  this._update(this._params);\n};\n\n\n/**\n * Set the view limiter.\n * @param {?RectilinearViewLimiter} limiter The new limiter, or null to unset.\n */\nRectilinearView.prototype.setLimiter = function(limiter) {\n  this._limiter = limiter || null;\n  this._update();\n};\n\n\nRectilinearView.prototype._resetParams = function() {\n  var params = this._params;\n  params.yaw = null;\n  params.pitch = null;\n  params.roll = null;\n  params.fov = null;\n  params.width = null;\n  params.height = null;\n};\n\n\nRectilinearView.prototype._update = function(params) {\n\n  // Avoid object allocation when no parameters are supplied.\n  if (params == null) {\n    this._resetParams();\n    params = this._params;\n  }\n\n  // Save old parameters for later comparison.\n  var oldYaw = this._yaw;\n  var oldPitch = this._pitch;\n  var oldRoll = this._roll;\n  var oldFov = this._fov;\n  var oldProjectionCenterX = this._projectionCenterX;\n  var oldProjectionCenterY = this._projectionCenterY;\n  var oldWidth = this._width;\n  var oldHeight = this._height;\n\n  // Fill in object with the new set of parameters to pass into the limiter.\n  params.yaw = params.yaw != null ? params.yaw : oldYaw;\n  params.pitch = params.pitch != null ? params.pitch : oldPitch;\n  params.roll = params.roll != null ? params.roll : oldRoll;\n  params.fov = params.fov != null ? params.fov : oldFov;\n  params.width = params.width != null ? params.width : oldWidth;\n  params.height = params.height != null ? params.height : oldHeight;\n  params.projectionCenterX = params.projectionCenterX != null ?\n    params.projectionCenterX : oldProjectionCenterX;\n  params.projectionCenterY = params.projectionCenterY != null ?\n    params.projectionCenterY : oldProjectionCenterY;\n\n  // Apply view limiting when defined.\n  if (this._limiter) {\n    params = this._limiter(params);\n    if (!params) {\n      throw new Error('Bad view limiter');\n    }\n  }\n\n  // Normalize parameters.\n  params = this._normalize(params);\n\n  // Grab the limited parameters.\n  var newYaw = params.yaw;\n  var newPitch = params.pitch;\n  var newRoll = params.roll;\n  var newFov = params.fov;\n  var newWidth = params.width;\n  var newHeight = params.height;\n  var newProjectionCenterX = params.projectionCenterX;\n  var newProjectionCenterY = params.projectionCenterY;\n\n  // Consistency check.\n  if (!real(newYaw) || !real(newPitch) || !real(newRoll) ||\n      !real(newFov) || !real(newWidth) || !real(newHeight) ||\n      !real(newProjectionCenterX) || !real(newProjectionCenterY)) {\n    throw new Error('Bad view - suspect a broken limiter');\n  }\n\n  // Update parameters.\n  this._yaw = newYaw;\n  this._pitch = newPitch;\n  this._roll = newRoll;\n  this._fov = newFov;\n  this._width = newWidth;\n  this._height = newHeight;\n  this._projectionCenterX = newProjectionCenterX;\n  this._projectionCenterY = newProjectionCenterY;\n\n  // Check whether the parameters changed and emit the corresponding events.\n  if (newYaw !== oldYaw || newPitch !== oldPitch || newRoll !== oldRoll ||\n      newFov !== oldFov || newWidth !== oldWidth || newHeight !== oldHeight ||\n      newProjectionCenterX !== oldProjectionCenterX ||\n      newProjectionCenterY !== oldProjectionCenterY) {\n    this._projectionChanged = true;\n    this.emit('change');\n  }\n  if (newWidth !== oldWidth || newHeight !== oldHeight) {\n    this.emit('resize');\n  }\n\n};\n\n\nRectilinearView.prototype._normalize = function(params) {\n\n  this._normalizeCoordinates(params);\n\n  // Make sure that neither the horizontal nor the vertical fields of view\n  // exceed π - fovLimitEpsilon.\n  var hfovPi = convertFov.htov(Math.PI, params.width, params.height);\n  var maxFov = isNaN(hfovPi) ? Math.PI : Math.min(Math.PI, hfovPi);\n  params.fov = clamp(params.fov, fovLimitEpsilon, maxFov - fovLimitEpsilon);\n\n  return params;\n};\n\n\nRectilinearView.prototype._normalizeCoordinates = function(params) {\n  // Constrain yaw, pitch and roll to the [-π, π] interval.\n  if ('yaw' in params) {\n    params.yaw = mod(params.yaw - Math.PI, -2*Math.PI) + Math.PI;\n  }\n  if ('pitch' in params) {\n    params.pitch = mod(params.pitch - Math.PI, -2*Math.PI) + Math.PI;\n  }\n  if ('roll' in params) {\n    params.roll = mod(params.roll - Math.PI, -2*Math.PI) + Math.PI;\n  }\n  return params;\n};\n\n\n/**\n * Normalize view coordinates so that they are the closest to the current view.\n * Useful for tweening the view through the shortest path. If a result argument\n * is supplied, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {RectilinearViewCoords} result The result argument for the normalized\n *     view coordinates.\n */\nRectilinearView.prototype.normalizeToClosest = function(coords, result) {\n\n  var viewYaw = this._yaw;\n  var viewPitch = this._pitch;\n\n  var coordYaw = coords.yaw;\n  var coordPitch = coords.pitch;\n\n  // Check if the yaw is closer after subtracting or adding a full circle.\n  var prevYaw = coordYaw - 2*Math.PI;\n  var nextYaw = coordYaw + 2*Math.PI;\n  if (Math.abs(prevYaw - viewYaw) < Math.abs(coordYaw - viewYaw)) {\n    coordYaw = prevYaw;\n  }\n  else if (Math.abs(nextYaw - viewYaw) < Math.abs(coordYaw - viewYaw)) {\n    coordYaw = nextYaw;\n  }\n\n  // Check if the pitch is closer after subtracting or adding a full circle.\n  var prevPitch = coordPitch - 2*Math.PI;\n  var nextPitch = coordPitch + 2*Math.PI;\n  if (Math.abs(prevPitch - viewPitch) < Math.abs(coordPitch - viewPitch)) {\n    coordPitch = prevPitch;\n  }\n  else if (Math.abs(prevPitch - viewPitch) < Math.abs(coordPitch - viewPitch)) {\n    coordPitch = nextPitch;\n  }\n\n  result = result || {};\n  result.yaw = coordYaw;\n  result.pitch = coordPitch;\n  return result;\n\n};\n\n\nRectilinearView.prototype.updateWithControlParameters = function(parameters) {\n  // axisScaledX and axisScaledY are scaled according to their own axis\n  // x and y are scaled by the same value\n\n  // If the viewport dimensions are zero, assume a square viewport\n  // when converting from hfov to vfov.\n  var vfov = this._fov;\n  var hfov = convertFov.vtoh(vfov, this._width, this._height);\n  if (isNaN(hfov)) {\n    hfov = vfov;\n  }\n\n  // TODO: revisit this after we rethink the control parameters.\n  this.offsetYaw(parameters.axisScaledX * hfov + parameters.x * 2 * hfov + parameters.yaw);\n  this.offsetPitch(parameters.axisScaledY * vfov + parameters.y * 2 * hfov + parameters.pitch);\n  this.offsetRoll(-parameters.roll);\n  this.offsetFov(parameters.zoom * vfov);\n};\n\n\nRectilinearView.prototype._updateProjection = function() {\n  var projMatrix = this._projMatrix;\n  var invProjMatrix = this._invProjMatrix;\n  var frustum = this._frustum;\n\n  if (this._projectionChanged) {\n    var width = this._width;\n    var height = this._height;\n\n    var vfov = this._fov;\n    var hfov = convertFov.vtoh(vfov, width, height);\n    var aspect = width / height;\n\n    var projectionCenterX = this._projectionCenterX;\n    var projectionCenterY = this._projectionCenterY;\n\n    if (projectionCenterX !== 0 || projectionCenterY !== 0) {\n      var offsetAngleX = Math.atan(projectionCenterX * 2 * Math.tan(hfov/2));\n      var offsetAngleY = Math.atan(projectionCenterY * 2 * Math.tan(vfov/2));\n      var fovs = this._fovs;\n      fovs.leftDegrees = (hfov/2 + offsetAngleX) * 180/Math.PI;\n      fovs.rightDegrees = (hfov/2 - offsetAngleX) * 180/Math.PI;\n      fovs.upDegrees = (vfov/2 + offsetAngleY) * 180/Math.PI;\n      fovs.downDegrees = (vfov/2 - offsetAngleY) * 180/Math.PI;\n      mat4.perspectiveFromFieldOfView(projMatrix, fovs, -1, 1);\n    } else {\n      mat4.perspective(projMatrix, vfov, aspect, -1, 1);\n    }\n\n    mat4.rotateZ(projMatrix, projMatrix, this._roll);\n    mat4.rotateX(projMatrix, projMatrix, this._pitch);\n    mat4.rotateY(projMatrix, projMatrix, this._yaw);\n\n    mat4.invert(invProjMatrix, projMatrix);\n\n    this._matrixToFrustum(projMatrix, frustum);\n\n    this._projectionChanged = false;\n  }\n};\n\n\nRectilinearView.prototype._matrixToFrustum = function(p, f) {\n  // Extract frustum planes from projection matrix.\n  // http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n  vec4.set(f[0], p[3] + p[0], p[7] + p[4], p[11] + p[8],  0); // left\n  vec4.set(f[1], p[3] - p[0], p[7] - p[4], p[11] - p[8],  0); // right\n  vec4.set(f[2], p[3] + p[1], p[7] + p[5], p[11] + p[9],  0); // top\n  vec4.set(f[3], p[3] - p[1], p[7] - p[5], p[11] - p[9],  0); // bottom\n  vec4.set(f[4], p[3] + p[2], p[7] + p[6], p[11] + p[10], 0); // camera\n};\n\n\n/**\n * Returns the projection matrix for the current view.\n * @returns {mat4}\n */\nRectilinearView.prototype.projection = function() {\n  this._updateProjection();\n  return this._projMatrix;\n};\n\n\n/**\n * Returns the inverse projection matrix for the current view.\n * @returns {mat4}\n */\nRectilinearView.prototype.inverseProjection = function() {\n  this._updateProjection();\n  return this._invProjMatrix;\n};\n\n\n/**\n * Return whether the view frustum intersects the given rectangle.\n *\n * This function may return false positives, but never false negatives.\n * It is used for frustum culling, i.e., excluding invisible tiles from the\n * rendering process.\n *\n * @param {vec2[]} rectangle The vertices of the rectangle.\n */\nRectilinearView.prototype.intersects = function(rectangle) {\n  this._updateProjection();\n\n  var frustum = this._frustum;\n  var vertex = this._tmpVec;\n\n  // Check whether the rectangle is on the outer side of any of the frustum\n  // planes. This is a sufficient condition, though not necessary, for the\n  // rectangle to be completely outside the frustum.\n  for (var i = 0; i < frustum.length; i++) {\n    var plane = frustum[i];\n    var inside = false;\n    for (var j = 0; j < rectangle.length; j++) {\n      var corner = rectangle[j];\n      vec4.set(vertex, corner[0], corner[1], corner[2], 0);\n      if (vec4.dot(plane, vertex) >= 0) {\n        inside = true;\n      }\n    }\n    if (!inside) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Select the level that should be used to render the view.\n * @param {Level[]} levelList the list of levels from which to select.\n * @return {Level} the selected level.\n */\nRectilinearView.prototype.selectLevel = function(levelList) {\n\n  // Multiply the viewport width by the device pixel ratio to get the required\n  // horizontal resolution in pixels.\n  //\n  // Calculate the fraction of a cube face that would be visible given the\n  // current vertical field of view. Then, for each level, multiply by the\n  // level height to get the height in pixels of the portion that would be\n  // visible.\n  //\n  // Search for the smallest level that satifies the the required height,\n  // falling back on the largest level if none do.\n\n  var requiredPixels = pixelRatio() * this._height;\n  var coverFactor = Math.tan(0.5 * this._fov);\n\n  for (var i = 0; i < levelList.length; i++) {\n    var level = levelList[i];\n    if (coverFactor * level.height() >= requiredPixels) {\n      return level;\n    }\n  }\n\n  return levelList[levelList.length - 1];\n\n};\n\n\n/**\n * Convert view parameters into screen position. If a result argument is\n * provided, it is filled in and returned. Otherwise, a fresh object is filled\n * in and returned.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {Coords=} result The result argument for the screen coordinates.\n * @return {Coords}\n */\nRectilinearView.prototype.coordinatesToScreen = function(coords, result) {\n  var ray = this._tmpVec;\n\n  if (!result) {\n    result = {};\n  }\n\n  var width = this._width;\n  var height = this._height;\n\n  // Undefined on a null viewport.\n  if (width <= 0 || height <= 0) {\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n\n  // Compute view ray pointing into the (yaw, pitch) direction.\n  var yaw = coords.yaw;\n  var pitch = coords.pitch;\n  var x = Math.sin(yaw) * Math.cos(pitch);\n  var y = -Math.sin(pitch);\n  var z = -Math.cos(yaw) * Math.cos(pitch);\n  vec4.set(ray, x, y, z, 1);\n\n  // Project view ray onto clip space.\n  vec4.transformMat4(ray, ray, this.projection());\n\n  // w in clip space equals -z in camera space.\n  if (ray[3] >= 0) {\n    // Point is in front of camera.\n    // Convert to viewport coordinates.\n    result.x = width * (ray[0] / ray[3] + 1) / 2;\n    result.y = height * (1 - ray[1] / ray[3]) / 2;\n  } else {\n    // Point is behind camera.\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n\n  return result;\n};\n\n\n/**\n * Convert screen coordinates into view coordinates. If a result argument is\n * provided, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {Coords} coords The screen coordinates.\n * @param {RectilinearViewCoords=} result The view coordinates.\n * @return {RectilinearViewCoords}\n */\nRectilinearView.prototype.screenToCoordinates = function(coords, result) {\n  var ray = this._tmpVec;\n\n  if (!result) {\n    result = {};\n  }\n\n  var width = this._width;\n  var height = this._height;\n\n  // Convert viewport coordinates to clip space.\n  var vecx = 2 * coords.x / width - 1;\n  var vecy = 1 - 2 * coords.y / height;\n  vec4.set(ray, vecx, vecy, 1, 1);\n\n  // Project back to world space.\n  vec4.transformMat4(ray, ray, this.inverseProjection());\n\n  // Convert to spherical coordinates.\n  var r = Math.sqrt(ray[0] * ray[0] + ray[1] * ray[1] + ray[2] * ray[2]);\n  result.yaw = Math.atan2(ray[0], -ray[2]);\n  result.pitch = Math.acos(ray[1] / r) - Math.PI/2;\n\n  this._normalizeCoordinates(result);\n\n  return result;\n};\n\n\n/**\n * Calculate the perspective transform required to position an element with\n * perspective.\n *\n * @param {RectilinearViewCoords} coords The view coordinates.\n * @param {number} radius Radius of the sphere embedding the element.\n * @param {string} extraTransforms Extra transformations to be applied after\n *     the element is positioned. This may be used to rotate the element.\n * @return {string} The CSS 3D transform to be applied to the element.\n */\nRectilinearView.prototype.coordinatesToPerspectiveTransform = function(\n    coords, radius, extraTransforms) {\n  extraTransforms = extraTransforms || \"\";\n\n  var height = this._height;\n  var width = this._width;\n  var fov = this._fov;\n  var perspective = 0.5 * height / Math.tan(fov / 2);\n\n  var transform = '';\n\n  // Center hotspot in screen.\n  transform += 'translateX(' + decimal(width/2) + 'px) ';\n  transform += 'translateY(' + decimal(height/2) + 'px) ';\n  transform += 'translateX(-50%) translateY(-50%) ';\n\n  // Set the perspective depth.\n  transform += 'perspective(' + decimal(perspective) + 'px) ';\n  transform += 'translateZ(' + decimal(perspective) + 'px) ';\n\n  // Set the camera rotation.\n  transform += 'rotateZ(' + decimal(-this._roll) + 'rad) ';\n  transform += 'rotateX(' + decimal(-this._pitch) + 'rad) ';\n  transform += 'rotateY(' + decimal(this._yaw) + 'rad) ';\n\n  // Set the hotspot rotation.\n  transform += 'rotateY(' + decimal(-coords.yaw) + 'rad) ';\n  transform += 'rotateX(' + decimal(coords.pitch) + 'rad) ';\n\n  // Move back to sphere.\n  transform += 'translateZ(' + decimal(-radius) + 'px) ';\n\n  // Apply the extra transformations\n  transform += extraTransforms + ' ';\n\n  return transform;\n};\n\n\n/**\n * Factory functions for view limiters. See {@link RectilinearViewLimiter}.\n * @namespace\n */\nRectilinearView.limit = {\n\n  /**\n   * Returns a view limiter that constrains the yaw angle.\n   * @param {number} min The minimum yaw value.\n   * @param {number} max The maximum yaw value.\n   * @return {RectilinearViewLimiter}\n   */\n  yaw: function(min, max) {\n    return function limitYaw(params) {\n      params.yaw = clamp(params.yaw, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the pitch angle.\n   * @param {number} min The minimum pitch value.\n   * @param {number} max The maximum pitch value.\n   * @return {RectilinearViewLimiter}\n   */\n  pitch: function(min, max) {\n    return function limitPitch(params) {\n      params.pitch = clamp(params.pitch, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the roll angle.\n   * @param {number} min The minimum roll value.\n   * @param {number} max The maximum roll value.\n   * @return {RectilinearViewLimiter}\n   */\n  roll: function(min, max) {\n    return function limitRoll(params) {\n      params.roll = clamp(params.roll, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the horizontal field of view.\n   * @param {number} min The minimum horizontal field of view.\n   * @param {number} max The maximum horizontal field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  hfov: function(min, max) {\n    return function limitHfov(params) {\n      var width = params.width;\n      var height = params.height;\n      if (width > 0 && height > 0) {\n        var vmin = convertFov.htov(min, width, height);\n        var vmax = convertFov.htov(max, width, height);\n        params.fov = clamp(params.fov, vmin, vmax);\n      }\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the vertical field of view.\n   * @param {number} min The minimum vertical field of view.\n   * @param {number} max The maximum vertical field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  vfov: function(min, max) {\n    return function limitVfov(params) {\n      params.fov = clamp(params.fov, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that prevents zooming in beyond the given\n   * resolution.\n   * @param {number} size The cube face width in pixels or, equivalently, one\n   *     fourth of the equirectangular width in pixels.\n   * @return {RectilinearViewLimiter}\n   */\n  resolution: function(size) {\n    return function limitResolution(params) {\n      var height = params.height;\n      if (height) {\n        var requiredPixels = pixelRatio() * height;\n        var minFov = 2 * Math.atan(requiredPixels / size);\n        params.fov = clamp(params.fov, minFov, Infinity);\n      }\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that limits the horizontal and vertical field of\n   * view, prevents zooming in past the image resolution, and limits the pitch\n   * range to prevent the camera wrapping around at the poles. These are the\n   * most common view constraints for a 360° panorama.\n   * @param {number} maxResolution The cube face width in pixels or,\n   *     equivalently, one fourth of the equirectangular width in pixels.\n   * @param {number} maxVFov The maximum vertical field of view.\n   * @param {number} [maxHFov=maxVFov] The maximum horizontal field of view.\n   * @return {RectilinearViewLimiter}\n   */\n  traditional: function(maxResolution, maxVFov, maxHFov) {\n    maxHFov = maxHFov != null ? maxHFov : maxVFov;\n\n    return compose(\n      RectilinearView.limit.resolution(maxResolution),\n      RectilinearView.limit.vfov(0, maxVFov),\n      RectilinearView.limit.hfov(0, maxHFov),\n      RectilinearView.limit.pitch(-Math.PI/2, Math.PI/2));\n  }\n\n};\n\n\nRectilinearView.type = RectilinearView.prototype.type = 'rectilinear';\n\n\nmodule.exports = RectilinearView;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}