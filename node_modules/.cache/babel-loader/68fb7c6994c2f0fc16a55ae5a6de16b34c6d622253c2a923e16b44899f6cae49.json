{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar defaults = require('../util/defaults');\nvar DragControlMethod = require('./Drag');\nvar QtvrControlMethod = require('./Qtvr');\nvar ScrollZoomControlMethod = require('./ScrollZoom');\nvar PinchZoomControlMethod = require('./PinchZoom');\nvar KeyControlMethod = require('./Key');\nvar defaultOptions = {\n  mouseViewMode: 'drag',\n  dragMode: 'pan'\n};\n\n/**\n * Instantiate and register some commonly used {@link ControlMethod} instances.\n *\n * The following instances are registered:\n *   - mouseViewDrag\n *   - mouseViewQtvr\n *   - touchView\n *   - pinch\n *   - arrowKeys\n *   - plusMinusKeys\n *   - wasdKeys\n *   - qeKeys\n *\n * @param {Controls} controls Where to register the instances.\n * @param {Element} element Element to listen for events.\n * @param {'drag'|'qtvr'} opts.mouseViewMode\n * @param {'pan'|'pinch'} opts.dragMode\n * @param {boolean} opts.scrollZoom\n */\nfunction registerDefaultControls(controls, element, opts) {\n  opts = defaults(opts || {}, defaultOptions);\n  var controlMethods = {\n    mouseViewDrag: new DragControlMethod(element, 'mouse'),\n    mouseViewQtvr: new QtvrControlMethod(element, 'mouse'),\n    leftArrowKey: new KeyControlMethod(37, 'x', -0.7, 3),\n    rightArrowKey: new KeyControlMethod(39, 'x', 0.7, 3),\n    upArrowKey: new KeyControlMethod(38, 'y', -0.7, 3),\n    downArrowKey: new KeyControlMethod(40, 'y', 0.7, 3),\n    plusKey: new KeyControlMethod(107, 'zoom', -0.7, 3),\n    minusKey: new KeyControlMethod(109, 'zoom', 0.7, 3),\n    wKey: new KeyControlMethod(87, 'y', -0.7, 3),\n    aKey: new KeyControlMethod(65, 'x', -0.7, 3),\n    sKey: new KeyControlMethod(83, 'y', 0.7, 3),\n    dKey: new KeyControlMethod(68, 'x', 0.7, 3),\n    qKey: new KeyControlMethod(81, 'roll', 0.7, 3),\n    eKey: new KeyControlMethod(69, 'roll', -0.7, 3)\n  };\n  var enabledControls = ['scrollZoom', 'touchView', 'pinch'];\n  if (opts.scrollZoom !== false) {\n    controlMethods.scrollZoom = new ScrollZoomControlMethod(element); //{ frictionTime: 0 }\n  }\n\n  var controlMethodGroups = {\n    arrowKeys: ['leftArrowKey', 'rightArrowKey', 'upArrowKey', 'downArrowKey'],\n    plusMinusKeys: ['plusKey', 'minusKey'],\n    wasdKeys: ['wKey', 'aKey', 'sKey', 'dKey'],\n    qeKeys: ['qKey', 'eKey']\n  };\n  switch (opts.dragMode) {\n    case 'pinch':\n      controlMethods.pinch = new DragControlMethod(element, 'touch', {\n        hammerEvent: 'pinch'\n      });\n      break;\n    case 'pan':\n      controlMethods.touchView = new DragControlMethod(element, 'touch');\n      controlMethods.pinch = new PinchZoomControlMethod(element, 'touch');\n      break;\n    default:\n      throw new Error(\"Unknown drag mode: \" + opts.dragMode);\n  }\n  switch (opts.mouseViewMode) {\n    case 'drag':\n      enabledControls.push('mouseViewDrag');\n      break;\n    case 'qtvr':\n      enabledControls.push('mouseViewQtvr');\n      break;\n    default:\n      throw new Error(\"Unknown mouse view mode: \" + opts.mouseViewMode);\n  }\n  for (var id in controlMethods) {\n    var method = controlMethods[id];\n    controls.registerMethod(id, method);\n    if (enabledControls.indexOf(id) >= 0) {\n      controls.enableMethod(id);\n    }\n  }\n  for (var groupId in controlMethodGroups) {\n    var methodGroup = controlMethodGroups[groupId];\n    controls.addMethodGroup(groupId, methodGroup);\n  }\n  return controlMethods;\n}\nmodule.exports = registerDefaultControls;","map":{"version":3,"names":["defaults","require","DragControlMethod","QtvrControlMethod","ScrollZoomControlMethod","PinchZoomControlMethod","KeyControlMethod","defaultOptions","mouseViewMode","dragMode","registerDefaultControls","controls","element","opts","controlMethods","mouseViewDrag","mouseViewQtvr","leftArrowKey","rightArrowKey","upArrowKey","downArrowKey","plusKey","minusKey","wKey","aKey","sKey","dKey","qKey","eKey","enabledControls","scrollZoom","controlMethodGroups","arrowKeys","plusMinusKeys","wasdKeys","qeKeys","pinch","hammerEvent","touchView","Error","push","id","method","registerMethod","indexOf","enableMethod","groupId","methodGroup","addMethodGroup","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/controls/registerDefaultControls.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar defaults = require('../util/defaults');\nvar DragControlMethod = require('./Drag');\nvar QtvrControlMethod = require('./Qtvr');\nvar ScrollZoomControlMethod = require('./ScrollZoom');\nvar PinchZoomControlMethod = require('./PinchZoom');\nvar KeyControlMethod = require('./Key');\n\nvar defaultOptions = {\n  mouseViewMode: 'drag',\n  dragMode: 'pan'\n};\n\n/**\n * Instantiate and register some commonly used {@link ControlMethod} instances.\n *\n * The following instances are registered:\n *   - mouseViewDrag\n *   - mouseViewQtvr\n *   - touchView\n *   - pinch\n *   - arrowKeys\n *   - plusMinusKeys\n *   - wasdKeys\n *   - qeKeys\n *\n * @param {Controls} controls Where to register the instances.\n * @param {Element} element Element to listen for events.\n * @param {'drag'|'qtvr'} opts.mouseViewMode\n * @param {'pan'|'pinch'} opts.dragMode\n * @param {boolean} opts.scrollZoom\n */\nfunction registerDefaultControls(controls, element, opts) {\n  opts = defaults(opts || {}, defaultOptions);\n\n  var controlMethods = {\n    mouseViewDrag: new DragControlMethod(element, 'mouse'),\n    mouseViewQtvr: new QtvrControlMethod(element, 'mouse'),\n\n    leftArrowKey: new KeyControlMethod(37, 'x', -0.7, 3),\n    rightArrowKey: new KeyControlMethod(39, 'x', 0.7, 3),\n    upArrowKey: new KeyControlMethod(38, 'y', -0.7, 3),\n    downArrowKey: new KeyControlMethod(40, 'y', 0.7, 3),\n    plusKey: new KeyControlMethod(107, 'zoom', -0.7, 3),\n    minusKey: new KeyControlMethod(109, 'zoom', 0.7, 3),\n\n    wKey: new KeyControlMethod(87, 'y', -0.7, 3),\n    aKey: new KeyControlMethod(65, 'x', -0.7, 3),\n    sKey: new KeyControlMethod(83, 'y', 0.7, 3),\n    dKey: new KeyControlMethod(68, 'x', 0.7, 3),\n    qKey: new KeyControlMethod(81, 'roll', 0.7, 3),\n    eKey: new KeyControlMethod(69, 'roll', -0.7, 3)\n  };\n\n  var enabledControls = ['scrollZoom', 'touchView', 'pinch' ];\n\n  if (opts.scrollZoom !== false) {\n    controlMethods.scrollZoom = new ScrollZoomControlMethod(element); //{ frictionTime: 0 }\n  }\n\n  var controlMethodGroups = {\n    arrowKeys: [ 'leftArrowKey', 'rightArrowKey', 'upArrowKey', 'downArrowKey' ],\n    plusMinusKeys: [ 'plusKey', 'minusKey' ],\n    wasdKeys: [ 'wKey', 'aKey', 'sKey', 'dKey' ],\n    qeKeys: [ 'qKey', 'eKey' ]\n  };\n\n\n  switch (opts.dragMode) {\n    case 'pinch':\n       controlMethods.pinch = new DragControlMethod(element, 'touch', { hammerEvent: 'pinch' });\n      break;\n    case 'pan':\n      controlMethods.touchView = new DragControlMethod(element, 'touch');\n      controlMethods.pinch = new PinchZoomControlMethod(element, 'touch');\n      break;\n    default:\n      throw new Error(\"Unknown drag mode: \" + opts.dragMode);\n  }\n\n  switch (opts.mouseViewMode) {\n    case 'drag':\n      enabledControls.push('mouseViewDrag');\n      break;\n    case 'qtvr':\n      enabledControls.push('mouseViewQtvr');\n      break;\n    default:\n      throw new Error(\"Unknown mouse view mode: \" + opts.mouseViewMode);\n  }\n\n  for (var id in controlMethods) {\n    var method = controlMethods[id];\n    controls.registerMethod(id, method);\n    if (enabledControls.indexOf(id) >= 0) {\n      controls.enableMethod(id);\n    }\n  }\n\n  for (var groupId in controlMethodGroups) {\n    var methodGroup = controlMethodGroups[groupId];\n    controls.addMethodGroup(groupId, methodGroup);\n  }\n\n  return controlMethods;\n}\n\nmodule.exports = registerDefaultControls;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}