{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * Converts a {@link RectSpec} into an equivalent {@link Rect}.\n *\n * A {@link RectSpec} is a convenient user API format, providing default values\n * and the flexibility of specifying absolute, relative or mixed dimensions.\n *\n * A {@link Rect} is a more convenient format for the rendering pipeline. It is\n * always expressed in normalized coordinates, and all its properties are\n * guaranteed to be present.\n *\n * @param {number} totalWidth The total width of the rendering area in pixels.\n * @param {number} totalHeight The total height of the rendering area in pixels.\n * @param {RectSpec} spec The input spec, defaulting to the full rendering area\n *     if null or undefined.\n * @param {Rect} result The output spec. If the argument is present, it is\n *     filled in and returned; otherwise, a fresh object is returned.\n */\nfunction calcRect(totalWidth, totalHeight, spec, result) {\n  result = result || {};\n  var width;\n  if (spec != null && spec.absoluteWidth != null) {\n    width = spec.absoluteWidth / totalWidth;\n  } else if (spec != null && spec.relativeWidth != null) {\n    width = spec.relativeWidth;\n  } else {\n    width = 1;\n  }\n  var height;\n  if (spec && spec.absoluteHeight != null) {\n    height = spec.absoluteHeight / totalHeight;\n  } else if (spec != null && spec.relativeHeight != null) {\n    height = spec.relativeHeight;\n  } else {\n    height = 1;\n  }\n  var x;\n  if (spec != null && spec.absoluteX != null) {\n    x = spec.absoluteX / totalWidth;\n  } else if (spec != null && spec.relativeX != null) {\n    x = spec.relativeX;\n  } else {\n    x = 0;\n  }\n  var y;\n  if (spec != null && spec.absoluteY != null) {\n    y = spec.absoluteY / totalHeight;\n  } else if (spec != null && spec.relativeY != null) {\n    y = spec.relativeY;\n  } else {\n    y = 0;\n  }\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n  return result;\n}\nmodule.exports = calcRect;","map":{"version":3,"names":["calcRect","totalWidth","totalHeight","spec","result","width","absoluteWidth","relativeWidth","height","absoluteHeight","relativeHeight","x","absoluteX","relativeX","y","absoluteY","relativeY","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/util/calcRect.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * Converts a {@link RectSpec} into an equivalent {@link Rect}.\n *\n * A {@link RectSpec} is a convenient user API format, providing default values\n * and the flexibility of specifying absolute, relative or mixed dimensions.\n *\n * A {@link Rect} is a more convenient format for the rendering pipeline. It is\n * always expressed in normalized coordinates, and all its properties are\n * guaranteed to be present.\n *\n * @param {number} totalWidth The total width of the rendering area in pixels.\n * @param {number} totalHeight The total height of the rendering area in pixels.\n * @param {RectSpec} spec The input spec, defaulting to the full rendering area\n *     if null or undefined.\n * @param {Rect} result The output spec. If the argument is present, it is\n *     filled in and returned; otherwise, a fresh object is returned.\n */\nfunction calcRect(totalWidth, totalHeight, spec, result) {\n\n  result = result || {};\n\n  var width;\n  if (spec != null && spec.absoluteWidth != null) {\n    width = spec.absoluteWidth / totalWidth;\n  } else if (spec != null && spec.relativeWidth != null) {\n    width = spec.relativeWidth;\n  } else {\n    width = 1;\n  }\n\n  var height;\n  if (spec && spec.absoluteHeight != null) {\n    height = spec.absoluteHeight / totalHeight;\n  } else if (spec != null && spec.relativeHeight != null) {\n    height = spec.relativeHeight;\n  } else {\n    height = 1;\n  }\n\n  var x;\n  if (spec != null && spec.absoluteX != null) {\n    x = spec.absoluteX / totalWidth;\n  } else if (spec != null && spec.relativeX != null) {\n    x = spec.relativeX;\n  } else {\n    x = 0;\n  }\n\n  var y;\n  if (spec != null && spec.absoluteY != null) {\n    y = spec.absoluteY / totalHeight;\n  } else if (spec != null && spec.relativeY != null) {\n    y = spec.relativeY;\n  } else {\n    y = 0;\n  }\n\n  result.x = x;\n  result.y = y;\n  result.width = width;\n  result.height = height;\n\n  return result;\n}\n\nmodule.exports = calcRect;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACC,UAAU,EAAEC,WAAW,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAEvDA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;EAErB,IAAIC,KAAK;EACT,IAAIF,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACG,aAAa,IAAI,IAAI,EAAE;IAC9CD,KAAK,GAAGF,IAAI,CAACG,aAAa,GAAGL,UAAU;EACzC,CAAC,MAAM,IAAIE,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACI,aAAa,IAAI,IAAI,EAAE;IACrDF,KAAK,GAAGF,IAAI,CAACI,aAAa;EAC5B,CAAC,MAAM;IACLF,KAAK,GAAG,CAAC;EACX;EAEA,IAAIG,MAAM;EACV,IAAIL,IAAI,IAAIA,IAAI,CAACM,cAAc,IAAI,IAAI,EAAE;IACvCD,MAAM,GAAGL,IAAI,CAACM,cAAc,GAAGP,WAAW;EAC5C,CAAC,MAAM,IAAIC,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACO,cAAc,IAAI,IAAI,EAAE;IACtDF,MAAM,GAAGL,IAAI,CAACO,cAAc;EAC9B,CAAC,MAAM;IACLF,MAAM,GAAG,CAAC;EACZ;EAEA,IAAIG,CAAC;EACL,IAAIR,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACS,SAAS,IAAI,IAAI,EAAE;IAC1CD,CAAC,GAAGR,IAAI,CAACS,SAAS,GAAGX,UAAU;EACjC,CAAC,MAAM,IAAIE,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACU,SAAS,IAAI,IAAI,EAAE;IACjDF,CAAC,GAAGR,IAAI,CAACU,SAAS;EACpB,CAAC,MAAM;IACLF,CAAC,GAAG,CAAC;EACP;EAEA,IAAIG,CAAC;EACL,IAAIX,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACY,SAAS,IAAI,IAAI,EAAE;IAC1CD,CAAC,GAAGX,IAAI,CAACY,SAAS,GAAGb,WAAW;EAClC,CAAC,MAAM,IAAIC,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACa,SAAS,IAAI,IAAI,EAAE;IACjDF,CAAC,GAAGX,IAAI,CAACa,SAAS;EACpB,CAAC,MAAM;IACLF,CAAC,GAAG,CAAC;EACP;EAEAV,MAAM,CAACO,CAAC,GAAGA,CAAC;EACZP,MAAM,CAACU,CAAC,GAAGA,CAAC;EACZV,MAAM,CAACC,KAAK,GAAGA,KAAK;EACpBD,MAAM,CAACI,MAAM,GAAGA,MAAM;EAEtB,OAAOJ,MAAM;AACf;AAEAa,MAAM,CAACC,OAAO,GAAGlB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}