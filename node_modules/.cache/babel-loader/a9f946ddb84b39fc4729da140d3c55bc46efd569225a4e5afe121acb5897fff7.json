{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nmodule.exports = ['#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', '#else', 'precision mediump float', '#endif', 'uniform sampler2D uSampler;', 'uniform float uOpacity;', 'uniform float uTextureX;', 'uniform float uTextureY;', 'uniform float uTextureWidth;', 'uniform float uTextureHeight;', 'uniform vec4 uColorOffset;', 'uniform mat4 uColorMatrix;', 'varying vec4 vRay;', 'const float PI = 3.14159265358979323846264;', 'void main(void) {', '  float r = inversesqrt(vRay.x * vRay.x + vRay.y * vRay.y + vRay.z * vRay.z);', '  float phi  = acos(vRay.y * r);', '  float theta = atan(vRay.x, -1.0*vRay.z);', '  float s = 0.5 + 0.5 * theta / PI;', '  float t = 1.0 - phi / PI;', '  s = s * uTextureWidth + uTextureX;', '  t = t * uTextureHeight + uTextureY;', '  vec4 color = texture2D(uSampler, vec2(s, t)) * uColorMatrix + uColorOffset;', '  gl_FragColor = vec4(color.rgba * uOpacity);', '}'].join('\\n');","map":{"version":3,"names":["module","exports","join"],"sources":["E:/VR/node_modules/marzipano/src/shaders/fragmentEquirect.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nmodule.exports = [\n'#ifdef GL_FRAGMENT_PRECISION_HIGH',\n'precision highp float;',\n'#else',\n'precision mediump float',\n'#endif',\n\n'uniform sampler2D uSampler;',\n'uniform float uOpacity;',\n'uniform float uTextureX;',\n'uniform float uTextureY;',\n'uniform float uTextureWidth;',\n'uniform float uTextureHeight;',\n'uniform vec4 uColorOffset;',\n'uniform mat4 uColorMatrix;',\n\n'varying vec4 vRay;',\n\n'const float PI = 3.14159265358979323846264;',\n\n'void main(void) {',\n'  float r = inversesqrt(vRay.x * vRay.x + vRay.y * vRay.y + vRay.z * vRay.z);',\n'  float phi  = acos(vRay.y * r);',\n'  float theta = atan(vRay.x, -1.0*vRay.z);',\n'  float s = 0.5 + 0.5 * theta / PI;',\n'  float t = 1.0 - phi / PI;',\n\n'  s = s * uTextureWidth + uTextureX;',\n'  t = t * uTextureHeight + uTextureY;',\n\n'  vec4 color = texture2D(uSampler, vec2(s, t)) * uColorMatrix + uColorOffset;',\n'  gl_FragColor = vec4(color.rgba * uOpacity);',\n'}'\n].join('\\n');\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,CACjB,mCAAmC,EACnC,wBAAwB,EACxB,OAAO,EACP,yBAAyB,EACzB,QAAQ,EAER,6BAA6B,EAC7B,yBAAyB,EACzB,0BAA0B,EAC1B,0BAA0B,EAC1B,8BAA8B,EAC9B,+BAA+B,EAC/B,4BAA4B,EAC5B,4BAA4B,EAE5B,oBAAoB,EAEpB,6CAA6C,EAE7C,mBAAmB,EACnB,+EAA+E,EAC/E,kCAAkC,EAClC,4CAA4C,EAC5C,qCAAqC,EACrC,6BAA6B,EAE7B,sCAAsC,EACtC,uCAAuC,EAEvC,+EAA+E,EAC/E,+CAA+C,EAC/C,GAAG,CACF,CAACC,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}