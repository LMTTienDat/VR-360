{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar extend = require('./util/extend');\nvar clearOwnProperties = require('./util/clearOwnProperties');\n\n/**\n * Signals that the layer has been rendered.\n *\n * @param {boolean} stable Whether all tiles were successfully rendered without\n *     missing textures or resorting to fallbacks.\n * @event Layer#renderComplete\n */\n\n/**\n * @class Layer\n * @classdesc\n *\n * A Layer is a combination of {@link Source}, {@link Geometry}, {@link View}\n * and {@link TextureStore} that may be added into a {@link Stage} and rendered\n * with {@link Effects}.\n *\n * @param {Source} source\n * @param {Geometry} geometry\n * @param {View} view\n * @param {TextureStore} textureStore\n * @param {Object} opts\n * @param {Effects} opts.effects\n*/\nfunction Layer(source, geometry, view, textureStore, opts) {\n  opts = opts || {};\n  var self = this;\n  this._source = source;\n  this._geometry = geometry;\n  this._view = view;\n  this._textureStore = textureStore;\n  this._effects = opts.effects || {};\n  this._fixedLevelIndex = null;\n  this._viewChangeHandler = function () {\n    self.emit('viewChange', self.view());\n  };\n  this._view.addEventListener('change', this._viewChangeHandler);\n  this._textureStoreChangeHandler = function () {\n    self.emit('textureStoreChange', self.textureStore());\n  };\n  this._textureStore.addEventListener('textureLoad', this._textureStoreChangeHandler);\n  this._textureStore.addEventListener('textureError', this._textureStoreChangeHandler);\n  this._textureStore.addEventListener('textureInvalid', this._textureStoreChangeHandler);\n}\neventEmitter(Layer);\n\n/**\n * Destructor.\n */\nLayer.prototype.destroy = function () {\n  this._view.removeEventListener('change', this._viewChangeHandler);\n  this._textureStore.removeEventListener('textureLoad', this._textureStoreChangeHandler);\n  this._textureStore.removeEventListener('textureError', this._textureStoreChangeHandler);\n  this._textureStore.removeEventListener('textureInvalid', this._textureStoreChangeHandler);\n  clearOwnProperties(this);\n};\n\n/**\n * Returns the underlying {@link Source source}.\n * @return {Source}\n */\nLayer.prototype.source = function () {\n  return this._source;\n};\n\n/**\n * Returns the underlying {@link Geometry geometry}.\n * @return {Geometry}\n */\nLayer.prototype.geometry = function () {\n  return this._geometry;\n};\n\n/**\n * Returns the underlying {@link View view}.\n * @return {View}\n */\nLayer.prototype.view = function () {\n  return this._view;\n};\n\n/**\n * Returns the underlying {@link TextureStore texture store}.\n * @return {TextureStore}\n */\nLayer.prototype.textureStore = function () {\n  return this._textureStore;\n};\n\n/**\n * Returns the currently set {@link Effects effects}.\n * @return {Effects}\n */\nLayer.prototype.effects = function () {\n  return this._effects;\n};\n\n/**\n * Sets the {@link Effects effects}.\n * @param {Effects} effects\n */\nLayer.prototype.setEffects = function (effects) {\n  this._effects = effects;\n  this.emit('effectsChange', this._effects);\n};\n\n/**\n * Merges effects into the currently set ones. The merge is non-recursive; for\n * instance, if current effects are `{ rect: { relativeWidth: 0.5 } }`,\n * calling this method with `{ rect: { relativeX: 0.5 }}` will reset\n * `rect.relativeWidth`.\n *\n * @param {Effects} effects\n */\nLayer.prototype.mergeEffects = function (effects) {\n  extend(this._effects, effects);\n  this.emit('effectsChange', this._effects);\n};\n\n/**\n * Returns the fixed level index.\n * @return {(number|null)}\n */\nLayer.prototype.fixedLevel = function () {\n  return this._fixedLevelIndex;\n};\n\n/**\n * Sets the fixed level index. When set, the corresponding level will be\n * used regardless of the view parameters. Unset with a null argument.\n *\n * @param {(number|null)} levelIndex\n * @throws An error if the level index is out of range.\n */\nLayer.prototype.setFixedLevel = function (levelIndex) {\n  if (levelIndex !== this._fixedLevelIndex) {\n    if (levelIndex != null && (levelIndex >= this._geometry.levelList.length || levelIndex < 0)) {\n      throw new Error(\"Level index out of range: \" + levelIndex);\n    }\n    this._fixedLevelIndex = levelIndex;\n    this.emit('fixedLevelChange', this._fixedLevelIndex);\n  }\n};\nLayer.prototype._selectLevel = function () {\n  var level;\n  if (this._fixedLevelIndex != null) {\n    level = this._geometry.levelList[this._fixedLevelIndex];\n  } else {\n    level = this._view.selectLevel(this._geometry.selectableLevelList);\n  }\n  return level;\n};\nLayer.prototype.visibleTiles = function (result) {\n  var level = this._selectLevel();\n  return this._geometry.visibleTiles(this._view, level, result);\n};\n\n/**\n * Pin a whole level into the texture store.\n * @param {Number} levelIndex\n */\nLayer.prototype.pinLevel = function (levelIndex) {\n  var level = this._geometry.levelList[levelIndex];\n  var tiles = this._geometry.levelTiles(level);\n  for (var i = 0; i < tiles.length; i++) {\n    this._textureStore.pin(tiles[i]);\n  }\n};\n\n/**\n * Unpin a whole level from the texture store.\n * @param {Number} levelIndex\n */\nLayer.prototype.unpinLevel = function (levelIndex) {\n  var level = this._geometry.levelList[levelIndex];\n  var tiles = this._geometry.levelTiles(level);\n  for (var i = 0; i < tiles.length; i++) {\n    this._textureStore.unpin(tiles[i]);\n  }\n};\n\n/**\n * Pin the first level. Equivalent to `pinLevel(0)`.\n */\nLayer.prototype.pinFirstLevel = function () {\n  return this.pinLevel(0);\n};\n\n/**\n * Unpin the first level. Equivalent to `unpinLevel(0)`.\n */\nLayer.prototype.unpinFirstLevel = function () {\n  return this.unpinLevel(0);\n};\nmodule.exports = Layer;","map":{"version":3,"names":["eventEmitter","require","extend","clearOwnProperties","Layer","source","geometry","view","textureStore","opts","self","_source","_geometry","_view","_textureStore","_effects","effects","_fixedLevelIndex","_viewChangeHandler","emit","addEventListener","_textureStoreChangeHandler","prototype","destroy","removeEventListener","setEffects","mergeEffects","fixedLevel","setFixedLevel","levelIndex","levelList","length","Error","_selectLevel","level","selectLevel","selectableLevelList","visibleTiles","result","pinLevel","tiles","levelTiles","i","pin","unpinLevel","unpin","pinFirstLevel","unpinFirstLevel","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/Layer.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n\nvar eventEmitter = require('minimal-event-emitter');\nvar extend = require('./util/extend');\nvar clearOwnProperties = require('./util/clearOwnProperties');\n\n/**\n * Signals that the layer has been rendered.\n *\n * @param {boolean} stable Whether all tiles were successfully rendered without\n *     missing textures or resorting to fallbacks.\n * @event Layer#renderComplete\n */\n\n/**\n * @class Layer\n * @classdesc\n *\n * A Layer is a combination of {@link Source}, {@link Geometry}, {@link View}\n * and {@link TextureStore} that may be added into a {@link Stage} and rendered\n * with {@link Effects}.\n *\n * @param {Source} source\n * @param {Geometry} geometry\n * @param {View} view\n * @param {TextureStore} textureStore\n * @param {Object} opts\n * @param {Effects} opts.effects\n*/\nfunction Layer(source, geometry, view, textureStore, opts) {\n  opts = opts || {};\n\n  var self = this;\n\n  this._source = source;\n  this._geometry = geometry;\n  this._view = view;\n  this._textureStore = textureStore;\n\n  this._effects = opts.effects || {};\n\n  this._fixedLevelIndex = null;\n\n  this._viewChangeHandler = function() {\n    self.emit('viewChange', self.view());\n  };\n\n  this._view.addEventListener('change', this._viewChangeHandler);\n\n  this._textureStoreChangeHandler = function() {\n    self.emit('textureStoreChange', self.textureStore());\n  };\n\n  this._textureStore.addEventListener('textureLoad',\n    this._textureStoreChangeHandler);\n  this._textureStore.addEventListener('textureError',\n    this._textureStoreChangeHandler);\n  this._textureStore.addEventListener('textureInvalid',\n    this._textureStoreChangeHandler);\n}\n\neventEmitter(Layer);\n\n\n/**\n * Destructor.\n */\nLayer.prototype.destroy = function() {\n  this._view.removeEventListener('change', this._viewChangeHandler);\n  this._textureStore.removeEventListener('textureLoad',\n    this._textureStoreChangeHandler);\n  this._textureStore.removeEventListener('textureError',\n    this._textureStoreChangeHandler);\n  this._textureStore.removeEventListener('textureInvalid',\n    this._textureStoreChangeHandler);\n  clearOwnProperties(this);\n};\n\n\n/**\n * Returns the underlying {@link Source source}.\n * @return {Source}\n */\nLayer.prototype.source = function() {\n  return this._source;\n};\n\n\n/**\n * Returns the underlying {@link Geometry geometry}.\n * @return {Geometry}\n */\nLayer.prototype.geometry = function() {\n  return this._geometry;\n};\n\n\n/**\n * Returns the underlying {@link View view}.\n * @return {View}\n */\nLayer.prototype.view = function() {\n  return this._view;\n};\n\n\n/**\n * Returns the underlying {@link TextureStore texture store}.\n * @return {TextureStore}\n */\nLayer.prototype.textureStore = function() {\n  return this._textureStore;\n};\n\n\n/**\n * Returns the currently set {@link Effects effects}.\n * @return {Effects}\n */\nLayer.prototype.effects = function() {\n  return this._effects;\n};\n\n\n/**\n * Sets the {@link Effects effects}.\n * @param {Effects} effects\n */\nLayer.prototype.setEffects = function(effects) {\n  this._effects = effects;\n  this.emit('effectsChange', this._effects);\n};\n\n\n/**\n * Merges effects into the currently set ones. The merge is non-recursive; for\n * instance, if current effects are `{ rect: { relativeWidth: 0.5 } }`,\n * calling this method with `{ rect: { relativeX: 0.5 }}` will reset\n * `rect.relativeWidth`.\n *\n * @param {Effects} effects\n */\nLayer.prototype.mergeEffects = function(effects) {\n  extend(this._effects, effects);\n  this.emit('effectsChange', this._effects);\n};\n\n\n/**\n * Returns the fixed level index.\n * @return {(number|null)}\n */\nLayer.prototype.fixedLevel = function() {\n  return this._fixedLevelIndex;\n};\n\n\n/**\n * Sets the fixed level index. When set, the corresponding level will be\n * used regardless of the view parameters. Unset with a null argument.\n *\n * @param {(number|null)} levelIndex\n * @throws An error if the level index is out of range.\n */\nLayer.prototype.setFixedLevel = function(levelIndex) {\n  if (levelIndex !== this._fixedLevelIndex) {\n    if (levelIndex != null && (levelIndex >= this._geometry.levelList.length ||\n        levelIndex < 0)) {\n      throw new Error(\"Level index out of range: \" + levelIndex);\n    }\n    this._fixedLevelIndex = levelIndex;\n    this.emit('fixedLevelChange', this._fixedLevelIndex);\n  }\n};\n\n\nLayer.prototype._selectLevel = function() {\n  var level;\n  if (this._fixedLevelIndex != null) {\n    level = this._geometry.levelList[this._fixedLevelIndex];\n  } else {\n    level = this._view.selectLevel(this._geometry.selectableLevelList);\n  }\n  return level;\n};\n\n\nLayer.prototype.visibleTiles = function(result) {\n  var level = this._selectLevel();\n  return this._geometry.visibleTiles(this._view, level, result);\n};\n\n\n/**\n * Pin a whole level into the texture store.\n * @param {Number} levelIndex\n */\nLayer.prototype.pinLevel = function(levelIndex) {\n  var level = this._geometry.levelList[levelIndex];\n  var tiles = this._geometry.levelTiles(level);\n  for (var i = 0; i < tiles.length; i++) {\n    this._textureStore.pin(tiles[i]);\n  }\n};\n\n\n/**\n * Unpin a whole level from the texture store.\n * @param {Number} levelIndex\n */\nLayer.prototype.unpinLevel = function(levelIndex) {\n  var level = this._geometry.levelList[levelIndex];\n  var tiles = this._geometry.levelTiles(level);\n  for (var i = 0; i < tiles.length; i++) {\n    this._textureStore.unpin(tiles[i]);\n  }\n};\n\n\n/**\n * Pin the first level. Equivalent to `pinLevel(0)`.\n */\nLayer.prototype.pinFirstLevel = function() {\n  return this.pinLevel(0);\n};\n\n\n/**\n * Unpin the first level. Equivalent to `unpinLevel(0)`.\n */\nLayer.prototype.unpinFirstLevel = function() {\n  return this.unpinLevel(0);\n};\n\n\nmodule.exports = Layer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}