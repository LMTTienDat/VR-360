{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Set = require('./collections/Set');\n\n/**\n * @class TileSearcher\n * @classdesc\n *\n * A TileSearcher performs searches for visible tiles.\n */\nfunction TileSearcher() {\n  // Stack of tiles to be explored.\n  this._stack = [];\n\n  // Set of already explored tiles.\n  this._visited = new Set();\n\n  // Tile vertices. Allocated by Tile#vertices on first use.\n  this._vertices = null;\n}\n\n/**\n * Performs a search for visible tiles by starting at a given tile and\n * recursively exploring neighbors until no more visible tiles are found.\n *\n * @param {View} view The view used to deem whether a tile is visible.\n * @param {Tile} tile The starting tile.\n * @param {Tile[]} result An array to append the visible tiles to, including the\n *     starting tile when visible. Existing array members are preserved.\n * @return {number} The number of visible tiles found.\n */\nTileSearcher.prototype.search = function (view, startingTile, result) {\n  var stack = this._stack;\n  var visited = this._visited;\n  var vertices = this._vertices;\n  var count = 0;\n\n  // Clear internal state.\n  this._clear();\n  stack.push(startingTile);\n  while (stack.length > 0) {\n    var tile = stack.pop();\n    if (visited.has(tile)) {\n      // Skip already visited tile.\n      continue;\n    }\n    if (!view.intersects(tile.vertices(vertices))) {\n      // Skip non-visible tile.\n      continue;\n    }\n\n    // Mark tile as visited.\n    visited.add(tile);\n\n    // Add neighbors to the stack of tiles to explore.\n    var neighbors = tile.neighbors();\n    for (var i = 0; i < neighbors.length; i++) {\n      stack.push(neighbors[i]);\n    }\n\n    // Add to result.\n    result.push(tile);\n    count++;\n  }\n\n  // Reuse the vertices array in future searches.\n  this._vertices = vertices;\n\n  // Clear internal state.\n  this._clear();\n  return count;\n};\nTileSearcher.prototype._clear = function () {\n  this._stack.length = 0;\n  this._visited.clear();\n};\nmodule.exports = TileSearcher;","map":{"version":3,"names":["Set","require","TileSearcher","_stack","_visited","_vertices","prototype","search","view","startingTile","result","stack","visited","vertices","count","_clear","push","length","tile","pop","has","intersects","add","neighbors","i","clear","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/TileSearcher.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Set = require('./collections/Set');\n\n/**\n * @class TileSearcher\n * @classdesc\n *\n * A TileSearcher performs searches for visible tiles.\n */\nfunction TileSearcher() {\n  // Stack of tiles to be explored.\n  this._stack = [];\n\n  // Set of already explored tiles.\n  this._visited = new Set();\n\n  // Tile vertices. Allocated by Tile#vertices on first use.\n  this._vertices = null;\n}\n\n/**\n * Performs a search for visible tiles by starting at a given tile and\n * recursively exploring neighbors until no more visible tiles are found.\n *\n * @param {View} view The view used to deem whether a tile is visible.\n * @param {Tile} tile The starting tile.\n * @param {Tile[]} result An array to append the visible tiles to, including the\n *     starting tile when visible. Existing array members are preserved.\n * @return {number} The number of visible tiles found.\n */\nTileSearcher.prototype.search = function(view, startingTile, result) {\n  var stack = this._stack;\n  var visited = this._visited;\n  var vertices = this._vertices;\n\n  var count = 0;\n\n  // Clear internal state.\n  this._clear();\n\n  stack.push(startingTile);\n\n  while (stack.length > 0) {\n    var tile = stack.pop();\n\n    if (visited.has(tile)) {\n      // Skip already visited tile.\n      continue;\n    }\n\n    if (!view.intersects(tile.vertices(vertices))) {\n      // Skip non-visible tile.\n      continue;\n    }\n\n    // Mark tile as visited.\n    visited.add(tile);\n\n    // Add neighbors to the stack of tiles to explore.\n    var neighbors = tile.neighbors();\n    for (var i = 0; i < neighbors.length; i++) {\n      stack.push(neighbors[i]);\n    }\n\n    // Add to result.\n    result.push(tile);\n\n    count++;\n  }\n\n  // Reuse the vertices array in future searches.\n  this._vertices = vertices;\n\n  // Clear internal state.\n  this._clear();\n\n  return count;\n};\n\nTileSearcher.prototype._clear = function() {\n  this._stack.length = 0;\n  this._visited.clear();\n};\n\nmodule.exports = TileSearcher;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB;EACA,IAAI,CAACC,MAAM,GAAG,EAAE;;EAEhB;EACA,IAAI,CAACC,QAAQ,GAAG,IAAIJ,GAAG,CAAC,CAAC;;EAEzB;EACA,IAAI,CAACK,SAAS,GAAG,IAAI;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,YAAY,CAACI,SAAS,CAACC,MAAM,GAAG,UAASC,IAAI,EAAEC,YAAY,EAAEC,MAAM,EAAE;EACnE,IAAIC,KAAK,GAAG,IAAI,CAACR,MAAM;EACvB,IAAIS,OAAO,GAAG,IAAI,CAACR,QAAQ;EAC3B,IAAIS,QAAQ,GAAG,IAAI,CAACR,SAAS;EAE7B,IAAIS,KAAK,GAAG,CAAC;;EAEb;EACA,IAAI,CAACC,MAAM,CAAC,CAAC;EAEbJ,KAAK,CAACK,IAAI,CAACP,YAAY,CAAC;EAExB,OAAOE,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;IACvB,IAAIC,IAAI,GAAGP,KAAK,CAACQ,GAAG,CAAC,CAAC;IAEtB,IAAIP,OAAO,CAACQ,GAAG,CAACF,IAAI,CAAC,EAAE;MACrB;MACA;IACF;IAEA,IAAI,CAACV,IAAI,CAACa,UAAU,CAACH,IAAI,CAACL,QAAQ,CAACA,QAAQ,CAAC,CAAC,EAAE;MAC7C;MACA;IACF;;IAEA;IACAD,OAAO,CAACU,GAAG,CAACJ,IAAI,CAAC;;IAEjB;IACA,IAAIK,SAAS,GAAGL,IAAI,CAACK,SAAS,CAAC,CAAC;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACN,MAAM,EAAEO,CAAC,EAAE,EAAE;MACzCb,KAAK,CAACK,IAAI,CAACO,SAAS,CAACC,CAAC,CAAC,CAAC;IAC1B;;IAEA;IACAd,MAAM,CAACM,IAAI,CAACE,IAAI,CAAC;IAEjBJ,KAAK,EAAE;EACT;;EAEA;EACA,IAAI,CAACT,SAAS,GAAGQ,QAAQ;;EAEzB;EACA,IAAI,CAACE,MAAM,CAAC,CAAC;EAEb,OAAOD,KAAK;AACd,CAAC;AAEDZ,YAAY,CAACI,SAAS,CAACS,MAAM,GAAG,YAAW;EACzC,IAAI,CAACZ,MAAM,CAACc,MAAM,GAAG,CAAC;EACtB,IAAI,CAACb,QAAQ,CAACqB,KAAK,CAAC,CAAC;AACvB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGzB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}