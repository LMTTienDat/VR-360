{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar once = require('./once');\n\n// A cancelable function is an asynchronous function (i.e., one whose last\n// argument is a callback receiving an error plus zero or more return values)\n// that (synchronously) returns a cancel() function. Calling cancel() should\n// abort the asynchronous operation and call the callback with the arguments\n// that were passed into cancel(). Calling cancel() twice, as with callbacks,\n// is not guaranteed to be safe.\n\n// Wrap a non-cancellable asynchronous function into a cancelable one.\n//\n// Calling cancel() on the returned function will not interrupt the execution\n// of the original function; it will merely ignore its return value.\n//\n// Usually, instead of wrapping your function, you want to implement cancel()\n// yourself in order to have some abort logic. This utility function provides a\n// straighforward solution for cases in which no custom abort logic is required.\nfunction cancelize(fn) {\n  return function cancelized() {\n    if (!arguments.length) {\n      throw new Error('cancelized: expected at least one argument');\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var done = args[args.length - 1] = once(args[args.length - 1]);\n    function cancel() {\n      done.apply(null, arguments);\n    }\n    fn.apply(null, args);\n    return cancel;\n  };\n}\nmodule.exports = cancelize;","map":{"version":3,"names":["once","require","cancelize","fn","cancelized","arguments","length","Error","args","Array","prototype","slice","call","done","cancel","apply","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/util/cancelize.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar once = require('./once');\n\n// A cancelable function is an asynchronous function (i.e., one whose last\n// argument is a callback receiving an error plus zero or more return values)\n// that (synchronously) returns a cancel() function. Calling cancel() should\n// abort the asynchronous operation and call the callback with the arguments\n// that were passed into cancel(). Calling cancel() twice, as with callbacks,\n// is not guaranteed to be safe.\n\n// Wrap a non-cancellable asynchronous function into a cancelable one.\n//\n// Calling cancel() on the returned function will not interrupt the execution\n// of the original function; it will merely ignore its return value.\n//\n// Usually, instead of wrapping your function, you want to implement cancel()\n// yourself in order to have some abort logic. This utility function provides a\n// straighforward solution for cases in which no custom abort logic is required.\nfunction cancelize(fn) {\n  return function cancelized() {\n    if (!arguments.length) {\n      throw new Error('cancelized: expected at least one argument');\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var done = args[args.length - 1] = once(args[args.length - 1]);\n\n    function cancel() {\n      done.apply(null, arguments);\n    }\n\n    fn.apply(null, args);\n\n    return cancel;\n  };\n}\n\nmodule.exports = cancelize;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,EAAE,EAAE;EACrB,OAAO,SAASC,UAAUA,CAAA,EAAG;IAC3B,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACA,IAAIC,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACP,SAAS,EAAE,CAAC,CAAC;IACnD,IAAIQ,IAAI,GAAGL,IAAI,CAACA,IAAI,CAACF,MAAM,GAAG,CAAC,CAAC,GAAGN,IAAI,CAACQ,IAAI,CAACA,IAAI,CAACF,MAAM,GAAG,CAAC,CAAC,CAAC;IAE9D,SAASQ,MAAMA,CAAA,EAAG;MAChBD,IAAI,CAACE,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;IAC7B;IAEAF,EAAE,CAACY,KAAK,CAAC,IAAI,EAAEP,IAAI,CAAC;IAEpB,OAAOM,MAAM;EACf,CAAC;AACH;AAEAE,MAAM,CAACC,OAAO,GAAGf,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}