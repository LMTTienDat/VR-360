{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * Convert fov\n *\n * For example, to convert from hfov to vfov one would call \n * `convert(hfov, width, height)`\n *\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction convert(fov, fromDimension, toDimension) {\n  return 2 * Math.atan(toDimension * Math.tan(fov / 2) / fromDimension);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction htov(fov, width, height) {\n  return convert(fov, width, height);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction htod(fov, width, height) {\n  return convert(fov, width, Math.sqrt(width * width + height * height));\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction vtoh(fov, width, height) {\n  return convert(fov, height, width);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction vtod(fov, width, height) {\n  return convert(fov, height, Math.sqrt(width * width + height * height));\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction dtoh(fov, width, height) {\n  return convert(fov, Math.sqrt(width * width + height * height), width);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction dtov(fov, width, height) {\n  return convert(fov, Math.sqrt(width * width + height * height), height);\n}\n\n/**\n * @namespace util.convertFov\n */\nmodule.exports = {\n  convert: convert,\n  htov: htov,\n  htod: htod,\n  vtoh: vtoh,\n  vtod: vtod,\n  dtoh: dtoh,\n  dtov: dtov\n};","map":{"version":3,"names":["convert","fov","fromDimension","toDimension","Math","atan","tan","htov","width","height","htod","sqrt","vtoh","vtod","dtoh","dtov","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/util/convertFov.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * Convert fov\n *\n * For example, to convert from hfov to vfov one would call \n * `convert(hfov, width, height)`\n *\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction convert(fov, fromDimension, toDimension) {\n  return 2 * Math.atan(toDimension * Math.tan(fov / 2) / fromDimension);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction htov(fov, width, height) {\n  return convert(fov, width, height);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction htod(fov, width, height) {\n  return convert(fov, width, Math.sqrt(width * width + height * height));\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction vtoh(fov, width, height) {\n  return convert(fov, height, width);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction vtod(fov, width, height) {\n  return convert(fov, height, Math.sqrt(width * width + height * height));\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction dtoh(fov, width, height) {\n  return convert(fov, Math.sqrt(width * width + height * height), width);\n}\n\n/**\n * @param {number} fov\n * @param {number} fromDimension\n * @param {number} toDimension\n * @return {number}\n * @memberof util.convertFov\n */\nfunction dtov(fov, width, height) {\n  return convert(fov, Math.sqrt(width * width + height * height), height);\n}\n\n/**\n * @namespace util.convertFov\n */\nmodule.exports = {\n  convert: convert,\n  htov: htov,\n  htod: htod,\n  vtoh: vtoh,\n  vtod: vtod,\n  dtoh: dtoh,\n  dtov: dtov\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,GAAG,EAAEC,aAAa,EAAEC,WAAW,EAAE;EAChD,OAAO,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACF,WAAW,GAAGC,IAAI,CAACE,GAAG,CAACL,GAAG,GAAG,CAAC,CAAC,GAAGC,aAAa,CAAC;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,IAAIA,CAACN,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEO,KAAK,EAAEC,MAAM,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACT,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEO,KAAK,EAAEJ,IAAI,CAACO,IAAI,CAACH,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC,CAAC;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,IAAIA,CAACX,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEQ,MAAM,EAAED,KAAK,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,IAAIA,CAACZ,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEQ,MAAM,EAAEL,IAAI,CAACO,IAAI,CAACH,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC,CAAC;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,IAAIA,CAACb,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEG,IAAI,CAACO,IAAI,CAACH,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC,EAAED,KAAK,CAAC;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,IAAIA,CAACd,GAAG,EAAEO,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOT,OAAO,CAACC,GAAG,EAAEG,IAAI,CAACO,IAAI,CAACH,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC,EAAEA,MAAM,CAAC;AACzE;;AAEA;AACA;AACA;AACAO,MAAM,CAACC,OAAO,GAAG;EACfjB,OAAO,EAAEA,OAAO;EAChBO,IAAI,EAAEA,IAAI;EACVG,IAAI,EAAEA,IAAI;EACVE,IAAI,EAAEA,IAAI;EACVC,IAAI,EAAEA,IAAI;EACVC,IAAI,EAAEA,IAAI;EACVC,IAAI,EAAEA;AACR,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}