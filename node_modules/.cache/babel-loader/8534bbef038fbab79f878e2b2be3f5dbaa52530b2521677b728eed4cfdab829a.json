{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar defaults = require('./util/defaults');\nvar now = require('./util/now');\nvar defaultOptions = {\n  duration: Infinity\n};\n\n/**\n * Signals a timeout.\n * @event Timer#timeout\n */\n\n/**\n * @class Timer\n * @classdesc\n *\n * A Timer provides a mechanism to receive an event after a timeout.\n *\n * A timer has a set duration, and is either started or stopped at a given time.\n * The timer is initially stopped. When the timer is started, a timeout event is\n * scheduled to fire once the set duration elapses. When the timer is stopped,\n * the scheduled timeout event is cancelled. When a timeout event fires, the\n * timer returns to the stopped state.\n *\n * @param {number} [opts.duration=Infinity] Timeout in milliseconds.\n */\nfunction Timer(opts) {\n  opts = defaults(opts || {}, defaultOptions);\n  this._duration = opts.duration;\n  this._startTime = null;\n  this._handle = null;\n  this._check = this._check.bind(this);\n}\neventEmitter(Timer);\n\n/**\n * Starts the timer. If the timer is already started, this has the effect of\n * stopping and starting again (i.e. resetting the timer).\n */\nTimer.prototype.start = function () {\n  this._startTime = now();\n  if (this._handle == null && this._duration < Infinity) {\n    this._setup(this._duration);\n  }\n};\n\n/**\n * Returns whether the timer is in the started state.\n * @return {boolean}\n */\nTimer.prototype.started = function () {\n  return this._startTime != null;\n};\n\n/**\n * Stops the timer.\n */\nTimer.prototype.stop = function () {\n  this._startTime = null;\n  if (this._handle != null) {\n    clearTimeout(this._handle);\n    this._handle = null;\n  }\n};\nTimer.prototype._setup = function (interval) {\n  this._handle = setTimeout(this._check, interval);\n};\nTimer.prototype._teardown = function () {\n  clearTimeout(this._handle);\n  this._handle = null;\n};\nTimer.prototype._check = function () {\n  var currentTime = now();\n  var elapsed = currentTime - this._startTime;\n  var remaining = this._duration - elapsed;\n  this._teardown();\n  if (remaining <= 0) {\n    this.emit('timeout');\n    this._startTime = null;\n  } else if (remaining < Infinity) {\n    this._setup(remaining);\n  }\n};\n\n/**\n * Returns the currently set duration.\n */\nTimer.prototype.duration = function () {\n  return this._duration;\n};\n\n/**\n * Sets the duration. If the timer is already started, the timeout event is\n * rescheduled to occur once the new duration has elapsed since the last call\n * to start. In particular, if an amount of time larger than the new duration\n * has already elapsed, the timeout event fires immediately.\n * @param {number}\n */\nTimer.prototype.setDuration = function (duration) {\n  this._duration = duration;\n  if (this._startTime != null) {\n    this._check();\n  }\n};\nmodule.exports = Timer;","map":{"version":3,"names":["eventEmitter","require","defaults","now","defaultOptions","duration","Infinity","Timer","opts","_duration","_startTime","_handle","_check","bind","prototype","start","_setup","started","stop","clearTimeout","interval","setTimeout","_teardown","currentTime","elapsed","remaining","emit","setDuration","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/Timer.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar defaults = require('./util/defaults');\nvar now = require('./util/now');\n\nvar defaultOptions = {\n  duration: Infinity\n};\n\n\n/**\n * Signals a timeout.\n * @event Timer#timeout\n */\n\n\n/**\n * @class Timer\n * @classdesc\n *\n * A Timer provides a mechanism to receive an event after a timeout.\n *\n * A timer has a set duration, and is either started or stopped at a given time.\n * The timer is initially stopped. When the timer is started, a timeout event is\n * scheduled to fire once the set duration elapses. When the timer is stopped,\n * the scheduled timeout event is cancelled. When a timeout event fires, the\n * timer returns to the stopped state.\n *\n * @param {number} [opts.duration=Infinity] Timeout in milliseconds.\n */\nfunction Timer(opts) {\n\n  opts = defaults(opts || {}, defaultOptions);\n\n  this._duration = opts.duration;\n\n  this._startTime = null;\n\n  this._handle = null;\n\n  this._check = this._check.bind(this);\n\n}\n\neventEmitter(Timer);\n\n\n/**\n * Starts the timer. If the timer is already started, this has the effect of\n * stopping and starting again (i.e. resetting the timer).\n */\nTimer.prototype.start = function() {\n  this._startTime = now();\n  if (this._handle == null && this._duration < Infinity) {\n    this._setup(this._duration);\n  }\n};\n\n\n/**\n * Returns whether the timer is in the started state.\n * @return {boolean}\n */\nTimer.prototype.started = function() {\n  return this._startTime != null;\n};\n\n\n/**\n * Stops the timer.\n */\nTimer.prototype.stop = function() {\n  this._startTime = null;\n  if (this._handle != null) {\n    clearTimeout(this._handle);\n    this._handle = null;\n  }\n};\n\n\nTimer.prototype._setup = function(interval) {\n  this._handle = setTimeout(this._check, interval);\n};\n\n\nTimer.prototype._teardown = function() {\n  clearTimeout(this._handle);\n  this._handle = null;\n};\n\n\nTimer.prototype._check = function() {\n  var currentTime = now();\n  var elapsed = currentTime - this._startTime;\n  var remaining = this._duration - elapsed;\n\n  this._teardown();\n\n  if (remaining <= 0) {\n    this.emit('timeout');\n    this._startTime = null;\n  } else if (remaining < Infinity) {\n    this._setup(remaining);\n  }\n};\n\n\n/**\n * Returns the currently set duration.\n */\nTimer.prototype.duration = function() {\n  return this._duration;\n};\n\n\n/**\n * Sets the duration. If the timer is already started, the timeout event is\n * rescheduled to occur once the new duration has elapsed since the last call\n * to start. In particular, if an amount of time larger than the new duration\n * has already elapsed, the timeout event fires immediately.\n * @param {number}\n */\nTimer.prototype.setDuration = function(duration) {\n  this._duration = duration;\n  if (this._startTime != null) {\n    this._check();\n  }\n};\n\n\nmodule.exports = Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}