{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar mod = require('../util/mod');\n\n// An LruSet holds up to a maximum number of elements, ordered by their time of\n// insertion. When the addition of an element would cause the capacity to be\n// exceeded, the oldest element in the set is evicted. As a special case, an\n// LruSet with zero capacity always rejects the insertion of an element.\n//\n// Elements must implement hash() and equals(). Note that the implementation\n// doesn't currently use hash(), but a future version might.\nfunction LruSet(capacity) {\n  if (!isFinite(capacity) || Math.floor(capacity) !== capacity || capacity < 0) {\n    throw new Error('LruSet: invalid capacity');\n  }\n  this._capacity = capacity;\n\n  // Elements are stored in a circular array ordered by decreasing age.\n  // Start is the index of the oldest element and size is the number of valid\n  // elements; the region containing valid elements may wrap around.\n  this._elements = new Array(this._capacity);\n  this._start = 0;\n  this._size = 0;\n}\nLruSet.prototype._index = function (i) {\n  return mod(this._start + i, this._capacity);\n};\n\n// Adds an element into the set, possibly replacing an equal element already in\n// the set. The element becomes the newest. If the set is at capacity, the\n// oldest element is removed. Returns the removed element if it does not equal\n// the inserted element, or null otherwise. If the capacity is zero, does\n// nothing and returns the element.\nLruSet.prototype.add = function (element) {\n  if (this._capacity === 0) {\n    return element;\n  }\n  this.remove(element);\n  var evictedElement = this._size === this._capacity ? this._elements[this._index(0)] : null;\n  this._elements[this._index(this._size)] = element;\n  if (this._size < this._capacity) {\n    this._size++;\n  } else {\n    this._start = this._index(1);\n  }\n  return evictedElement;\n};\n\n// Removes an element from the set.\n// Returns the removed element, or null if the element was not found.\nLruSet.prototype.remove = function (element) {\n  for (var i = 0; i < this._size; i++) {\n    var existingElement = this._elements[this._index(i)];\n    if (element.equals(existingElement)) {\n      for (var j = i; j < this._size - 1; j++) {\n        this._elements[this._index(j)] = this._elements[this._index(j + 1)];\n      }\n      this._size--;\n      return existingElement;\n    }\n  }\n  return null;\n};\n\n// Returns whether an element is in the set.\nLruSet.prototype.has = function (element) {\n  for (var i = 0; i < this._size; i++) {\n    if (element.equals(this._elements[this._index(i)])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Returns the number of elements in the set.\nLruSet.prototype.size = function () {\n  return this._size;\n};\n\n// Removes all elements from the set.\nLruSet.prototype.clear = function () {\n  this._elements.length = 0;\n  this._start = 0;\n  this._size = 0;\n};\n\n// Calls fn(element) for each element in the set, in an unspecified order.\n// Returns the number of times fn was called.\n// The result is unspecified if the set is mutated during iteration.\nLruSet.prototype.forEach = function (fn) {\n  var count = 0;\n  for (var i = 0; i < this._size; i++) {\n    fn(this._elements[this._index(i)]);\n    count += 1;\n  }\n  return count;\n};\nmodule.exports = LruSet;","map":{"version":3,"names":["mod","require","LruSet","capacity","isFinite","Math","floor","Error","_capacity","_elements","Array","_start","_size","prototype","_index","i","add","element","remove","evictedElement","existingElement","equals","j","has","size","clear","length","forEach","fn","count","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/collections/LruSet.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar mod = require('../util/mod');\n\n// An LruSet holds up to a maximum number of elements, ordered by their time of\n// insertion. When the addition of an element would cause the capacity to be\n// exceeded, the oldest element in the set is evicted. As a special case, an\n// LruSet with zero capacity always rejects the insertion of an element.\n//\n// Elements must implement hash() and equals(). Note that the implementation\n// doesn't currently use hash(), but a future version might.\nfunction LruSet(capacity) {\n  if (!isFinite(capacity) || Math.floor(capacity) !== capacity || capacity < 0) {\n    throw new Error('LruSet: invalid capacity');\n  }\n  this._capacity = capacity;\n\n  // Elements are stored in a circular array ordered by decreasing age.\n  // Start is the index of the oldest element and size is the number of valid\n  // elements; the region containing valid elements may wrap around.\n  this._elements = new Array(this._capacity);\n  this._start = 0;\n  this._size = 0;\n}\n\nLruSet.prototype._index = function(i) {\n  return mod(this._start + i, this._capacity);\n};\n\n// Adds an element into the set, possibly replacing an equal element already in\n// the set. The element becomes the newest. If the set is at capacity, the\n// oldest element is removed. Returns the removed element if it does not equal\n// the inserted element, or null otherwise. If the capacity is zero, does\n// nothing and returns the element.\nLruSet.prototype.add = function(element) {\n  if (this._capacity === 0) {\n    return element;\n  }\n  this.remove(element);\n  var evictedElement =\n      this._size === this._capacity ? this._elements[this._index(0)] : null;\n  this._elements[this._index(this._size)] = element;\n  if (this._size < this._capacity) {\n    this._size++;\n  } else {\n    this._start = this._index(1);\n  }\n  return evictedElement;\n};\n\n// Removes an element from the set.\n// Returns the removed element, or null if the element was not found.\nLruSet.prototype.remove = function(element) {\n  for (var i = 0; i < this._size; i++) {\n    var existingElement = this._elements[this._index(i)];\n    if (element.equals(existingElement)) {\n      for (var j = i; j < this._size - 1; j++) {\n        this._elements[this._index(j)] = this._elements[this._index(j + 1)];\n      }\n      this._size--;\n      return existingElement;\n    }\n  }\n  return null;\n};\n\n// Returns whether an element is in the set.\nLruSet.prototype.has = function(element) {\n  for (var i = 0; i < this._size; i++) {\n    if (element.equals(this._elements[this._index(i)])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Returns the number of elements in the set.\nLruSet.prototype.size = function() {\n  return this._size;\n};\n\n// Removes all elements from the set.\nLruSet.prototype.clear = function() {\n  this._elements.length = 0;\n  this._start = 0;\n  this._size = 0;\n};\n\n// Calls fn(element) for each element in the set, in an unspecified order.\n// Returns the number of times fn was called.\n// The result is unspecified if the set is mutated during iteration.\nLruSet.prototype.forEach = function(fn) {\n  var count = 0;\n  for (var i = 0; i < this._size; i++) {\n    fn(this._elements[this._index(i)]);\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = LruSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}