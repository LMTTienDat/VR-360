{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Stage = require('./Stage');\nvar HtmlImageLoader = require('../loaders/HtmlImage');\nvar browser = require('bowser');\nvar inherits = require('../util/inherits');\nvar pixelRatio = require('../util/pixelRatio');\nvar ispot = require('../util/ispot');\nvar setAbsolute = require('../util/dom').setAbsolute;\nvar setFullSize = require('../util/dom').setFullSize;\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// TODO(tjgq): Unify Stage and WebGlStage.\n\n// Browser-specific workarounds.\nvar browserQuirks = {\n  // Whether to use texImage2D instead of texSubImage2D when repainting an\n  // existing texture from a video element. On most browsers texSubImage2D is\n  // faster, but on Chrome the performance degrades significantly. See:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=612542\n  videoUseTexImage2D: browser.chrome\n};\nfunction initWebGlContext(canvas, opts) {\n  var options = {\n    alpha: true,\n    premultipliedAlpha: true,\n    antialias: !!(opts && opts.antialias),\n    preserveDrawingBuffer: !!(opts && opts.preserveDrawingBuffer)\n  };\n  var gl = canvas.getContext && (canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options));\n  if (!gl) {\n    throw new Error('Could not get WebGL context');\n  }\n  if (opts.wrapContext) {\n    gl = opts.wrapContext(gl);\n  }\n  return gl;\n}\n\n/**\n * @class WebGlStage\n * @extends Stage\n * @classdesc\n *\n * A {@link Stage} implementation using WebGl.\n *\n * @param {Object} opts\n * @param {boolean} [opts.antialias=false]\n * @param {boolean} [opts.preserveDrawingBuffer=false]\n * @param {boolean} [opts.generateMipmaps=false]\n * @param {function} [opts.wrapContext]\n *\n * The `antialias` and `preserveDrawingBuffer` options control the WebGL\n * context attributes of the same name. The `alpha` and `premultipliedAlpha`\n * WebGL context attributes are set to their default true value and cannot\n * be overriden; this allows semitransparent textures to be composited with\n * the page. See:\n * https://www.khronos.org/registry/webgl/specs/1.0/#WEBGLCONTEXTATTRIBUTES\n *\n * The `generateMipmaps` option controls texture mipmap generation. Mipmaps\n * may improve rendering quality, at the cost of increased memory usage.\n * Due to technical limitations, they are only generated for textures whose\n * dimensions are a power of two. See:\n * https://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support\n *\n * The `wrapContext` option is a function that receives and returns a\n * WebGLRenderingContext. The stage will use its return value as the context.\n * This is useful when used together with WebGLDebugUtils to debug WebGL issues.\n * See https://www.khronos.org/webgl/wiki/Debugging.\n *\n * Also see the available {@link Stage} options.\n */\nfunction WebGlStage(opts) {\n  opts = opts || {};\n  var self = this;\n  this.constructor.super_.call(this, opts);\n  this._generateMipmaps = opts.generateMipmaps != null ? opts.generateMipmaps : false;\n  this._loader = new HtmlImageLoader(this);\n  this._domElement = document.createElement('canvas');\n  setAbsolute(this._domElement);\n  setFullSize(this._domElement);\n  this._gl = initWebGlContext(this._domElement, opts);\n  this._handleContextLoss = function () {\n    self.emit('webglcontextlost');\n    self._gl = null;\n  };\n\n  // Handle WebGl context loss.\n  this._domElement.addEventListener('webglcontextlost', this._handleContextLoss);\n\n  // WebGl renderers are singletons for a given stage. This list stores the\n  // existing renderers so they can be reused across layers with the same\n  // geometry and view type.\n  this._rendererInstances = [];\n}\ninherits(WebGlStage, Stage);\n\n/**\n * Destructor.\n */\nWebGlStage.prototype.destroy = function () {\n  this._domElement.removeEventListener('webglcontextlost', this._handleContextLoss);\n  // Delegate clearing own properties to the Stage destructor.\n  this.constructor.super_.prototype.destroy.call(this);\n};\n\n/**\n * Returns the underlying DOM element.\n *\n * @return {Element}\n */\nWebGlStage.prototype.domElement = function () {\n  return this._domElement;\n};\n\n/**\n * Returns the underlying WebGL rendering context.\n *\n * @return {WebGLRenderingContext }\n */\nWebGlStage.prototype.webGlContext = function () {\n  return this._gl;\n};\nWebGlStage.prototype.setSizeForType = function () {\n  // Update the size of the canvas coordinate space.\n  //\n  // The size is obtained by taking the stage dimensions, which are set in CSS\n  // pixels, and multiplying them by the device pixel ratio. Crucially, this\n  // must be the only place where the WebGL rendering pipeline accesses the\n  // pixel ratio; subsequent uses should reference the `drawingBufferWidth` and\n  // `drawingBufferHeight` properties on the WebGLRenderingContext. Failing to\n  // do so will break the rendering if the pixel ratio changes but the stage\n  // size does not, e.g. when moving the window across screens.\n  var ratio = pixelRatio();\n  this._domElement.width = ratio * this._width;\n  this._domElement.height = ratio * this._height;\n};\nWebGlStage.prototype.loadImage = function (url, rect, done) {\n  return this._loader.loadImage(url, rect, done);\n};\nWebGlStage.prototype.maxTextureSize = function () {\n  return this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n};\nWebGlStage.prototype.validateLayer = function (layer) {\n  var tileSize = layer.geometry().maxTileSize();\n  var maxTextureSize = this.maxTextureSize();\n  if (tileSize > maxTextureSize) {\n    throw new Error('Layer has level with tile size larger than maximum texture size (' + tileSize + ' vs. ' + maxTextureSize + ')');\n  }\n};\nWebGlStage.prototype.createRenderer = function (Renderer) {\n  var rendererInstances = this._rendererInstances;\n  for (var i = 0; i < rendererInstances.length; i++) {\n    if (rendererInstances[i] instanceof Renderer) {\n      return rendererInstances[i];\n    }\n  }\n  var renderer = new Renderer(this._gl);\n  rendererInstances.push(renderer);\n  return renderer;\n};\nWebGlStage.prototype.destroyRenderer = function (renderer) {\n  var rendererInstances = this._rendererInstances;\n  if (this._renderers.indexOf(renderer) < 0) {\n    renderer.destroy();\n    var index = rendererInstances.indexOf(renderer);\n    if (index >= 0) {\n      rendererInstances.splice(index, 1);\n    }\n  }\n};\nWebGlStage.prototype.startFrame = function () {\n  var gl = this._gl;\n  if (!gl) {\n    throw new Error('Bad WebGL context - maybe context was lost?');\n  }\n\n  // Set the WebGL viewport.\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n  // Clear framebuffer.\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Enable depth testing.\n  gl.enable(gl.DEPTH_TEST);\n\n  // Enable blending. ONE and ONE_MINUS_SRC_ALPHA are the right choices for\n  // premultiplied textures.\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n};\nWebGlStage.prototype.endFrame = function () {};\nWebGlStage.prototype.takeSnapshot = function (options) {\n  // Validate passed argument\n  if (typeof options !== 'object' || options == null) {\n    options = {};\n  }\n  var quality = options.quality;\n\n  // Set default quality if it is not passed\n  if (typeof quality == 'undefined') {\n    quality = 75;\n  }\n\n  // Throw if quality is of invlid type or out of bounds\n  if (typeof quality !== 'number' || quality < 0 || quality > 100) {\n    throw new Error('WebGLStage: Snapshot quality needs to be a number between 0 and 100');\n  }\n\n  // Canvas method \"toDataURL\" needs to be called in the same\n  // context as where the actual rendering is done. Hence this.\n  this.render();\n\n  // Return the snapshot\n  return this._domElement.toDataURL('image/jpeg', quality / 100);\n};\nWebGlStage.type = WebGlStage.prototype.type = 'webgl';\nfunction WebGlTexture(stage, tile, asset) {\n  this._stage = stage;\n  this._gl = stage._gl;\n  this._texture = null;\n  this._timestamp = null;\n  this._width = this._height = null;\n  this.refresh(tile, asset);\n}\nWebGlTexture.prototype.refresh = function (tile, asset) {\n  var gl = this._gl;\n  var stage = this._stage;\n  var texture;\n\n  // Check whether the texture needs to be updated.\n  var timestamp = asset.timestamp();\n  if (timestamp === this._timestamp) {\n    return;\n  }\n\n  // Get asset element.\n  var element = asset.element();\n\n  // Get asset dimensions.\n  var width = asset.width();\n  var height = asset.height();\n  if (width !== this._width || height !== this._height) {\n    // If the texture dimensions have changed since the last refresh, create\n    // a new texture with the correct size.\n\n    // Check if texture dimensions would exceed the maximum texture size.\n    var maxSize = stage.maxTextureSize();\n    if (width > maxSize) {\n      throw new Error('Texture width larger than max size (' + width + ' vs. ' + maxSize + ')');\n    }\n    if (height > maxSize) {\n      throw new Error('Texture height larger than max size (' + height + ' vs. ' + maxSize + ')');\n    }\n\n    // Delete the current texture if it exists.\n    // This is necessary for Chrome on Android. If it isn't done the textures\n    // do not render when the size changes.\n    if (this._texture) {\n      gl.deleteTexture(texture);\n    }\n\n    // The texture must be premultiplied by alpha to ensure correct blending of\n    // semitransparent textures. For details, see:\n    // http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/\n    texture = this._texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, element);\n  } else {\n    // If the texture dimensions remain the same, repaint the existing texture.\n    // Repainting with texSubImage2D is usually faster than with texImage2D,\n    // except in the case noted in browserQuirks.\n\n    texture = this._texture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    if (element instanceof HTMLVideoElement && browserQuirks.videoUseTexImage2D) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, element);\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, element);\n    }\n  }\n\n  // Generate mipmap if the corresponding stage option is set and the texture\n  // dimensions are powers of two.\n  if (stage._generateMipmaps && ispot(width) && ispot(height)) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  }\n\n  // Clamp texture to edges.\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  // Unbind texture.\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  // Update texture dimensions and timestamp.\n  this._timestamp = timestamp;\n  this._width = width;\n  this._height = height;\n};\nWebGlTexture.prototype.destroy = function () {\n  if (this._texture) {\n    this._gl.deleteTexture(this._texture);\n  }\n  clearOwnProperties(this);\n};\nWebGlStage.TextureClass = WebGlStage.prototype.TextureClass = WebGlTexture;\nmodule.exports = WebGlStage;","map":{"version":3,"names":["Stage","require","HtmlImageLoader","browser","inherits","pixelRatio","ispot","setAbsolute","setFullSize","clearOwnProperties","browserQuirks","videoUseTexImage2D","chrome","initWebGlContext","canvas","opts","options","alpha","premultipliedAlpha","antialias","preserveDrawingBuffer","gl","getContext","Error","wrapContext","WebGlStage","self","constructor","super_","call","_generateMipmaps","generateMipmaps","_loader","_domElement","document","createElement","_gl","_handleContextLoss","emit","addEventListener","_rendererInstances","prototype","destroy","removeEventListener","domElement","webGlContext","setSizeForType","ratio","width","_width","height","_height","loadImage","url","rect","done","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","validateLayer","layer","tileSize","geometry","maxTileSize","createRenderer","Renderer","rendererInstances","i","length","renderer","push","destroyRenderer","_renderers","indexOf","index","splice","startFrame","viewport","drawingBufferWidth","drawingBufferHeight","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","endFrame","takeSnapshot","quality","render","toDataURL","type","WebGlTexture","stage","tile","asset","_stage","_texture","_timestamp","refresh","texture","timestamp","element","maxSize","deleteTexture","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","HTMLVideoElement","texSubImage2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","generateMipmap","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TextureClass","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/stages/WebGl.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Stage = require('./Stage');\nvar HtmlImageLoader = require('../loaders/HtmlImage');\nvar browser = require('bowser');\nvar inherits = require('../util/inherits');\nvar pixelRatio = require('../util/pixelRatio');\nvar ispot = require('../util/ispot');\nvar setAbsolute = require('../util/dom').setAbsolute;\nvar setFullSize = require('../util/dom').setFullSize;\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// TODO(tjgq): Unify Stage and WebGlStage.\n\n// Browser-specific workarounds.\nvar browserQuirks = {\n  // Whether to use texImage2D instead of texSubImage2D when repainting an\n  // existing texture from a video element. On most browsers texSubImage2D is\n  // faster, but on Chrome the performance degrades significantly. See:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=612542\n  videoUseTexImage2D: browser.chrome\n};\n\n\nfunction initWebGlContext(canvas, opts) {\n  var options = {\n    alpha: true,\n    premultipliedAlpha: true,\n    antialias: !!(opts && opts.antialias),\n    preserveDrawingBuffer: !!(opts && opts.preserveDrawingBuffer)\n  };\n\n  var gl = (canvas.getContext) && (canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options));\n\n  if (!gl) {\n    throw new Error('Could not get WebGL context');\n  }\n\n  if (opts.wrapContext) {\n    gl = opts.wrapContext(gl);\n  }\n\n  return gl;\n}\n\n/**\n * @class WebGlStage\n * @extends Stage\n * @classdesc\n *\n * A {@link Stage} implementation using WebGl.\n *\n * @param {Object} opts\n * @param {boolean} [opts.antialias=false]\n * @param {boolean} [opts.preserveDrawingBuffer=false]\n * @param {boolean} [opts.generateMipmaps=false]\n * @param {function} [opts.wrapContext]\n *\n * The `antialias` and `preserveDrawingBuffer` options control the WebGL\n * context attributes of the same name. The `alpha` and `premultipliedAlpha`\n * WebGL context attributes are set to their default true value and cannot\n * be overriden; this allows semitransparent textures to be composited with\n * the page. See:\n * https://www.khronos.org/registry/webgl/specs/1.0/#WEBGLCONTEXTATTRIBUTES\n *\n * The `generateMipmaps` option controls texture mipmap generation. Mipmaps\n * may improve rendering quality, at the cost of increased memory usage.\n * Due to technical limitations, they are only generated for textures whose\n * dimensions are a power of two. See:\n * https://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support\n *\n * The `wrapContext` option is a function that receives and returns a\n * WebGLRenderingContext. The stage will use its return value as the context.\n * This is useful when used together with WebGLDebugUtils to debug WebGL issues.\n * See https://www.khronos.org/webgl/wiki/Debugging.\n *\n * Also see the available {@link Stage} options.\n */\nfunction WebGlStage(opts) {\n  opts = opts || {};\n\n  var self = this;\n\n  this.constructor.super_.call(this, opts);\n\n  this._generateMipmaps = opts.generateMipmaps != null ?\n    opts.generateMipmaps : false;\n\n  this._loader = new HtmlImageLoader(this);\n\n  this._domElement = document.createElement('canvas');\n\n  setAbsolute(this._domElement);\n  setFullSize(this._domElement);\n\n  this._gl = initWebGlContext(this._domElement, opts);\n\n  this._handleContextLoss = function() {\n    self.emit('webglcontextlost');\n    self._gl = null;\n  };\n\n  // Handle WebGl context loss.\n  this._domElement.addEventListener('webglcontextlost', this._handleContextLoss);\n\n  // WebGl renderers are singletons for a given stage. This list stores the\n  // existing renderers so they can be reused across layers with the same\n  // geometry and view type.\n  this._rendererInstances = [];\n}\n\ninherits(WebGlStage, Stage);\n\n\n/**\n * Destructor.\n */\nWebGlStage.prototype.destroy = function() {\n  this._domElement.removeEventListener('webglcontextlost', this._handleContextLoss);\n  // Delegate clearing own properties to the Stage destructor.\n  this.constructor.super_.prototype.destroy.call(this);\n};\n\n\n/**\n * Returns the underlying DOM element.\n *\n * @return {Element}\n */\nWebGlStage.prototype.domElement = function() {\n  return this._domElement;\n};\n\n\n/**\n * Returns the underlying WebGL rendering context.\n *\n * @return {WebGLRenderingContext }\n */\nWebGlStage.prototype.webGlContext = function() {\n  return this._gl;\n};\n\n\nWebGlStage.prototype.setSizeForType = function() {\n  // Update the size of the canvas coordinate space.\n  //\n  // The size is obtained by taking the stage dimensions, which are set in CSS\n  // pixels, and multiplying them by the device pixel ratio. Crucially, this\n  // must be the only place where the WebGL rendering pipeline accesses the\n  // pixel ratio; subsequent uses should reference the `drawingBufferWidth` and\n  // `drawingBufferHeight` properties on the WebGLRenderingContext. Failing to\n  // do so will break the rendering if the pixel ratio changes but the stage\n  // size does not, e.g. when moving the window across screens.\n  var ratio = pixelRatio();\n  this._domElement.width = ratio * this._width;\n  this._domElement.height = ratio * this._height;\n};\n\n\nWebGlStage.prototype.loadImage = function(url, rect, done) {\n  return this._loader.loadImage(url, rect, done);\n};\n\n\nWebGlStage.prototype.maxTextureSize = function() {\n  return this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n};\n\n\nWebGlStage.prototype.validateLayer = function(layer) {\n  var tileSize = layer.geometry().maxTileSize();\n  var maxTextureSize = this.maxTextureSize();\n  if (tileSize > maxTextureSize) {\n    throw new Error('Layer has level with tile size larger than maximum texture size (' + tileSize + ' vs. ' + maxTextureSize + ')');\n  }\n};\n\n\nWebGlStage.prototype.createRenderer = function(Renderer) {\n  var rendererInstances = this._rendererInstances;\n  for (var i = 0; i < rendererInstances.length; i++) {\n    if (rendererInstances[i] instanceof Renderer) {\n      return rendererInstances[i];\n    }\n  }\n  var renderer = new Renderer(this._gl);\n  rendererInstances.push(renderer);\n  return renderer;\n};\n\n\nWebGlStage.prototype.destroyRenderer = function(renderer) {\n  var rendererInstances = this._rendererInstances;\n  if (this._renderers.indexOf(renderer) < 0) {\n    renderer.destroy();\n    var index = rendererInstances.indexOf(renderer);\n    if (index >= 0) {\n      rendererInstances.splice(index, 1);\n    }\n  }\n};\n\n\nWebGlStage.prototype.startFrame = function() {\n\n  var gl = this._gl;\n\n  if (!gl) {\n    throw new Error('Bad WebGL context - maybe context was lost?');\n  }\n\n  // Set the WebGL viewport.\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n  // Clear framebuffer.\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Enable depth testing.\n  gl.enable(gl.DEPTH_TEST);\n\n  // Enable blending. ONE and ONE_MINUS_SRC_ALPHA are the right choices for\n  // premultiplied textures.\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n};\n\n\nWebGlStage.prototype.endFrame = function() {};\n\n\nWebGlStage.prototype.takeSnapshot = function(options) {\n\n  // Validate passed argument\n  if (typeof options !== 'object' || options == null) {\n    options = {};\n  }\n\n  var quality = options.quality;\n\n  // Set default quality if it is not passed\n  if (typeof quality == 'undefined') {\n    quality = 75;\n  }\n\n  // Throw if quality is of invlid type or out of bounds\n  if (typeof quality !== 'number' || quality < 0 || quality > 100) {\n    throw new Error('WebGLStage: Snapshot quality needs to be a number between 0 and 100');\n  }\n\n  // Canvas method \"toDataURL\" needs to be called in the same\n  // context as where the actual rendering is done. Hence this.\n  this.render();\n\n  // Return the snapshot\n  return this._domElement.toDataURL('image/jpeg', quality / 100);\n}\n\n\nWebGlStage.type = WebGlStage.prototype.type = 'webgl';\n\n\nfunction WebGlTexture(stage, tile, asset) {\n  this._stage = stage;\n  this._gl = stage._gl;\n  this._texture = null;\n  this._timestamp = null;\n  this._width = this._height = null;\n  this.refresh(tile, asset);\n}\n\n\nWebGlTexture.prototype.refresh = function(tile, asset) {\n\n  var gl = this._gl;\n  var stage = this._stage;\n  var texture;\n\n  // Check whether the texture needs to be updated.\n  var timestamp = asset.timestamp();\n  if (timestamp === this._timestamp) {\n    return;\n  }\n\n  // Get asset element.\n  var element = asset.element();\n\n  // Get asset dimensions.\n  var width = asset.width();\n  var height = asset.height();\n\n  if (width !== this._width || height !== this._height) {\n\n    // If the texture dimensions have changed since the last refresh, create\n    // a new texture with the correct size.\n\n    // Check if texture dimensions would exceed the maximum texture size.\n    var maxSize = stage.maxTextureSize();\n    if (width > maxSize) {\n      throw new Error('Texture width larger than max size (' + width + ' vs. ' + maxSize + ')');\n    }\n    if (height > maxSize) {\n      throw new Error('Texture height larger than max size (' + height + ' vs. ' + maxSize + ')');\n    }\n\n    // Delete the current texture if it exists.\n    // This is necessary for Chrome on Android. If it isn't done the textures\n    // do not render when the size changes.\n    if (this._texture) {\n      gl.deleteTexture(texture);\n    }\n\n    // The texture must be premultiplied by alpha to ensure correct blending of\n    // semitransparent textures. For details, see:\n    // http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/\n    texture = this._texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, element);\n\n  } else {\n\n    // If the texture dimensions remain the same, repaint the existing texture.\n    // Repainting with texSubImage2D is usually faster than with texImage2D,\n    // except in the case noted in browserQuirks.\n\n    texture = this._texture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\n    if (element instanceof HTMLVideoElement && browserQuirks.videoUseTexImage2D) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, element);\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, element);\n    }\n\n  }\n\n  // Generate mipmap if the corresponding stage option is set and the texture\n  // dimensions are powers of two.\n  if (stage._generateMipmaps && ispot(width) && ispot(height)) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  }\n\n  // Clamp texture to edges.\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  // Unbind texture.\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  // Update texture dimensions and timestamp.\n  this._timestamp = timestamp;\n  this._width = width;\n  this._height = height;\n\n};\n\n\nWebGlTexture.prototype.destroy = function() {\n  if (this._texture) {\n    this._gl.deleteTexture(this._texture);\n  }\n  clearOwnProperties(this);\n};\n\n\nWebGlStage.TextureClass = WebGlStage.prototype.TextureClass = WebGlTexture;\n\n\nmodule.exports = WebGlStage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}