{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar clearOwnProperties = require('./util/clearOwnProperties');\n\n/**\n * Signals that {@link Stage#render} is about to be called.\n * @event RenderLoop#beforeRender\n */\n\n/**\n * Signals that {@link Stage#render} has just been called.\n * @event RenderLoop#afterRender\n */\n\n/**\n * @class RenderLoop\n * @classdesc\n *\n * A RenderLoop wraps a {@link Stage} and calls {@link Stage#render} on the next\n * frame whenever it fires {@link Stage#renderInvalid}. It may be started and\n * stopped, and is initially in the stopped state, in which no call to\n * {@link Stage#render} occurs.\n *\n * @listens Stage#renderInvalid\n *\n * @param {Stage} stage\n */\nfunction RenderLoop(stage) {\n  var self = this;\n\n  // The stage wrapped by the loop.\n  this._stage = stage;\n\n  // Whether the loop is running.\n  this._running = false;\n\n  // Whether the loop is currently rendering.\n  this._rendering = false;\n\n  // The current requestAnimationFrame handle.\n  this._requestHandle = null;\n\n  // The callback passed into requestAnimationFrame.\n  this._boundLoop = this._loop.bind(this);\n\n  // Handler for renderInvalid events emitted by the stage.\n  this._renderInvalidHandler = function () {\n    // If we are already rendering, there's no need to schedule a new render\n    // on the next frame.\n    if (!self._rendering) {\n      self.renderOnNextFrame();\n    }\n  };\n\n  // Handle renderInvalid events emitted by the stage.\n  this._stage.addEventListener('renderInvalid', this._renderInvalidHandler);\n}\neventEmitter(RenderLoop);\n\n/**\n * Destructor.\n */\nRenderLoop.prototype.destroy = function () {\n  this.stop();\n  this._stage.removeEventListener('renderInvalid', this._renderInvalidHandler);\n  clearOwnProperties(this);\n};\n\n/**\n * Returns the underlying stage.\n * @return {Stage}\n */\nRenderLoop.prototype.stage = function () {\n  return this._stage;\n};\n\n/**\n * Starts the render loop.\n */\nRenderLoop.prototype.start = function () {\n  this._running = true;\n  this.renderOnNextFrame();\n};\n\n/**\n * Stops the render loop.\n */\nRenderLoop.prototype.stop = function () {\n  if (this._requestHandle) {\n    window.cancelAnimationFrame(this._requestHandle);\n    this._requestHandle = null;\n  }\n  this._running = false;\n};\n\n/**\n * Forces the stage to render on the next frame, even if its contents remain\n * valid. Does nothing if the loop is stopped.\n */\nRenderLoop.prototype.renderOnNextFrame = function () {\n  if (this._running && !this._requestHandle) {\n    this._requestHandle = window.requestAnimationFrame(this._boundLoop);\n  }\n};\nRenderLoop.prototype._loop = function () {\n  if (!this._running) {\n    throw new Error('Render loop running while in stopped state');\n  }\n  this._requestHandle = null;\n  this._rendering = true;\n  this.emit('beforeRender');\n  this._rendering = false;\n  this._stage.render();\n  this.emit('afterRender');\n};\nmodule.exports = RenderLoop;","map":{"version":3,"names":["eventEmitter","require","clearOwnProperties","RenderLoop","stage","self","_stage","_running","_rendering","_requestHandle","_boundLoop","_loop","bind","_renderInvalidHandler","renderOnNextFrame","addEventListener","prototype","destroy","stop","removeEventListener","start","window","cancelAnimationFrame","requestAnimationFrame","Error","emit","render","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/RenderLoop.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar clearOwnProperties = require('./util/clearOwnProperties');\n\n/**\n * Signals that {@link Stage#render} is about to be called.\n * @event RenderLoop#beforeRender\n */\n\n/**\n * Signals that {@link Stage#render} has just been called.\n * @event RenderLoop#afterRender\n */\n\n/**\n * @class RenderLoop\n * @classdesc\n *\n * A RenderLoop wraps a {@link Stage} and calls {@link Stage#render} on the next\n * frame whenever it fires {@link Stage#renderInvalid}. It may be started and\n * stopped, and is initially in the stopped state, in which no call to\n * {@link Stage#render} occurs.\n *\n * @listens Stage#renderInvalid\n *\n * @param {Stage} stage\n */\nfunction RenderLoop(stage) {\n\n  var self = this;\n\n  // The stage wrapped by the loop.\n  this._stage = stage;\n\n  // Whether the loop is running.\n  this._running = false;\n\n  // Whether the loop is currently rendering.\n  this._rendering = false;\n\n  // The current requestAnimationFrame handle.\n  this._requestHandle = null;\n\n  // The callback passed into requestAnimationFrame.\n  this._boundLoop = this._loop.bind(this);\n\n  // Handler for renderInvalid events emitted by the stage.\n  this._renderInvalidHandler = function() {\n    // If we are already rendering, there's no need to schedule a new render\n    // on the next frame.\n    if (!self._rendering) {\n      self.renderOnNextFrame();\n    }\n  };\n\n  // Handle renderInvalid events emitted by the stage.\n  this._stage.addEventListener('renderInvalid', this._renderInvalidHandler);\n\n}\n\neventEmitter(RenderLoop);\n\n\n/**\n * Destructor.\n */\nRenderLoop.prototype.destroy = function() {\n  this.stop();\n  this._stage.removeEventListener('renderInvalid', this._renderInvalidHandler);\n  clearOwnProperties(this);\n};\n\n\n/**\n * Returns the underlying stage.\n * @return {Stage}\n */\nRenderLoop.prototype.stage = function() {\n  return this._stage;\n};\n\n\n/**\n * Starts the render loop.\n */\nRenderLoop.prototype.start = function() {\n  this._running = true;\n  this.renderOnNextFrame();\n};\n\n\n/**\n * Stops the render loop.\n */\nRenderLoop.prototype.stop = function() {\n  if (this._requestHandle) {\n    window.cancelAnimationFrame(this._requestHandle);\n    this._requestHandle = null;\n  }\n  this._running = false;\n};\n\n\n/**\n * Forces the stage to render on the next frame, even if its contents remain\n * valid. Does nothing if the loop is stopped.\n */\nRenderLoop.prototype.renderOnNextFrame = function() {\n  if (this._running && !this._requestHandle) {\n    this._requestHandle = window.requestAnimationFrame(this._boundLoop);\n  }\n};\n\n\nRenderLoop.prototype._loop = function() {\n  if (!this._running) {\n    throw new Error('Render loop running while in stopped state');\n  }\n  this._requestHandle = null;\n  this._rendering = true;\n  this.emit('beforeRender');\n  this._rendering = false;\n  this._stage.render();\n  this.emit('afterRender');\n};\n\n\nmodule.exports = RenderLoop;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}