{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar inherits = require('../util/inherits');\nvar hash = require('../util/hash');\nvar TileSearcher = require('../TileSearcher');\nvar LruMap = require('../collections/LruMap');\nvar Level = require('./Level');\nvar makeLevelList = require('./common').makeLevelList;\nvar makeSelectableLevelList = require('./common').makeSelectableLevelList;\nvar clamp = require('../util/clamp');\nvar mod = require('../util/mod');\nvar cmp = require('../util/cmp');\nvar type = require('../util/type');\nvar vec2 = require('gl-matrix').vec2;\nvar vec4 = require('gl-matrix').vec4;\nvar neighborsCacheSize = 64;\n\n// Offsets to apply to the (x,y) coordinates of a tile to get its neighbors.\nvar neighborOffsets = [[0, 1],\n// top\n[1, 0],\n// right\n[0, -1],\n// bottom\n[-1, 0] // left\n];\n\n/**\n * @class FlatTile\n * @implements Tile\n * @classdesc\n *\n * A tile in a {@link FlatGeometry}.\n */\nfunction FlatTile(x, y, z, geometry) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this._geometry = geometry;\n  this._level = geometry.levelList[z];\n}\nFlatTile.prototype.rotX = function () {\n  return 0;\n};\nFlatTile.prototype.rotY = function () {\n  return 0;\n};\nFlatTile.prototype.centerX = function () {\n  var levelWidth = this._level.width();\n  var tileWidth = this._level.tileWidth();\n  return (this.x * tileWidth + 0.5 * this.width()) / levelWidth - 0.5;\n};\nFlatTile.prototype.centerY = function () {\n  var levelHeight = this._level.height();\n  var tileHeight = this._level.tileHeight();\n  return 0.5 - (this.y * tileHeight + 0.5 * this.height()) / levelHeight;\n};\nFlatTile.prototype.scaleX = function () {\n  var levelWidth = this._level.width();\n  return this.width() / levelWidth;\n};\nFlatTile.prototype.scaleY = function () {\n  var levelHeight = this._level.height();\n  return this.height() / levelHeight;\n};\nFlatTile.prototype.width = function () {\n  var levelWidth = this._level.width();\n  var tileWidth = this._level.tileWidth();\n  if (this.x === this._level.numHorizontalTiles() - 1) {\n    var widthRemainder = mod(levelWidth, tileWidth);\n    return widthRemainder || tileWidth;\n  } else {\n    return tileWidth;\n  }\n};\nFlatTile.prototype.height = function () {\n  var levelHeight = this._level.height();\n  var tileHeight = this._level.tileHeight();\n  if (this.y === this._level.numVerticalTiles() - 1) {\n    var heightRemainder = mod(levelHeight, tileHeight);\n    return heightRemainder || tileHeight;\n  } else {\n    return tileHeight;\n  }\n};\nFlatTile.prototype.levelWidth = function () {\n  return this._level.width();\n};\nFlatTile.prototype.levelHeight = function () {\n  return this._level.height();\n};\nFlatTile.prototype.vertices = function (result) {\n  if (!result) {\n    result = [vec2.create(), vec2.create(), vec2.create(), vec2.create()];\n  }\n  var left = this.centerX() - this.scaleX() / 2;\n  var right = this.centerX() + this.scaleX() / 2;\n  var bottom = this.centerY() - this.scaleY() / 2;\n  var top = this.centerY() + this.scaleY() / 2;\n  vec2.set(result[0], left, top);\n  vec2.set(result[1], right, top);\n  vec2.set(result[2], right, bottom);\n  vec2.set(result[3], left, bottom);\n  return result;\n};\nFlatTile.prototype.parent = function () {\n  if (this.z === 0) {\n    return null;\n  }\n  var geometry = this._geometry;\n  var z = this.z - 1;\n  // TODO: Currently assuming each level is double the size of previous one.\n  // Fix to support other multiples.\n  var x = Math.floor(this.x / 2);\n  var y = Math.floor(this.y / 2);\n  return new FlatTile(x, y, z, geometry);\n};\nFlatTile.prototype.children = function (result) {\n  if (this.z === this._geometry.levelList.length - 1) {\n    return null;\n  }\n  var geometry = this._geometry;\n  var z = this.z + 1;\n  result = result || [];\n\n  // TODO: Currently assuming each level is double the size of previous one.\n  // Fix to support other multiples.\n  result.push(new FlatTile(2 * this.x, 2 * this.y, z, geometry));\n  result.push(new FlatTile(2 * this.x, 2 * this.y + 1, z, geometry));\n  result.push(new FlatTile(2 * this.x + 1, 2 * this.y, z, geometry));\n  result.push(new FlatTile(2 * this.x + 1, 2 * this.y + 1, z, geometry));\n  return result;\n};\nFlatTile.prototype.neighbors = function () {\n  var geometry = this._geometry;\n  var cache = geometry._neighborsCache;\n\n  // Satisfy from cache when available.\n  var cachedResult = cache.get(this);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  var x = this.x;\n  var y = this.y;\n  var z = this.z;\n  var level = this._level;\n  var numX = level.numHorizontalTiles() - 1;\n  var numY = level.numVerticalTiles() - 1;\n  var result = [];\n  for (var i = 0; i < neighborOffsets.length; i++) {\n    var xOffset = neighborOffsets[i][0];\n    var yOffset = neighborOffsets[i][1];\n    var newX = x + xOffset;\n    var newY = y + yOffset;\n    var newZ = z;\n    if (0 <= newX && newX <= numX && 0 <= newY && newY <= numY) {\n      result.push(new FlatTile(newX, newY, newZ, geometry));\n    }\n  }\n\n  // Store into cache to satisfy future requests.\n  cache.set(this, result);\n  return result;\n};\nFlatTile.prototype.hash = function () {\n  return hash(this.z, this.y, this.x);\n};\nFlatTile.prototype.equals = function (that) {\n  return this._geometry === that._geometry && this.z === that.z && this.y === that.y && this.x === that.x;\n};\nFlatTile.prototype.cmp = function (that) {\n  return cmp(this.z, that.z) || cmp(this.y, that.y) || cmp(this.x, that.x);\n};\nFlatTile.prototype.str = function () {\n  return 'FlatTile(' + tile.x + ', ' + tile.y + ', ' + tile.z + ')';\n};\nfunction FlatLevel(levelProperties) {\n  this.constructor.super_.call(this, levelProperties);\n  this._width = levelProperties.width;\n  this._height = levelProperties.height;\n  this._tileWidth = levelProperties.tileWidth;\n  this._tileHeight = levelProperties.tileHeight;\n}\ninherits(FlatLevel, Level);\nFlatLevel.prototype.width = function () {\n  return this._width;\n};\nFlatLevel.prototype.height = function () {\n  return this._height;\n};\nFlatLevel.prototype.tileWidth = function () {\n  return this._tileWidth;\n};\nFlatLevel.prototype.tileHeight = function () {\n  return this._tileHeight;\n};\nFlatLevel.prototype._validateWithParentLevel = function (parentLevel) {\n  var width = this.width();\n  var height = this.height();\n  var tileWidth = this.tileWidth();\n  var tileHeight = this.tileHeight();\n  var parentWidth = parentLevel.width();\n  var parentHeight = parentLevel.height();\n  var parentTileWidth = parentLevel.tileWidth();\n  var parentTileHeight = parentLevel.tileHeight();\n  if (width % parentWidth !== 0) {\n    return new Error('Level width must be multiple of parent level: ' + width + ' vs. ' + parentWidth);\n  }\n  if (height % parentHeight !== 0) {\n    return new Error('Level height must be multiple of parent level: ' + height + ' vs. ' + parentHeight);\n  }\n  if (tileWidth % parentTileWidth !== 0) {\n    return new Error('Level tile width must be multiple of parent level: ' + tileWidth + ' vs. ' + parentTileWidth);\n  }\n  if (tileHeight % parentTileHeight !== 0) {\n    return new Error('Level tile height must be multiple of parent level: ' + tileHeight + ' vs. ' + parentTileHeight);\n  }\n};\n\n/**\n * @class FlatGeometry\n * @implements Geometry\n * @classdesc\n *\n * A {@link Geometry} implementation suitable for tiled flat images with\n * multiple resolution levels.\n *\n * The following restrictions apply:\n *   - All tiles must be square, except when in the last row or column position,\n *     and must form a rectangular grid;\n *   - The width and height of a level must be multiples of the parent level\n *     width and height.\n *\n * @param {Object[]} levelPropertiesList Level description\n * @param {number} levelPropertiesList[].width Level width in pixels\n * @param {number} levelPropertiesList[].tileWidth Tile width in pixels for\n *                 square tiles\n * @param {number} levelPropertiesList[].height Level height in pixels\n * @param {number} levelPropertiesList[].tileHeight Tile height in pixels for\n *                 square tiles\n */\nfunction FlatGeometry(levelPropertiesList) {\n  if (type(levelPropertiesList) !== 'array') {\n    throw new Error('Level list must be an array');\n  }\n  this.levelList = makeLevelList(levelPropertiesList, FlatLevel);\n  this.selectableLevelList = makeSelectableLevelList(this.levelList);\n  for (var i = 1; i < this.levelList.length; i++) {\n    this.levelList[i]._validateWithParentLevel(this.levelList[i - 1]);\n  }\n  this._tileSearcher = new TileSearcher(this);\n  this._neighborsCache = new LruMap(neighborsCacheSize);\n  this._vec = vec4.create();\n  this._viewSize = {};\n}\nFlatGeometry.prototype.maxTileSize = function () {\n  var maxTileSize = 0;\n  for (var i = 0; i < this.levelList.length; i++) {\n    var level = this.levelList[i];\n    maxTileSize = Math.max(maxTileSize, level.tileWidth, level.tileHeight);\n  }\n  return maxTileSize;\n};\nFlatGeometry.prototype.levelTiles = function (level, result) {\n  var levelIndex = this.levelList.indexOf(level);\n  var maxX = level.numHorizontalTiles() - 1;\n  var maxY = level.numVerticalTiles() - 1;\n  if (!result) {\n    result = [];\n  }\n  for (var x = 0; x <= maxX; x++) {\n    for (var y = 0; y <= maxY; y++) {\n      result.push(new FlatTile(x, y, levelIndex, this));\n    }\n  }\n  return result;\n};\nFlatGeometry.prototype._closestTile = function (view, level) {\n  var ray = this._vec;\n\n  // Compute a view ray into the central screen point.\n  vec4.set(ray, 0, 0, 1, 1);\n  vec4.transformMat4(ray, ray, view.inverseProjection());\n\n  // Compute the image coordinates that the view ray points into.\n  var x = 0.5 + ray[0];\n  var y = 0.5 - ray[1];\n\n  // Get the desired zoom level.\n  var tileZ = this.levelList.indexOf(level);\n  var levelWidth = level.width();\n  var levelHeight = level.height();\n  var tileWidth = level.tileWidth();\n  var tileHeight = level.tileHeight();\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n\n  // Find the coordinates of the tile that the view ray points into.\n  var tileX = clamp(Math.floor(x * levelWidth / tileWidth), 0, numX - 1);\n  var tileY = clamp(Math.floor(y * levelHeight / tileHeight), 0, numY - 1);\n  return new FlatTile(tileX, tileY, tileZ, this);\n};\nFlatGeometry.prototype.visibleTiles = function (view, level, result) {\n  var viewSize = this._viewSize;\n  var tileSearcher = this._tileSearcher;\n  result = result || [];\n  view.size(viewSize);\n  if (viewSize.width === 0 || viewSize.height === 0) {\n    // No tiles are visible if the viewport is empty.\n    return result;\n  }\n  var startingTile = this._closestTile(view, level);\n  var count = tileSearcher.search(view, startingTile, result);\n  if (!count) {\n    throw new Error('Starting tile is not visible');\n  }\n  return result;\n};\nFlatGeometry.Tile = FlatGeometry.prototype.Tile = FlatTile;\nFlatGeometry.type = FlatGeometry.prototype.type = 'flat';\nFlatTile.type = FlatTile.prototype.type = 'flat';\nmodule.exports = FlatGeometry;","map":{"version":3,"names":["inherits","require","hash","TileSearcher","LruMap","Level","makeLevelList","makeSelectableLevelList","clamp","mod","cmp","type","vec2","vec4","neighborsCacheSize","neighborOffsets","FlatTile","x","y","z","geometry","_geometry","_level","levelList","prototype","rotX","rotY","centerX","levelWidth","width","tileWidth","centerY","levelHeight","height","tileHeight","scaleX","scaleY","numHorizontalTiles","widthRemainder","numVerticalTiles","heightRemainder","vertices","result","create","left","right","bottom","top","set","parent","Math","floor","children","length","push","neighbors","cache","_neighborsCache","cachedResult","get","level","numX","numY","i","xOffset","yOffset","newX","newY","newZ","equals","that","str","tile","FlatLevel","levelProperties","constructor","super_","call","_width","_height","_tileWidth","_tileHeight","_validateWithParentLevel","parentLevel","parentWidth","parentHeight","parentTileWidth","parentTileHeight","Error","FlatGeometry","levelPropertiesList","selectableLevelList","_tileSearcher","_vec","_viewSize","maxTileSize","max","levelTiles","levelIndex","indexOf","maxX","maxY","_closestTile","view","ray","transformMat4","inverseProjection","tileZ","tileX","tileY","visibleTiles","viewSize","tileSearcher","size","startingTile","count","search","Tile","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/geometries/Flat.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar inherits = require('../util/inherits');\nvar hash = require('../util/hash');\nvar TileSearcher = require('../TileSearcher');\nvar LruMap = require('../collections/LruMap');\nvar Level = require('./Level');\nvar makeLevelList = require('./common').makeLevelList;\nvar makeSelectableLevelList = require('./common').makeSelectableLevelList;\nvar clamp = require('../util/clamp');\nvar mod = require('../util/mod');\nvar cmp = require('../util/cmp');\nvar type = require('../util/type');\nvar vec2 = require('gl-matrix').vec2;\nvar vec4 = require('gl-matrix').vec4;\n\nvar neighborsCacheSize = 64;\n\n// Offsets to apply to the (x,y) coordinates of a tile to get its neighbors.\nvar neighborOffsets = [\n  [  0,  1 ], // top\n  [  1,  0 ], // right\n  [  0, -1 ], // bottom\n  [ -1,  0 ]  // left\n];\n\n\n/**\n * @class FlatTile\n * @implements Tile\n * @classdesc\n *\n * A tile in a {@link FlatGeometry}.\n */\nfunction FlatTile(x, y, z, geometry) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this._geometry = geometry;\n  this._level = geometry.levelList[z];\n}\n\n\nFlatTile.prototype.rotX = function() {\n  return 0;\n};\n\n\nFlatTile.prototype.rotY = function() {\n  return 0;\n};\n\n\nFlatTile.prototype.centerX = function() {\n  var levelWidth = this._level.width();\n  var tileWidth = this._level.tileWidth();\n  return (this.x * tileWidth + 0.5 * this.width()) / levelWidth - 0.5;\n};\n\n\nFlatTile.prototype.centerY = function() {\n  var levelHeight = this._level.height();\n  var tileHeight = this._level.tileHeight();\n  return 0.5 - (this.y * tileHeight + 0.5 * this.height()) / levelHeight;\n};\n\n\nFlatTile.prototype.scaleX = function() {\n  var levelWidth = this._level.width();\n  return this.width() / levelWidth;\n};\n\n\nFlatTile.prototype.scaleY = function() {\n  var levelHeight = this._level.height();\n  return this.height() / levelHeight;\n};\n\n\nFlatTile.prototype.width = function() {\n  var levelWidth = this._level.width();\n  var tileWidth = this._level.tileWidth();\n  if (this.x === this._level.numHorizontalTiles() - 1) {\n    var widthRemainder = mod(levelWidth, tileWidth);\n    return widthRemainder || tileWidth;\n  } else {\n    return tileWidth;\n  }\n};\n\n\nFlatTile.prototype.height = function() {\n  var levelHeight = this._level.height();\n  var tileHeight = this._level.tileHeight();\n  if (this.y === this._level.numVerticalTiles() - 1) {\n    var heightRemainder = mod(levelHeight, tileHeight);\n    return heightRemainder || tileHeight;\n  } else {\n    return tileHeight;\n  }\n};\n\n\nFlatTile.prototype.levelWidth = function() {\n  return this._level.width();\n};\n\n\nFlatTile.prototype.levelHeight = function() {\n  return this._level.height();\n};\n\n\nFlatTile.prototype.vertices = function(result) {\n  if (!result) {\n    result = [vec2.create(), vec2.create(), vec2.create(), vec2.create()];\n  }\n\n  var left = this.centerX() - this.scaleX() / 2;\n  var right = this.centerX() + this.scaleX() / 2;\n  var bottom = this.centerY() - this.scaleY() / 2;\n  var top = this.centerY() + this.scaleY() / 2;\n\n  vec2.set(result[0], left, top);\n  vec2.set(result[1], right, top);\n  vec2.set(result[2], right, bottom);\n  vec2.set(result[3], left, bottom);\n\n  return result;\n};\n\n\nFlatTile.prototype.parent = function() {\n\n\n  if (this.z === 0) {\n    return null;\n  }\n\n  var geometry = this._geometry;\n\n  var z = this.z - 1;\n  // TODO: Currently assuming each level is double the size of previous one.\n  // Fix to support other multiples.\n  var x = Math.floor(this.x / 2);\n  var y = Math.floor(this.y / 2);\n\n  return new FlatTile(x, y, z, geometry);\n\n};\n\n\nFlatTile.prototype.children = function(result) {\n  if (this.z === this._geometry.levelList.length - 1) {\n    return null;\n  }\n\n  var geometry = this._geometry;\n  var z = this.z + 1;\n\n  result = result || [];\n\n  // TODO: Currently assuming each level is double the size of previous one.\n  // Fix to support other multiples.\n  result.push(new FlatTile(2*this.x  , 2*this.y  , z, geometry));\n  result.push(new FlatTile(2*this.x  , 2*this.y+1, z, geometry));\n  result.push(new FlatTile(2*this.x+1, 2*this.y  , z, geometry));\n  result.push(new FlatTile(2*this.x+1, 2*this.y+1, z, geometry));\n\n  return result;\n\n};\n\n\nFlatTile.prototype.neighbors = function() {\n\n  var geometry = this._geometry;\n  var cache = geometry._neighborsCache;\n\n  // Satisfy from cache when available.\n  var cachedResult = cache.get(this);\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  var x = this.x;\n  var y = this.y;\n  var z = this.z;\n  var level = this._level;\n\n  var numX = level.numHorizontalTiles() - 1;\n  var numY = level.numVerticalTiles() - 1;\n\n  var result = [];\n\n  for (var i = 0; i < neighborOffsets.length; i++) {\n    var xOffset = neighborOffsets[i][0];\n    var yOffset = neighborOffsets[i][1];\n\n    var newX = x + xOffset;\n    var newY = y + yOffset;\n    var newZ = z;\n\n    if (0 <= newX && newX <= numX && 0 <= newY && newY <= numY) {\n      result.push(new FlatTile(newX, newY, newZ, geometry));\n    }\n  }\n\n  // Store into cache to satisfy future requests.\n  cache.set(this, result);\n\n  return result;\n\n};\n\n\nFlatTile.prototype.hash = function() {\n  return hash(this.z, this.y, this.x);\n};\n\n\nFlatTile.prototype.equals = function(that) {\n  return (this._geometry === that._geometry &&\n      this.z === that.z && this.y === that.y && this.x === that.x);\n};\n\n\nFlatTile.prototype.cmp = function(that) {\n  return (cmp(this.z, that.z) || cmp(this.y, that.y) || cmp(this.x, that.x));\n};\n\n\nFlatTile.prototype.str = function() {\n  return 'FlatTile(' + tile.x + ', ' + tile.y + ', ' + tile.z + ')';\n};\n\n\nfunction FlatLevel(levelProperties) {\n  this.constructor.super_.call(this, levelProperties);\n\n  this._width = levelProperties.width;\n  this._height = levelProperties.height;\n  this._tileWidth = levelProperties.tileWidth;\n  this._tileHeight = levelProperties.tileHeight;\n}\n\ninherits(FlatLevel, Level);\n\n\nFlatLevel.prototype.width = function() {\n  return this._width;\n};\n\n\nFlatLevel.prototype.height = function() {\n  return this._height;\n};\n\n\nFlatLevel.prototype.tileWidth = function() {\n  return this._tileWidth;\n};\n\n\nFlatLevel.prototype.tileHeight = function() {\n  return this._tileHeight;\n};\n\n\nFlatLevel.prototype._validateWithParentLevel = function(parentLevel) {\n\n  var width = this.width();\n  var height = this.height();\n  var tileWidth = this.tileWidth();\n  var tileHeight = this.tileHeight();\n\n  var parentWidth = parentLevel.width();\n  var parentHeight = parentLevel.height();\n  var parentTileWidth = parentLevel.tileWidth();\n  var parentTileHeight = parentLevel.tileHeight();\n\n  if (width % parentWidth !== 0) {\n    return new Error('Level width must be multiple of parent level: ' +\n                     width + ' vs. ' + parentWidth);\n  }\n\n  if (height % parentHeight !== 0) {\n    return new Error('Level height must be multiple of parent level: ' +\n                     height + ' vs. ' + parentHeight);\n  }\n\n  if (tileWidth % parentTileWidth !== 0) {\n    return new Error('Level tile width must be multiple of parent level: ' +\n                     tileWidth + ' vs. ' + parentTileWidth);\n  }\n\n  if (tileHeight % parentTileHeight !== 0) {\n    return new Error('Level tile height must be multiple of parent level: ' +\n                     tileHeight + ' vs. ' + parentTileHeight);\n  }\n\n};\n\n\n/**\n * @class FlatGeometry\n * @implements Geometry\n * @classdesc\n *\n * A {@link Geometry} implementation suitable for tiled flat images with\n * multiple resolution levels.\n *\n * The following restrictions apply:\n *   - All tiles must be square, except when in the last row or column position,\n *     and must form a rectangular grid;\n *   - The width and height of a level must be multiples of the parent level\n *     width and height.\n *\n * @param {Object[]} levelPropertiesList Level description\n * @param {number} levelPropertiesList[].width Level width in pixels\n * @param {number} levelPropertiesList[].tileWidth Tile width in pixels for\n *                 square tiles\n * @param {number} levelPropertiesList[].height Level height in pixels\n * @param {number} levelPropertiesList[].tileHeight Tile height in pixels for\n *                 square tiles\n */\nfunction FlatGeometry(levelPropertiesList) {\n  if (type(levelPropertiesList) !== 'array') {\n    throw new Error('Level list must be an array');\n  }\n\n  this.levelList = makeLevelList(levelPropertiesList, FlatLevel);\n  this.selectableLevelList = makeSelectableLevelList(this.levelList);\n\n  for (var i = 1; i < this.levelList.length; i++) {\n    this.levelList[i]._validateWithParentLevel(this.levelList[i-1]);\n  }\n\n  this._tileSearcher = new TileSearcher(this);\n\n  this._neighborsCache = new LruMap(neighborsCacheSize);\n\n  this._vec = vec4.create();\n\n  this._viewSize = {};\n}\n\n\nFlatGeometry.prototype.maxTileSize = function() {\n  var maxTileSize = 0;\n  for (var i = 0; i < this.levelList.length; i++) {\n    var level = this.levelList[i];\n    maxTileSize = Math.max(maxTileSize, level.tileWidth, level.tileHeight);\n  }\n  return maxTileSize;\n};\n\n\nFlatGeometry.prototype.levelTiles = function(level, result) {\n\n  var levelIndex = this.levelList.indexOf(level);\n  var maxX = level.numHorizontalTiles() - 1;\n  var maxY = level.numVerticalTiles() - 1;\n\n  if (!result) {\n    result = [];\n  }\n\n  for (var x = 0; x <= maxX; x++) {\n    for (var y = 0; y <= maxY; y++) {\n      result.push(new FlatTile(x, y, levelIndex, this));\n    }\n  }\n\n  return result;\n\n};\n\n\nFlatGeometry.prototype._closestTile = function(view, level) {\n  var ray = this._vec;\n\n  // Compute a view ray into the central screen point.\n  vec4.set(ray, 0, 0, 1, 1);\n  vec4.transformMat4(ray, ray, view.inverseProjection());\n\n  // Compute the image coordinates that the view ray points into.\n  var x = 0.5 + ray[0];\n  var y = 0.5 - ray[1];\n\n  // Get the desired zoom level.\n  var tileZ = this.levelList.indexOf(level);\n  var levelWidth = level.width();\n  var levelHeight = level.height();\n  var tileWidth = level.tileWidth();\n  var tileHeight = level.tileHeight();\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n\n  // Find the coordinates of the tile that the view ray points into.\n  var tileX = clamp(Math.floor(x * levelWidth / tileWidth), 0, numX - 1);\n  var tileY = clamp(Math.floor(y * levelHeight / tileHeight), 0, numY - 1);\n\n  return new FlatTile(tileX, tileY, tileZ, this);\n};\n\n\nFlatGeometry.prototype.visibleTiles = function(view, level, result) {\n  var viewSize = this._viewSize;\n  var tileSearcher = this._tileSearcher;\n\n  result = result || [];\n\n  view.size(viewSize);\n  if (viewSize.width === 0 || viewSize.height === 0) {\n    // No tiles are visible if the viewport is empty.\n    return result;\n  }\n\n  var startingTile = this._closestTile(view, level);\n  var count = tileSearcher.search(view, startingTile, result);\n  if (!count) {\n    throw new Error('Starting tile is not visible');\n  }\n\n  return result;\n};\n\n\nFlatGeometry.Tile = FlatGeometry.prototype.Tile = FlatTile;\nFlatGeometry.type = FlatGeometry.prototype.type = 'flat';\nFlatTile.type = FlatTile.prototype.type = 'flat';\n\n\nmodule.exports = FlatGeometry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}