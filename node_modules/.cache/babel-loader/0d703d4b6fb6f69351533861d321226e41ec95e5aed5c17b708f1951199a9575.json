{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar defaults = require('./util/defaults');\nvar defaultSpeed = 0.1;\nvar defaultAccel = 0.01;\nvar defaultOptions = {\n  yawSpeed: defaultSpeed,\n  pitchSpeed: defaultSpeed,\n  fovSpeed: defaultSpeed,\n  yawAccel: defaultAccel,\n  pitchAccel: defaultAccel,\n  fovAccel: defaultAccel,\n  targetPitch: 0,\n  targetFov: null\n};\n\n/**\n * @param {Object} opts\n * @param {Number} [opts.yawSpeed=0.1] Yaw maximum speed\n * @param {Number} [opts.pitchSpeed=0.1] Pitch maximum speed\n * @param {Number} [opts.fovSpeed=0.1] Fov maximum speed\n * @param {Number} [opts.yawAccel=0.01] Yaw acceleration\n * @param {Number} [opts.pitchAccel=0.01] Pitch acceleration\n * @param {Number} [opts.fovAccel=0.01] Fov acceleration\n * @param {Number} [opts.targetPitch=0] Value that pitch converges to. `null` means that the pitch will not change.\n * @param {Number} [opts.targetFov=null] Value that fov converges to. `null` means that the fov will not change.\n * @returns Movement function that can be passed to {@link Viewer#setIdleMovement} or {@link Scene#startMovement}\n*/\nfunction autorotate(opts) {\n  opts = defaults(opts || {}, defaultOptions);\n  var yawSpeed = opts.yawSpeed;\n  var pitchSpeed = opts.pitchSpeed;\n  var fovSpeed = opts.fovSpeed;\n  var yawAccel = opts.yawAccel;\n  var pitchAccel = opts.pitchAccel;\n  var fovAccel = opts.fovAccel;\n  var targetPitch = opts.targetPitch;\n  var targetFov = opts.targetFov;\n  return function start() {\n    var lastTime = 0;\n    var lastYawSpeed = 0;\n    var lastPitchSpeed = 0;\n    var lastFovSpeed = 0;\n    var currentYawSpeed = 0;\n    var currentPitchSpeed = 0;\n    var currentFovSpeed = 0;\n    var timeDelta;\n    var yawDelta;\n    var pitchDelta;\n    var fovDelta;\n    return function step(params, currentTime) {\n      timeDelta = (currentTime - lastTime) / 1000;\n      currentYawSpeed = Math.min(lastYawSpeed + timeDelta * yawAccel, yawSpeed);\n      yawDelta = currentYawSpeed * timeDelta;\n      params.yaw = params.yaw + yawDelta;\n      if (targetPitch != null && params.pitch !== targetPitch) {\n        var pitchThresh = 0.5 * lastPitchSpeed * lastPitchSpeed / pitchAccel;\n        if (Math.abs(targetPitch - params.pitch) > pitchThresh) {\n          // Acceleration phase\n          currentPitchSpeed = Math.min(lastPitchSpeed + timeDelta * pitchAccel, pitchSpeed);\n        } else {\n          // Deceleration phase\n          currentPitchSpeed = Math.max(lastPitchSpeed - timeDelta * pitchAccel, 0);\n        }\n        // currentPitchSpeed is the absolute value (>= 0)\n        pitchDelta = currentPitchSpeed * timeDelta;\n        if (targetPitch < params.pitch) {\n          params.pitch = Math.max(targetPitch, params.pitch - pitchDelta);\n        }\n        if (targetPitch > params.pitch) {\n          params.pitch = Math.min(targetPitch, params.pitch + pitchDelta);\n        }\n      }\n      if (targetFov != null && params.fov !== targetPitch) {\n        var fovThresh = 0.5 * lastFovSpeed * lastFovSpeed / fovAccel;\n        if (Math.abs(targetFov - params.fov) > fovThresh) {\n          // Acceleration phase\n          currentFovSpeed = Math.min(lastFovSpeed + timeDelta * fovAccel, fovSpeed);\n        } else {\n          // Deceleration phase\n          currentFovSpeed = Math.max(lastFovSpeed - timeDelta * fovAccel, 0);\n        }\n        // currentFovSpeed is the absolute value (>= 0)\n        fovDelta = currentFovSpeed * timeDelta;\n        if (targetFov < params.fov) {\n          params.fov = Math.max(targetFov, params.fov - fovDelta);\n        }\n        if (targetFov > params.fov) {\n          params.fov = Math.min(targetFov, params.fov + fovDelta);\n        }\n      }\n      lastTime = currentTime;\n      lastYawSpeed = currentYawSpeed;\n      lastPitchSpeed = currentPitchSpeed;\n      lastFovSpeed = currentFovSpeed;\n      return params;\n    };\n  };\n}\nmodule.exports = autorotate;","map":{"version":3,"names":["defaults","require","defaultSpeed","defaultAccel","defaultOptions","yawSpeed","pitchSpeed","fovSpeed","yawAccel","pitchAccel","fovAccel","targetPitch","targetFov","autorotate","opts","start","lastTime","lastYawSpeed","lastPitchSpeed","lastFovSpeed","currentYawSpeed","currentPitchSpeed","currentFovSpeed","timeDelta","yawDelta","pitchDelta","fovDelta","step","params","currentTime","Math","min","yaw","pitch","pitchThresh","abs","max","fov","fovThresh","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/autorotate.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar defaults = require('./util/defaults');\n\nvar defaultSpeed = 0.1;\nvar defaultAccel = 0.01;\n\nvar defaultOptions = {\n  yawSpeed: defaultSpeed,\n  pitchSpeed: defaultSpeed,\n  fovSpeed: defaultSpeed,\n  yawAccel: defaultAccel,\n  pitchAccel: defaultAccel,\n  fovAccel: defaultAccel,\n  targetPitch: 0,\n  targetFov: null\n};\n\n/**\n * @param {Object} opts\n * @param {Number} [opts.yawSpeed=0.1] Yaw maximum speed\n * @param {Number} [opts.pitchSpeed=0.1] Pitch maximum speed\n * @param {Number} [opts.fovSpeed=0.1] Fov maximum speed\n * @param {Number} [opts.yawAccel=0.01] Yaw acceleration\n * @param {Number} [opts.pitchAccel=0.01] Pitch acceleration\n * @param {Number} [opts.fovAccel=0.01] Fov acceleration\n * @param {Number} [opts.targetPitch=0] Value that pitch converges to. `null` means that the pitch will not change.\n * @param {Number} [opts.targetFov=null] Value that fov converges to. `null` means that the fov will not change.\n * @returns Movement function that can be passed to {@link Viewer#setIdleMovement} or {@link Scene#startMovement}\n*/\nfunction autorotate(opts) {\n\n  opts = defaults(opts || {}, defaultOptions);\n\n  var yawSpeed = opts.yawSpeed;\n  var pitchSpeed = opts.pitchSpeed;\n  var fovSpeed = opts.fovSpeed;\n  var yawAccel = opts.yawAccel;\n  var pitchAccel = opts.pitchAccel;\n  var fovAccel = opts.fovAccel;\n  var targetPitch = opts.targetPitch;\n  var targetFov = opts.targetFov;\n\n  return function start() {\n\n    var lastTime = 0;\n    var lastYawSpeed = 0;\n    var lastPitchSpeed = 0;\n    var lastFovSpeed = 0;\n\n    var currentYawSpeed = 0;\n    var currentPitchSpeed = 0;\n    var currentFovSpeed = 0;\n\n    var timeDelta;\n    var yawDelta;\n    var pitchDelta;\n    var fovDelta;\n\n    return function step(params, currentTime) {\n\n      timeDelta = (currentTime - lastTime) / 1000;\n      currentYawSpeed = Math.min(lastYawSpeed + timeDelta * yawAccel, yawSpeed);\n      yawDelta = currentYawSpeed * timeDelta;\n      params.yaw = params.yaw + yawDelta;\n\n      if (targetPitch != null && params.pitch !== targetPitch) {\n        var pitchThresh = 0.5 * lastPitchSpeed * lastPitchSpeed / pitchAccel;\n        if (Math.abs(targetPitch - params.pitch) > pitchThresh) {\n          // Acceleration phase\n          currentPitchSpeed = Math.min(lastPitchSpeed + timeDelta * pitchAccel, pitchSpeed);\n        } else {\n          // Deceleration phase\n          currentPitchSpeed = Math.max(lastPitchSpeed - timeDelta * pitchAccel, 0);\n        }\n        // currentPitchSpeed is the absolute value (>= 0)\n        pitchDelta = currentPitchSpeed * timeDelta;\n        if (targetPitch < params.pitch) {\n          params.pitch = Math.max(targetPitch, params.pitch - pitchDelta);\n        }\n        if (targetPitch > params.pitch) {\n          params.pitch = Math.min(targetPitch, params.pitch + pitchDelta);\n        }\n      }\n\n      if (targetFov != null && params.fov !== targetPitch) {\n        var fovThresh = 0.5 * lastFovSpeed * lastFovSpeed / fovAccel;\n        if (Math.abs(targetFov - params.fov) > fovThresh) {\n          // Acceleration phase\n          currentFovSpeed = Math.min(lastFovSpeed + timeDelta * fovAccel, fovSpeed);\n        } else {\n          // Deceleration phase\n          currentFovSpeed = Math.max(lastFovSpeed - timeDelta * fovAccel, 0);\n        }\n        // currentFovSpeed is the absolute value (>= 0)\n        fovDelta = currentFovSpeed * timeDelta;\n        if (targetFov < params.fov) {\n          params.fov = Math.max(targetFov, params.fov - fovDelta);\n        }\n        if (targetFov > params.fov) {\n          params.fov = Math.min(targetFov, params.fov + fovDelta);\n        }\n      }\n\n      lastTime = currentTime;\n      lastYawSpeed = currentYawSpeed;\n      lastPitchSpeed = currentPitchSpeed;\n      lastFovSpeed = currentFovSpeed;\n\n      return params;\n\n    };\n\n  };\n\n}\n\nmodule.exports = autorotate;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}