{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Hammer = require('hammerjs');\nvar nextId = 1;\nvar idProperty = 'MarzipanoHammerElementId';\nfunction getKeyForElementAndType(element, type) {\n  if (!element[idProperty]) {\n    element[idProperty] = nextId++;\n  }\n  return type + element[idProperty];\n}\n\n/**\n * @class HammerGestures\n * @classdesc\n *\n * Manages Hammer.js instances. One instance is created for each combination of\n * DOM element and pointer type.\n */\nfunction HammerGestures() {\n  this._managers = {};\n  this._refCount = {};\n}\nHammerGestures.prototype.get = function (element, type) {\n  var key = getKeyForElementAndType(element, type);\n  if (!this._managers[key]) {\n    this._managers[key] = this._createManager(element, type);\n    this._refCount[key] = 0;\n  }\n  this._refCount[key]++;\n  return new HammerGesturesHandle(this, this._managers[key], element, type);\n};\nHammerGestures.prototype._createManager = function (element, type) {\n  var manager = new Hammer.Manager(element);\n\n  // Managers are created with different parameters for different pointer\n  // types.\n  if (type === 'mouse') {\n    manager.add(new Hammer.Pan({\n      direction: Hammer.DIRECTION_ALL,\n      threshold: 0\n    }));\n  } else if (type === 'touch' || type === 'pen' || type === 'kinect') {\n    // On touch one wants to have both panning and pinching. The panning\n    // recognizer needs a threshold to allow the pinch to be recognized.\n    manager.add(new Hammer.Pan({\n      direction: Hammer.DIRECTION_ALL,\n      threshold: 20,\n      pointers: 1\n    }));\n    manager.add(new Hammer.Pinch());\n  }\n  return manager;\n};\nHammerGestures.prototype._releaseHandle = function (element, type) {\n  var key = getKeyForElementAndType(element, type);\n  if (this._refCount[key]) {\n    this._refCount[key]--;\n    if (!this._refCount[key]) {\n      this._managers[key].destroy();\n      delete this._managers[key];\n      delete this._refCount[key];\n    }\n  }\n};\nfunction HammerGesturesHandle(hammerGestures, manager, element, type) {\n  this._manager = manager;\n  this._element = element;\n  this._type = type;\n  this._hammerGestures = hammerGestures;\n  this._eventHandlers = [];\n}\nHammerGesturesHandle.prototype.on = function (events, handler) {\n  var type = this._type;\n  var handlerFilteredEvents = function (e) {\n    if (type === e.pointerType) {\n      handler(e);\n    }\n  };\n  this._eventHandlers.push({\n    events: events,\n    handler: handlerFilteredEvents\n  });\n  this._manager.on(events, handlerFilteredEvents);\n};\nHammerGesturesHandle.prototype.release = function () {\n  for (var i = 0; i < this._eventHandlers.length; i++) {\n    var eventHandler = this._eventHandlers[i];\n    this._manager.off(eventHandler.events, eventHandler.handler);\n  }\n  this._hammerGestures._releaseHandle(this._element, this._type);\n  this._manager = null;\n  this._element = null;\n  this._type = null;\n  this._hammerGestures = null;\n};\nHammerGesturesHandle.prototype.manager = function () {\n  return this._manager;\n};\nmodule.exports = new HammerGestures();","map":{"version":3,"names":["Hammer","require","nextId","idProperty","getKeyForElementAndType","element","type","HammerGestures","_managers","_refCount","prototype","get","key","_createManager","HammerGesturesHandle","manager","Manager","add","Pan","direction","DIRECTION_ALL","threshold","pointers","Pinch","_releaseHandle","destroy","hammerGestures","_manager","_element","_type","_hammerGestures","_eventHandlers","on","events","handler","handlerFilteredEvents","e","pointerType","push","release","i","length","eventHandler","off","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/controls/HammerGestures.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Hammer = require('hammerjs');\n\nvar nextId = 1;\nvar idProperty = 'MarzipanoHammerElementId';\nfunction getKeyForElementAndType(element, type) {\n  if (!element[idProperty]) {\n    element[idProperty] = nextId++;\n  }\n  return type + element[idProperty];\n}\n\n\n/**\n * @class HammerGestures\n * @classdesc\n *\n * Manages Hammer.js instances. One instance is created for each combination of\n * DOM element and pointer type.\n */\nfunction HammerGestures() {\n  this._managers = {};\n  this._refCount = {};\n}\n\n\nHammerGestures.prototype.get = function(element, type) {\n  var key = getKeyForElementAndType(element, type);\n  if (!this._managers[key]) {\n    this._managers[key] = this._createManager(element, type);\n    this._refCount[key] = 0;\n  }\n  this._refCount[key]++;\n  return new HammerGesturesHandle(this, this._managers[key], element, type);\n};\n\n\nHammerGestures.prototype._createManager = function(element, type) {\n  var manager = new Hammer.Manager(element);\n\n  // Managers are created with different parameters for different pointer\n  // types.\n  if (type === 'mouse') {\n    manager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 0 }));\n  }\n  else if (type === 'touch' || type === 'pen' || type === 'kinect') {\n    // On touch one wants to have both panning and pinching. The panning\n    // recognizer needs a threshold to allow the pinch to be recognized.\n    manager.add(new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 20, pointers: 1 }));\n    manager.add(new Hammer.Pinch());\n  }\n\n  return manager;\n};\n\n\nHammerGestures.prototype._releaseHandle = function(element, type) {\n  var key = getKeyForElementAndType(element, type);\n  if (this._refCount[key]) {\n    this._refCount[key]--;\n    if (!this._refCount[key]) {\n      this._managers[key].destroy();\n      delete this._managers[key];\n      delete this._refCount[key];\n    }\n  }\n};\n\n\nfunction HammerGesturesHandle(hammerGestures, manager, element, type) {\n  this._manager = manager;\n  this._element = element;\n  this._type = type;\n  this._hammerGestures = hammerGestures;\n  this._eventHandlers = [];\n}\n\n\nHammerGesturesHandle.prototype.on = function(events, handler) {\n  var type = this._type;\n  var handlerFilteredEvents = function(e) {\n    if (type === e.pointerType) {\n      handler(e);\n    }\n  };\n\n  this._eventHandlers.push({ events: events, handler: handlerFilteredEvents });\n  this._manager.on(events, handlerFilteredEvents);\n};\n\n\nHammerGesturesHandle.prototype.release = function() {\n  for (var i = 0; i < this._eventHandlers.length; i++) {\n    var eventHandler = this._eventHandlers[i];\n    this._manager.off(eventHandler.events, eventHandler.handler);\n  }\n\n  this._hammerGestures._releaseHandle(this._element, this._type);\n  this._manager = null;\n  this._element = null;\n  this._type = null;\n  this._hammerGestures = null;\n};\n\n\nHammerGesturesHandle.prototype.manager = function() {\n  return this._manager;\n};\n\n\nmodule.exports = new HammerGestures();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}