{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar inherits = require('../util/inherits');\nvar hash = require('../util/hash');\nvar TileSearcher = require('../TileSearcher');\nvar LruMap = require('../collections/LruMap');\nvar Level = require('./Level');\nvar makeLevelList = require('./common').makeLevelList;\nvar makeSelectableLevelList = require('./common').makeSelectableLevelList;\nvar clamp = require('../util/clamp');\nvar cmp = require('../util/cmp');\nvar type = require('../util/type');\nvar vec3 = require('gl-matrix').vec3;\nvar vec4 = require('gl-matrix').vec4;\nvar neighborsCacheSize = 64;\n\n// Initials for cube faces.\nvar faceList = 'fudlrb';\n\n// Rotation of each face, relative to the front face.\nvar faceRotation = {\n  f: {\n    x: 0,\n    y: 0\n  },\n  b: {\n    x: 0,\n    y: Math.PI\n  },\n  l: {\n    x: 0,\n    y: Math.PI / 2\n  },\n  r: {\n    x: 0,\n    y: -Math.PI / 2\n  },\n  u: {\n    x: Math.PI / 2,\n    y: 0\n  },\n  d: {\n    x: -Math.PI / 2,\n    y: 0\n  }\n};\n\n// Zero vector.\nvar origin = vec3.create();\n\n// Rotate a vector in ZXY order.\nfunction rotateVector(vec, z, x, y) {\n  if (z) {\n    vec3.rotateZ(vec, vec, origin, z);\n  }\n  if (x) {\n    vec3.rotateX(vec, vec, origin, x);\n  }\n  if (y) {\n    vec3.rotateY(vec, vec, origin, y);\n  }\n}\n\n// Normalized vectors pointing to the center of each face.\nvar faceVectors = {};\nfor (var i = 0; i < faceList.length; i++) {\n  var face = faceList[i];\n  var rotation = faceRotation[face];\n  var v = vec3.fromValues(0, 0, -1);\n  rotateVector(v, 0, rotation.x, rotation.y);\n  faceVectors[face] = v;\n}\n\n// Map each face to its adjacent faces.\n// The order is as suggested by the front face.\nvar adjacentFace = {\n  f: ['l', 'r', 'u', 'd'],\n  b: ['r', 'l', 'u', 'd'],\n  l: ['b', 'f', 'u', 'd'],\n  r: ['f', 'b', 'u', 'd'],\n  u: ['l', 'r', 'b', 'f'],\n  d: ['l', 'r', 'f', 'b']\n};\n\n// Offsets to apply to the (x,y) coordinates of a tile to get its neighbors.\nvar neighborOffsets = [[0, 1],\n// top\n[1, 0],\n// right\n[0, -1],\n// bottom\n[-1, 0] // left\n];\n\n/**\n * @class CubeTile\n * @implements Tile\n * @classdesc\n *\n * A tile in a @{CubeGeometry}.\n */\nfunction CubeTile(face, x, y, z, geometry) {\n  this.face = face;\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this._geometry = geometry;\n  this._level = geometry.levelList[z];\n}\nCubeTile.prototype.rotX = function () {\n  return faceRotation[this.face].x;\n};\nCubeTile.prototype.rotY = function () {\n  return faceRotation[this.face].y;\n};\nCubeTile.prototype.centerX = function () {\n  return (this.x + 0.5) / this._level.numHorizontalTiles() - 0.5;\n};\nCubeTile.prototype.centerY = function () {\n  return 0.5 - (this.y + 0.5) / this._level.numVerticalTiles();\n};\nCubeTile.prototype.scaleX = function () {\n  return 1 / this._level.numHorizontalTiles();\n};\nCubeTile.prototype.scaleY = function () {\n  return 1 / this._level.numVerticalTiles();\n};\nCubeTile.prototype.vertices = function (result) {\n  if (!result) {\n    result = [vec3.create(), vec3.create(), vec3.create(), vec3.create()];\n  }\n  var rot = faceRotation[this.face];\n  function makeVertex(vec, x, y) {\n    vec3.set(vec, x, y, -0.5);\n    rotateVector(vec, 0, rot.x, rot.y);\n  }\n  var left = this.centerX() - this.scaleX() / 2;\n  var right = this.centerX() + this.scaleX() / 2;\n  var bottom = this.centerY() - this.scaleY() / 2;\n  var top = this.centerY() + this.scaleY() / 2;\n  makeVertex(result[0], left, top);\n  makeVertex(result[1], right, top);\n  makeVertex(result[2], right, bottom);\n  makeVertex(result[3], left, bottom);\n  return result;\n};\nCubeTile.prototype.parent = function () {\n  if (this.z === 0) {\n    return null;\n  }\n  var face = this.face;\n  var z = this.z;\n  var x = this.x;\n  var y = this.y;\n  var geometry = this._geometry;\n  var level = geometry.levelList[z];\n  var parentLevel = geometry.levelList[z - 1];\n  var tileX = Math.floor(x / level.numHorizontalTiles() * parentLevel.numHorizontalTiles());\n  var tileY = Math.floor(y / level.numVerticalTiles() * parentLevel.numVerticalTiles());\n  var tileZ = z - 1;\n  return new CubeTile(face, tileX, tileY, tileZ, geometry);\n};\nCubeTile.prototype.children = function (result) {\n  if (this.z === this._geometry.levelList.length - 1) {\n    return null;\n  }\n  var face = this.face;\n  var z = this.z;\n  var x = this.x;\n  var y = this.y;\n  var geometry = this._geometry;\n  var level = geometry.levelList[z];\n  var childLevel = geometry.levelList[z + 1];\n  var nHoriz = childLevel.numHorizontalTiles() / level.numHorizontalTiles();\n  var nVert = childLevel.numVerticalTiles() / level.numVerticalTiles();\n  result = result || [];\n  for (var h = 0; h < nHoriz; h++) {\n    for (var v = 0; v < nVert; v++) {\n      var tileX = nHoriz * x + h;\n      var tileY = nVert * y + v;\n      var tileZ = z + 1;\n      result.push(new CubeTile(face, tileX, tileY, tileZ, geometry));\n    }\n  }\n  return result;\n};\nCubeTile.prototype.neighbors = function () {\n  var geometry = this._geometry;\n  var cache = geometry._neighborsCache;\n\n  // Satisfy from cache when available.\n  var cachedResult = cache.get(this);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  var vec = geometry._vec;\n  var face = this.face;\n  var x = this.x;\n  var y = this.y;\n  var z = this.z;\n  var level = this._level;\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n  var result = [];\n  for (var i = 0; i < neighborOffsets.length; i++) {\n    var xOffset = neighborOffsets[i][0];\n    var yOffset = neighborOffsets[i][1];\n    var newX = x + xOffset;\n    var newY = y + yOffset;\n    var newZ = z;\n    var newFace = face;\n    if (newX < 0 || newX >= numX || newY < 0 || newY >= numY) {\n      // If the neighboring tile belongs to a different face, calculate a\n      // vector pointing to the edge between the two faces at the point the\n      // tile and its neighbor meet, and convert it into tile coordinates for\n      // the neighboring face.\n\n      var xCoord = this.centerX();\n      var yCoord = this.centerY();\n\n      // First, calculate the vector as if the initial tile belongs to the\n      // front face, so that the tile x,y coordinates map directly into the\n      // x,y axes.\n\n      if (newX < 0) {\n        vec3.set(vec, -0.5, yCoord, -0.5);\n        newFace = adjacentFace[face][0];\n      } else if (newX >= numX) {\n        vec3.set(vec, 0.5, yCoord, -0.5);\n        newFace = adjacentFace[face][1];\n      } else if (newY < 0) {\n        vec3.set(vec, xCoord, 0.5, -0.5);\n        newFace = adjacentFace[face][2];\n      } else if (newY >= numY) {\n        vec3.set(vec, xCoord, -0.5, -0.5);\n        newFace = adjacentFace[face][3];\n      }\n      var rot;\n\n      // Then, rotate the vector into the actual face the initial tile\n      // belongs to.\n\n      rot = faceRotation[face];\n      rotateVector(vec, 0, rot.x, rot.y);\n\n      // Finally, rotate the vector from the neighboring face into the front\n      // face. Again, this is so that the neighboring tile x,y coordinates\n      // map directly into the x,y axes.\n\n      rot = faceRotation[newFace];\n      rotateVector(vec, 0, -rot.x, -rot.y);\n\n      // Calculate the neighboring tile coordinates.\n\n      newX = clamp(Math.floor((0.5 + vec[0]) * numX), 0, numX - 1);\n      newY = clamp(Math.floor((0.5 - vec[1]) * numY), 0, numY - 1);\n    }\n    result.push(new CubeTile(newFace, newX, newY, newZ, geometry));\n  }\n\n  // Store into cache to satisfy future requests.\n  cache.set(this, result);\n  return result;\n};\nCubeTile.prototype.hash = function () {\n  return hash(faceList.indexOf(this.face), this.z, this.y, this.x);\n};\nCubeTile.prototype.equals = function (that) {\n  return this._geometry === that._geometry && this.face === that.face && this.z === that.z && this.y === that.y && this.x === that.x;\n};\nCubeTile.prototype.cmp = function (that) {\n  return cmp(this.z, that.z) || cmp(faceList.indexOf(this.face), faceList.indexOf(that.face)) || cmp(this.y, that.y) || cmp(this.x, that.x);\n};\nCubeTile.prototype.str = function () {\n  return 'CubeTile(' + tile.face + ', ' + tile.x + ', ' + tile.y + ', ' + tile.z + ')';\n};\nfunction CubeLevel(levelProperties) {\n  this.constructor.super_.call(this, levelProperties);\n  this._size = levelProperties.size;\n  this._tileSize = levelProperties.tileSize;\n  if (this._size % this._tileSize !== 0) {\n    throw new Error('Level size is not multiple of tile size: ' + this._size + ' ' + this._tileSize);\n  }\n}\ninherits(CubeLevel, Level);\nCubeLevel.prototype.width = function () {\n  return this._size;\n};\nCubeLevel.prototype.height = function () {\n  return this._size;\n};\nCubeLevel.prototype.tileWidth = function () {\n  return this._tileSize;\n};\nCubeLevel.prototype.tileHeight = function () {\n  return this._tileSize;\n};\nCubeLevel.prototype._validateWithParentLevel = function (parentLevel) {\n  var width = this.width();\n  var height = this.height();\n  var tileWidth = this.tileWidth();\n  var tileHeight = this.tileHeight();\n  var numHorizontal = this.numHorizontalTiles();\n  var numVertical = this.numVerticalTiles();\n  var parentWidth = parentLevel.width();\n  var parentHeight = parentLevel.height();\n  var parentTileWidth = parentLevel.tileWidth();\n  var parentTileHeight = parentLevel.tileHeight();\n  var parentNumHorizontal = parentLevel.numHorizontalTiles();\n  var parentNumVertical = parentLevel.numVerticalTiles();\n  if (width % parentWidth !== 0) {\n    throw new Error('Level width must be multiple of parent level: ' + width + ' vs. ' + parentWidth);\n  }\n  if (height % parentHeight !== 0) {\n    throw new Error('Level height must be multiple of parent level: ' + height + ' vs. ' + parentHeight);\n  }\n  if (numHorizontal % parentNumHorizontal !== 0) {\n    throw new Error('Number of horizontal tiles must be multiple of parent level: ' + numHorizontal + \" (\" + width + '/' + tileWidth + ')' + \" vs. \" + parentNumHorizontal + \" (\" + parentWidth + '/' + parentTileWidth + ')');\n  }\n  if (numVertical % parentNumVertical !== 0) {\n    throw new Error('Number of vertical tiles must be multiple of parent level: ' + numVertical + \" (\" + height + '/' + tileHeight + ')' + \" vs. \" + parentNumVertical + \" (\" + parentHeight + '/' + parentTileHeight + ')');\n  }\n};\n\n/**\n * @class CubeGeometry\n * @implements Geometry\n * @classdesc\n *\n * A {@link Geometry} implementation suitable for tiled cube images with\n * multiple resolution levels.\n *\n * The following restrictions apply:\n *   - All tiles in a level must be square and form a rectangular grid;\n *   - The size of a level must be a multiple of the tile size;\n *   - The size of a level must be a multiple of the parent level size;\n *   - The number of tiles in a level must be a multiple of the number of tiles\n *     in the parent level.\n *\n * @param {Object[]} levelPropertiesList Level description\n * @param {number} levelPropertiesList[].size Cube face size in pixels\n * @param {number} levelPropertiesList[].tileSize Tile size in pixels\n */\nfunction CubeGeometry(levelPropertiesList) {\n  if (type(levelPropertiesList) !== 'array') {\n    throw new Error('Level list must be an array');\n  }\n  this.levelList = makeLevelList(levelPropertiesList, CubeLevel);\n  this.selectableLevelList = makeSelectableLevelList(this.levelList);\n  for (var i = 1; i < this.levelList.length; i++) {\n    this.levelList[i]._validateWithParentLevel(this.levelList[i - 1]);\n  }\n  this._tileSearcher = new TileSearcher(this);\n  this._neighborsCache = new LruMap(neighborsCacheSize);\n  this._vec = vec4.create();\n  this._viewSize = {};\n}\nCubeGeometry.prototype.maxTileSize = function () {\n  var maxTileSize = 0;\n  for (var i = 0; i < this.levelList.length; i++) {\n    var level = this.levelList[i];\n    maxTileSize = Math.max(maxTileSize, level.tileWidth, level.tileHeight);\n  }\n  return maxTileSize;\n};\nCubeGeometry.prototype.levelTiles = function (level, result) {\n  var levelIndex = this.levelList.indexOf(level);\n  var maxX = level.numHorizontalTiles() - 1;\n  var maxY = level.numVerticalTiles() - 1;\n  result = result || [];\n  for (var f = 0; f < faceList.length; f++) {\n    var face = faceList[f];\n    for (var x = 0; x <= maxX; x++) {\n      for (var y = 0; y <= maxY; y++) {\n        result.push(new CubeTile(face, x, y, levelIndex, this));\n      }\n    }\n  }\n  return result;\n};\nCubeGeometry.prototype._closestTile = function (view, level) {\n  var ray = this._vec;\n\n  // Compute a view ray into the central screen point.\n  vec4.set(ray, 0, 0, 1, 1);\n  vec4.transformMat4(ray, ray, view.inverseProjection());\n  var minAngle = Infinity;\n  var closestFace = null;\n\n  // Find the face whose vector makes a minimal angle with the view ray.\n  // This is the face into which the view ray points.\n  for (var face in faceVectors) {\n    var vector = faceVectors[face];\n    // For a small angle between two normalized vectors, angle ~ 1-cos(angle).\n    var angle = 1 - vec3.dot(vector, ray);\n    if (angle < minAngle) {\n      minAngle = angle;\n      closestFace = face;\n    }\n  }\n\n  // Project view ray onto cube, i.e., normalize the coordinate with\n  // largest absolute value to ±0.5.\n  var max = Math.max(Math.abs(ray[0]), Math.abs(ray[1]), Math.abs(ray[2])) / 0.5;\n  for (var i = 0; i < 3; i++) {\n    ray[i] = ray[i] / max;\n  }\n\n  // Rotate view ray into front face.\n  var rot = faceRotation[closestFace];\n  rotateVector(ray, 0, -rot.x, -rot.y);\n\n  // Get the desired zoom level.\n  var tileZ = this.levelList.indexOf(level);\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n\n  // Find the coordinates of the tile that the view ray points into.\n  var tileX = clamp(Math.floor((0.5 + ray[0]) * numX), 0, numX - 1);\n  var tileY = clamp(Math.floor((0.5 - ray[1]) * numY), 0, numY - 1);\n  return new CubeTile(closestFace, tileX, tileY, tileZ, this);\n};\nCubeGeometry.prototype.visibleTiles = function (view, level, result) {\n  var viewSize = this._viewSize;\n  var tileSearcher = this._tileSearcher;\n  result = result || [];\n  view.size(viewSize);\n  if (viewSize.width === 0 || viewSize.height === 0) {\n    // No tiles are visible if the viewport is empty.\n    return result;\n  }\n  var startingTile = this._closestTile(view, level);\n  var count = tileSearcher.search(view, startingTile, result);\n  if (!count) {\n    throw new Error('Starting tile is not visible');\n  }\n  return result;\n};\nCubeGeometry.Tile = CubeGeometry.prototype.Tile = CubeTile;\nCubeGeometry.type = CubeGeometry.prototype.type = 'cube';\nCubeTile.type = CubeTile.prototype.type = 'cube';\nmodule.exports = CubeGeometry;","map":{"version":3,"names":["inherits","require","hash","TileSearcher","LruMap","Level","makeLevelList","makeSelectableLevelList","clamp","cmp","type","vec3","vec4","neighborsCacheSize","faceList","faceRotation","f","x","y","b","Math","PI","l","r","u","d","origin","create","rotateVector","vec","z","rotateZ","rotateX","rotateY","faceVectors","i","length","face","rotation","v","fromValues","adjacentFace","neighborOffsets","CubeTile","geometry","_geometry","_level","levelList","prototype","rotX","rotY","centerX","numHorizontalTiles","centerY","numVerticalTiles","scaleX","scaleY","vertices","result","rot","makeVertex","set","left","right","bottom","top","parent","level","parentLevel","tileX","floor","tileY","tileZ","children","childLevel","nHoriz","nVert","h","push","neighbors","cache","_neighborsCache","cachedResult","get","_vec","numX","numY","xOffset","yOffset","newX","newY","newZ","newFace","xCoord","yCoord","indexOf","equals","that","str","tile","CubeLevel","levelProperties","constructor","super_","call","_size","size","_tileSize","tileSize","Error","width","height","tileWidth","tileHeight","_validateWithParentLevel","numHorizontal","numVertical","parentWidth","parentHeight","parentTileWidth","parentTileHeight","parentNumHorizontal","parentNumVertical","CubeGeometry","levelPropertiesList","selectableLevelList","_tileSearcher","_viewSize","maxTileSize","max","levelTiles","levelIndex","maxX","maxY","_closestTile","view","ray","transformMat4","inverseProjection","minAngle","Infinity","closestFace","vector","angle","dot","abs","visibleTiles","viewSize","tileSearcher","startingTile","count","search","Tile","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/geometries/Cube.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar inherits = require('../util/inherits');\nvar hash = require('../util/hash');\nvar TileSearcher = require('../TileSearcher');\nvar LruMap = require('../collections/LruMap');\nvar Level = require('./Level');\nvar makeLevelList = require('./common').makeLevelList;\nvar makeSelectableLevelList = require('./common').makeSelectableLevelList;\nvar clamp = require('../util/clamp');\nvar cmp = require('../util/cmp');\nvar type = require('../util/type');\nvar vec3 = require('gl-matrix').vec3;\nvar vec4 = require('gl-matrix').vec4;\n\nvar neighborsCacheSize = 64;\n\n// Initials for cube faces.\nvar faceList = 'fudlrb';\n\n// Rotation of each face, relative to the front face.\nvar faceRotation = {\n  f: { x: 0, y: 0 },\n  b: { x: 0, y: Math.PI },\n  l: { x: 0, y: Math.PI/2 },\n  r: { x: 0, y: -Math.PI/2 },\n  u: { x: Math.PI/2, y: 0 },\n  d: { x: -Math.PI/2, y: 0 }\n};\n\n// Zero vector.\nvar origin = vec3.create();\n\n// Rotate a vector in ZXY order.\nfunction rotateVector(vec, z, x, y) {\n  if (z) {\n    vec3.rotateZ(vec, vec, origin, z);\n  }\n  if (x) {\n    vec3.rotateX(vec, vec, origin, x);\n  }\n  if (y) {\n    vec3.rotateY(vec, vec, origin, y);\n  }\n}\n\n// Normalized vectors pointing to the center of each face.\nvar faceVectors = {};\nfor (var i = 0; i < faceList.length; i++) {\n  var face = faceList[i];\n  var rotation = faceRotation[face];\n  var v = vec3.fromValues(0,  0, -1);\n  rotateVector(v, 0, rotation.x, rotation.y);\n  faceVectors[face] = v;\n}\n\n// Map each face to its adjacent faces.\n// The order is as suggested by the front face.\nvar adjacentFace = {\n  f: [ 'l', 'r', 'u', 'd' ],\n  b: [ 'r', 'l', 'u', 'd' ],\n  l: [ 'b', 'f', 'u', 'd' ],\n  r: [ 'f', 'b', 'u', 'd' ],\n  u: [ 'l', 'r', 'b', 'f' ],\n  d: [ 'l', 'r', 'f', 'b' ]\n};\n\n// Offsets to apply to the (x,y) coordinates of a tile to get its neighbors.\nvar neighborOffsets = [\n  [  0,  1 ], // top\n  [  1,  0 ], // right\n  [  0, -1 ], // bottom\n  [ -1,  0 ]  // left\n];\n\n\n/**\n * @class CubeTile\n * @implements Tile\n * @classdesc\n *\n * A tile in a @{CubeGeometry}.\n */\nfunction CubeTile(face, x, y, z, geometry) {\n  this.face = face;\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  this._geometry = geometry;\n  this._level = geometry.levelList[z];\n}\n\n\nCubeTile.prototype.rotX = function() {\n  return faceRotation[this.face].x;\n};\n\n\nCubeTile.prototype.rotY = function() {\n  return faceRotation[this.face].y;\n};\n\n\nCubeTile.prototype.centerX = function() {\n  return (this.x + 0.5) / this._level.numHorizontalTiles() - 0.5;\n};\n\n\nCubeTile.prototype.centerY = function() {\n  return 0.5 - (this.y + 0.5) / this._level.numVerticalTiles();\n};\n\n\nCubeTile.prototype.scaleX = function() {\n  return 1 / this._level.numHorizontalTiles();\n};\n\n\nCubeTile.prototype.scaleY = function() {\n  return 1 / this._level.numVerticalTiles();\n};\n\n\nCubeTile.prototype.vertices = function(result) {\n  if (!result) {\n    result = [vec3.create(), vec3.create(), vec3.create(), vec3.create()];\n  }\n\n  var rot = faceRotation[this.face];\n\n  function makeVertex(vec, x, y) {\n    vec3.set(vec, x, y, -0.5);\n    rotateVector(vec, 0, rot.x, rot.y);\n  }\n\n  var left = this.centerX() - this.scaleX() / 2;\n  var right = this.centerX() + this.scaleX() / 2;\n  var bottom = this.centerY() - this.scaleY() / 2;\n  var top = this.centerY() + this.scaleY() / 2;\n\n  makeVertex(result[0], left, top);\n  makeVertex(result[1], right, top);\n  makeVertex(result[2], right, bottom);\n  makeVertex(result[3], left, bottom);\n\n  return result;\n};\n\n\nCubeTile.prototype.parent = function() {\n\n  if (this.z === 0) {\n    return null;\n  }\n\n  var face = this.face;\n  var z = this.z;\n  var x = this.x;\n  var y = this.y;\n\n  var geometry = this._geometry;\n  var level = geometry.levelList[z];\n  var parentLevel = geometry.levelList[z-1];\n\n  var tileX = Math.floor(x / level.numHorizontalTiles() * parentLevel.numHorizontalTiles());\n  var tileY = Math.floor(y / level.numVerticalTiles() * parentLevel.numVerticalTiles());\n  var tileZ = z-1;\n\n  return new CubeTile(face, tileX, tileY, tileZ, geometry);\n\n};\n\n\nCubeTile.prototype.children = function(result) {\n\n  if (this.z === this._geometry.levelList.length - 1) {\n    return null;\n  }\n\n  var face = this.face;\n  var z = this.z;\n  var x = this.x;\n  var y = this.y;\n\n  var geometry = this._geometry;\n  var level = geometry.levelList[z];\n  var childLevel = geometry.levelList[z+1];\n\n  var nHoriz = childLevel.numHorizontalTiles() / level.numHorizontalTiles();\n  var nVert = childLevel.numVerticalTiles() / level.numVerticalTiles();\n\n  result = result || [];\n\n  for (var h = 0; h < nHoriz; h++) {\n    for (var v = 0; v < nVert; v++) {\n      var tileX = nHoriz * x + h;\n      var tileY = nVert * y + v;\n      var tileZ = z+1;\n      result.push(new CubeTile(face, tileX, tileY, tileZ, geometry));\n    }\n  }\n\n  return result;\n\n};\n\n\nCubeTile.prototype.neighbors = function() {\n\n  var geometry = this._geometry;\n  var cache = geometry._neighborsCache;\n\n  // Satisfy from cache when available.\n  var cachedResult = cache.get(this);\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  var vec = geometry._vec;\n\n  var face = this.face;\n  var x = this.x;\n  var y = this.y;\n  var z = this.z;\n  var level = this._level;\n\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n\n  var result = [];\n\n  for (var i = 0; i < neighborOffsets.length; i++) {\n    var xOffset = neighborOffsets[i][0];\n    var yOffset = neighborOffsets[i][1];\n\n    var newX = x + xOffset;\n    var newY = y + yOffset;\n    var newZ = z;\n    var newFace = face;\n\n    if (newX < 0 || newX >= numX || newY < 0 || newY >= numY) {\n\n      // If the neighboring tile belongs to a different face, calculate a\n      // vector pointing to the edge between the two faces at the point the\n      // tile and its neighbor meet, and convert it into tile coordinates for\n      // the neighboring face.\n\n      var xCoord = this.centerX();\n      var yCoord = this.centerY();\n\n      // First, calculate the vector as if the initial tile belongs to the\n      // front face, so that the tile x,y coordinates map directly into the\n      // x,y axes.\n\n      if (newX < 0) {\n        vec3.set(vec, -0.5, yCoord, -0.5);\n        newFace = adjacentFace[face][0];\n      } else if (newX >= numX) {\n        vec3.set(vec, 0.5, yCoord, -0.5);\n        newFace = adjacentFace[face][1];\n      } else if (newY < 0) {\n        vec3.set(vec, xCoord, 0.5, -0.5);\n        newFace = adjacentFace[face][2];\n      } else if (newY >= numY) {\n        vec3.set(vec, xCoord, -0.5, -0.5);\n        newFace = adjacentFace[face][3];\n      }\n\n      var rot;\n\n      // Then, rotate the vector into the actual face the initial tile\n      // belongs to.\n\n      rot = faceRotation[face];\n      rotateVector(vec, 0, rot.x, rot.y);\n\n      // Finally, rotate the vector from the neighboring face into the front\n      // face. Again, this is so that the neighboring tile x,y coordinates\n      // map directly into the x,y axes.\n\n      rot = faceRotation[newFace];\n      rotateVector(vec, 0, -rot.x, -rot.y);\n\n      // Calculate the neighboring tile coordinates.\n\n      newX = clamp(Math.floor((0.5 + vec[0]) * numX), 0, numX - 1);\n      newY = clamp(Math.floor((0.5 - vec[1]) * numY), 0, numY - 1);\n    }\n\n    result.push(new CubeTile(newFace, newX, newY, newZ, geometry));\n  }\n\n  // Store into cache to satisfy future requests.\n  cache.set(this, result);\n\n  return result;\n\n};\n\n\nCubeTile.prototype.hash = function() {\n  return hash(faceList.indexOf(this.face), this.z, this.y, this.x);\n};\n\n\nCubeTile.prototype.equals = function(that) {\n  return (this._geometry === that._geometry &&\n      this.face === that.face &&\n      this.z === that.z &&\n      this.y === that.y &&\n      this.x === that.x);\n};\n\n\nCubeTile.prototype.cmp = function(that) {\n  return (cmp(this.z, that.z) ||\n  cmp(faceList.indexOf(this.face), faceList.indexOf(that.face)) ||\n  cmp(this.y, that.y) || cmp(this.x, that.x));\n};\n\n\nCubeTile.prototype.str = function() {\n  return 'CubeTile(' + tile.face + ', ' + tile.x + ', ' + tile.y + ', ' + tile.z + ')';\n};\n\n\nfunction CubeLevel(levelProperties) {\n  this.constructor.super_.call(this, levelProperties);\n\n  this._size = levelProperties.size;\n  this._tileSize = levelProperties.tileSize;\n\n  if (this._size % this._tileSize !== 0) {\n    throw new Error('Level size is not multiple of tile size: ' +\n                    this._size + ' ' + this._tileSize);\n  }\n}\n\ninherits(CubeLevel, Level);\n\n\nCubeLevel.prototype.width = function() {\n  return this._size;\n};\n\n\nCubeLevel.prototype.height = function() {\n  return this._size;\n};\n\n\nCubeLevel.prototype.tileWidth = function() {\n  return this._tileSize;\n};\n\n\nCubeLevel.prototype.tileHeight = function() {\n  return this._tileSize;\n};\n\n\nCubeLevel.prototype._validateWithParentLevel = function(parentLevel) {\n\n  var width = this.width();\n  var height = this.height();\n  var tileWidth = this.tileWidth();\n  var tileHeight = this.tileHeight();\n  var numHorizontal = this.numHorizontalTiles();\n  var numVertical = this.numVerticalTiles();\n\n  var parentWidth = parentLevel.width();\n  var parentHeight = parentLevel.height();\n  var parentTileWidth = parentLevel.tileWidth();\n  var parentTileHeight = parentLevel.tileHeight();\n  var parentNumHorizontal = parentLevel.numHorizontalTiles();\n  var parentNumVertical = parentLevel.numVerticalTiles();\n\n  if (width % parentWidth !== 0) {\n    throw new Error('Level width must be multiple of parent level: ' +\n                    width + ' vs. ' + parentWidth);\n  }\n\n  if (height % parentHeight !== 0) {\n    throw new Error('Level height must be multiple of parent level: ' +\n                    height + ' vs. ' + parentHeight);\n  }\n\n  if (numHorizontal % parentNumHorizontal !== 0) {\n    throw new Error('Number of horizontal tiles must be multiple of parent level: ' +\n      numHorizontal + \" (\" + width + '/' + tileWidth + ')' + \" vs. \" +\n      parentNumHorizontal + \" (\" + parentWidth + '/' + parentTileWidth + ')');\n  }\n\n  if (numVertical % parentNumVertical !== 0) {\n    throw new Error('Number of vertical tiles must be multiple of parent level: ' +\n      numVertical + \" (\" + height + '/' + tileHeight + ')' + \" vs. \" +\n      parentNumVertical + \" (\" + parentHeight + '/' + parentTileHeight + ')');\n  }\n\n};\n\n\n/**\n * @class CubeGeometry\n * @implements Geometry\n * @classdesc\n *\n * A {@link Geometry} implementation suitable for tiled cube images with\n * multiple resolution levels.\n *\n * The following restrictions apply:\n *   - All tiles in a level must be square and form a rectangular grid;\n *   - The size of a level must be a multiple of the tile size;\n *   - The size of a level must be a multiple of the parent level size;\n *   - The number of tiles in a level must be a multiple of the number of tiles\n *     in the parent level.\n *\n * @param {Object[]} levelPropertiesList Level description\n * @param {number} levelPropertiesList[].size Cube face size in pixels\n * @param {number} levelPropertiesList[].tileSize Tile size in pixels\n */\nfunction CubeGeometry(levelPropertiesList) {\n  if (type(levelPropertiesList) !== 'array') {\n    throw new Error('Level list must be an array');\n  }\n\n  this.levelList = makeLevelList(levelPropertiesList, CubeLevel);\n  this.selectableLevelList = makeSelectableLevelList(this.levelList);\n\n  for (var i = 1; i < this.levelList.length; i++) {\n    this.levelList[i]._validateWithParentLevel(this.levelList[i-1]);\n  }\n\n  this._tileSearcher = new TileSearcher(this);\n\n  this._neighborsCache = new LruMap(neighborsCacheSize);\n\n  this._vec = vec4.create();\n\n  this._viewSize = {};\n}\n\n\nCubeGeometry.prototype.maxTileSize = function() {\n  var maxTileSize = 0;\n  for (var i = 0; i < this.levelList.length; i++) {\n    var level = this.levelList[i];\n    maxTileSize = Math.max(maxTileSize, level.tileWidth, level.tileHeight);\n  }\n  return maxTileSize;\n};\n\n\nCubeGeometry.prototype.levelTiles = function(level, result) {\n\n  var levelIndex = this.levelList.indexOf(level);\n  var maxX = level.numHorizontalTiles() - 1;\n  var maxY = level.numVerticalTiles() - 1;\n\n  result = result || [];\n\n  for (var f = 0; f < faceList.length; f++) {\n    var face = faceList[f];\n    for (var x = 0; x <= maxX; x++) {\n      for (var y = 0; y <= maxY; y++) {\n        result.push(new CubeTile(face, x, y, levelIndex, this));\n      }\n    }\n  }\n\n  return result;\n\n};\n\n\nCubeGeometry.prototype._closestTile = function(view, level) {\n  var ray = this._vec;\n\n  // Compute a view ray into the central screen point.\n  vec4.set(ray, 0, 0, 1, 1);\n  vec4.transformMat4(ray, ray, view.inverseProjection());\n\n  var minAngle = Infinity;\n  var closestFace = null;\n\n  // Find the face whose vector makes a minimal angle with the view ray.\n  // This is the face into which the view ray points.\n  for (var face in faceVectors) {\n    var vector = faceVectors[face];\n    // For a small angle between two normalized vectors, angle ~ 1-cos(angle).\n    var angle = 1 - vec3.dot(vector, ray);\n    if (angle < minAngle) {\n      minAngle = angle;\n      closestFace = face;\n    }\n  }\n\n  // Project view ray onto cube, i.e., normalize the coordinate with\n  // largest absolute value to ±0.5.\n  var max = Math.max(Math.abs(ray[0]), Math.abs(ray[1]), Math.abs(ray[2])) / 0.5;\n  for (var i = 0; i < 3; i++) {\n    ray[i] = ray[i] / max;\n  }\n\n  // Rotate view ray into front face.\n  var rot = faceRotation[closestFace];\n  rotateVector(ray, 0, -rot.x, -rot.y);\n\n  // Get the desired zoom level.\n  var tileZ = this.levelList.indexOf(level);\n  var numX = level.numHorizontalTiles();\n  var numY = level.numVerticalTiles();\n\n  // Find the coordinates of the tile that the view ray points into.\n  var tileX = clamp(Math.floor((0.5 + ray[0]) * numX), 0, numX - 1);\n  var tileY = clamp(Math.floor((0.5 - ray[1]) * numY), 0, numY - 1);\n\n  return new CubeTile(closestFace, tileX, tileY, tileZ, this);\n};\n\n\nCubeGeometry.prototype.visibleTiles = function(view, level, result) {\n  var viewSize = this._viewSize;\n  var tileSearcher = this._tileSearcher;\n\n  result = result || [];\n\n  view.size(viewSize);\n  if (viewSize.width === 0 || viewSize.height === 0) {\n    // No tiles are visible if the viewport is empty.\n    return result;\n  }\n\n  var startingTile = this._closestTile(view, level);\n  var count = tileSearcher.search(view, startingTile, result);\n  if (!count) {\n    throw new Error('Starting tile is not visible');\n  }\n\n  return result;\n};\n\n\nCubeGeometry.Tile = CubeGeometry.prototype.Tile = CubeTile;\nCubeGeometry.type = CubeGeometry.prototype.type = 'cube';\nCubeTile.type = CubeTile.prototype.type = 'cube';\n\n\nmodule.exports = CubeGeometry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}