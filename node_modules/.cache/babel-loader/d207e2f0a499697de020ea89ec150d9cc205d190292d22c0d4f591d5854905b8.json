{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar mod = require('../util/mod');\n\n// An LruMap holds up to a maximum number of key-value pairs, ordered by their\n// time of insertion. When the addition of a key-value pair would cause the\n// capacity to be exceeded, the oldest key-value pair in the set is evicted.\n// As a special case, an LruMap with zero capacity always rejects the insertion\n// of a key-value pair.\n//\n// Keys must implement hash() and equals(). Note that the implementation doesn't\n// currently use hash(), but a future version might.\nfunction LruMap(capacity) {\n  if (!isFinite(capacity) || Math.floor(capacity) !== capacity || capacity < 0) {\n    throw new Error('LruMap: invalid capacity');\n  }\n  this._capacity = capacity;\n\n  // Keys and values are stored in circular arrays ordered by decreasing age.\n  // Start is the index of the oldest key/value and size is the number of valid\n  // key/values; the region containing valid keys/values may wrap around.\n  this._keys = new Array(this._capacity);\n  this._values = new Array(this._capacity);\n  this._start = 0;\n  this._size = 0;\n}\nLruMap.prototype._index = function (i) {\n  return mod(this._start + i, this._capacity);\n};\n\n// Returns the value associated to the specified key, or null if not found.\nLruMap.prototype.get = function (key) {\n  for (var i = 0; i < this._size; i++) {\n    var existingKey = this._keys[this._index(i)];\n    if (key.equals(existingKey)) {\n      return this._values[this._index(i)];\n    }\n  }\n  return null;\n};\n\n// Associates the specified value with the specified key, possibly replacing the\n// currently associated value. The key-value pair becomes the newest. If the map\n// is at capacity, the oldest key-value pair is removed. Returns the removed\n// key, or null otherwise. If the capacity is zero, does nothing and returns\n// the key.\nLruMap.prototype.set = function (key, value) {\n  if (this._capacity === 0) {\n    return key;\n  }\n  this.del(key);\n  var evictedKey = this._size === this._capacity ? this._keys[this._index(0)] : null;\n  this._keys[this._index(this._size)] = key;\n  this._values[this._index(this._size)] = value;\n  if (this._size < this._capacity) {\n    this._size++;\n  } else {\n    this._start = this._index(1);\n  }\n  return evictedKey;\n};\n\n// Removes the key-value pair associated with the specified key.\n// Returns the removed value, or null if not found.\nLruMap.prototype.del = function (key) {\n  for (var i = 0; i < this._size; i++) {\n    if (key.equals(this._keys[this._index(i)])) {\n      var existingValue = this._values[this._index(i)];\n      for (var j = i; j < this._size - 1; j++) {\n        this._keys[this._index(j)] = this._keys[this._index(j + 1)];\n        this._values[this._index(j)] = this._values[this._index(j + 1)];\n      }\n      this._size--;\n      return existingValue;\n    }\n  }\n  return null;\n};\n\n// Returns whether there is a value associated with the specified key.\nLruMap.prototype.has = function (key) {\n  for (var i = 0; i < this._size; i++) {\n    if (key.equals(this._keys[this._index(i)])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Returns the number of key-value pairs in the map.\nLruMap.prototype.size = function () {\n  return this._size;\n};\n\n// Removes all key-value pairs from the map.\nLruMap.prototype.clear = function () {\n  this._keys.length = 0;\n  this._values.length = 0;\n  this._start = 0;\n  this._size = 0;\n};\n\n// Calls fn(key, value) for each item in the map, in an unspecified order.\n// Returns the number of times fn was called.\n// The result is unspecified if the map is mutated during iteration.\nLruMap.prototype.forEach = function (fn) {\n  var count = 0;\n  for (var i = 0; i < this._size; i++) {\n    fn(this._keys[this._index(i)], this._values[this._index(i)]);\n    count += 1;\n  }\n  return count;\n};\nmodule.exports = LruMap;","map":{"version":3,"names":["mod","require","LruMap","capacity","isFinite","Math","floor","Error","_capacity","_keys","Array","_values","_start","_size","prototype","_index","i","get","key","existingKey","equals","set","value","del","evictedKey","existingValue","j","has","size","clear","length","forEach","fn","count","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/collections/LruMap.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar mod = require('../util/mod');\n\n// An LruMap holds up to a maximum number of key-value pairs, ordered by their\n// time of insertion. When the addition of a key-value pair would cause the\n// capacity to be exceeded, the oldest key-value pair in the set is evicted.\n// As a special case, an LruMap with zero capacity always rejects the insertion\n// of a key-value pair.\n//\n// Keys must implement hash() and equals(). Note that the implementation doesn't\n// currently use hash(), but a future version might.\nfunction LruMap(capacity) {\n  if (!isFinite(capacity) || Math.floor(capacity) !== capacity || capacity < 0) {\n    throw new Error('LruMap: invalid capacity');\n  }\n  this._capacity = capacity;\n\n  // Keys and values are stored in circular arrays ordered by decreasing age.\n  // Start is the index of the oldest key/value and size is the number of valid\n  // key/values; the region containing valid keys/values may wrap around.\n  this._keys = new Array(this._capacity);\n  this._values = new Array(this._capacity);\n  this._start = 0;\n  this._size = 0;\n}\n\nLruMap.prototype._index = function(i) {\n  return mod(this._start + i, this._capacity);\n};\n\n// Returns the value associated to the specified key, or null if not found.\nLruMap.prototype.get = function(key) {\n  for (var i = 0; i < this._size; i++) {\n    var existingKey = this._keys[this._index(i)];\n    if (key.equals(existingKey)) {\n      return this._values[this._index(i)];\n    }\n  }\n  return null;\n};\n\n// Associates the specified value with the specified key, possibly replacing the\n// currently associated value. The key-value pair becomes the newest. If the map\n// is at capacity, the oldest key-value pair is removed. Returns the removed\n// key, or null otherwise. If the capacity is zero, does nothing and returns\n// the key.\nLruMap.prototype.set = function(key, value) {\n  if (this._capacity === 0) {\n    return key;\n  }\n  this.del(key);\n  var evictedKey =\n      this._size === this._capacity ? this._keys[this._index(0)] : null;\n  this._keys[this._index(this._size)] = key;\n  this._values[this._index(this._size)] = value;\n  if (this._size < this._capacity) {\n    this._size++;\n  } else {\n    this._start = this._index(1);\n  }\n  return evictedKey;\n};\n\n// Removes the key-value pair associated with the specified key.\n// Returns the removed value, or null if not found.\nLruMap.prototype.del = function(key) {\n  for (var i = 0; i < this._size; i++) {\n    if (key.equals(this._keys[this._index(i)])) {\n      var existingValue = this._values[this._index(i)];\n      for (var j = i; j < this._size - 1; j++) {\n        this._keys[this._index(j)] = this._keys[this._index(j + 1)];\n        this._values[this._index(j)] = this._values[this._index(j + 1)];\n      }\n      this._size--;\n      return existingValue;\n    }\n  }\n  return null;\n};\n\n// Returns whether there is a value associated with the specified key.\nLruMap.prototype.has = function(key) {\n  for (var i = 0; i < this._size; i++) {\n    if (key.equals(this._keys[this._index(i)])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Returns the number of key-value pairs in the map.\nLruMap.prototype.size = function() {\n  return this._size;\n};\n\n// Removes all key-value pairs from the map.\nLruMap.prototype.clear = function() {\n  this._keys.length = 0;\n  this._values.length = 0;\n  this._start = 0;\n  this._size = 0;\n};\n\n// Calls fn(key, value) for each item in the map, in an unspecified order.\n// Returns the number of times fn was called.\n// The result is unspecified if the map is mutated during iteration.\nLruMap.prototype.forEach = function(fn) {\n  var count = 0;\n  for (var i = 0; i < this._size; i++) {\n    fn(this._keys[this._index(i)], this._values[this._index(i)]);\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = LruMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}