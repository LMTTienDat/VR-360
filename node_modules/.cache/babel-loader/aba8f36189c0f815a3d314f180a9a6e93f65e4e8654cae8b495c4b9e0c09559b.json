{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar StaticAsset = require('../assets/Static');\nvar NetworkError = require('../NetworkError');\nvar browser = require('bowser');\nvar global = require('../util/global');\nvar once = require('../util/once');\n\n// TODO: Move the load queue into the loader.\n\n// Whether to use createImageBitmap instead of a canvas for cropping.\n// See https://caniuse.com/?search=createimagebitmap\nvar useCreateImageBitmap = !!global.createImageBitmap && !browser.firefox;\n\n// Options for createImageBitmap.\nvar createImageBitmapOpts = {\n  imageOrientation: 'flipY',\n  premultiplyAlpha: 'premultiply'\n};\n\n/**\n * @class HtmlImageLoader\n * @implements ImageLoader\n * @classdesc\n *\n * A {@link Loader} for HTML images.\n *\n * @param {Stage} stage The stage which is going to request images to be loaded.\n */\nfunction HtmlImageLoader(stage) {\n  this._stage = stage;\n}\n\n/**\n * Loads an {@link Asset} from an image.\n * @param {string} url The image URL.\n * @param {?Rect} rect A {@link Rect} describing a portion of the image, or null\n *     to use the full image.\n * @param {function(?Error, Asset)} done The callback.\n * @return {function()} A function to cancel loading.\n */\nHtmlImageLoader.prototype.loadImage = function (url, rect, done) {\n  var self = this;\n  var img = new Image();\n\n  // Allow cross-domain image loading.\n  // This is required to be able to create WebGL textures from images fetched\n  // from a different domain. Note that setting the crossorigin attribute to\n  // 'anonymous' will trigger a CORS preflight for cross-domain requests, but no\n  // credentials (cookies or HTTP auth) will be sent; to do so, the attribute\n  // would have to be set to 'use-credentials' instead. Unfortunately, this is\n  // not a safe choice, as it causes requests to fail when the response contains\n  // an Access-Control-Allow-Origin header with a wildcard. See the section\n  // \"Credentialed requests and wildcards\" on:\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n  img.crossOrigin = 'anonymous';\n  var x = rect && rect.x || 0;\n  var y = rect && rect.y || 0;\n  var width = rect && rect.width || 1;\n  var height = rect && rect.height || 1;\n  done = once(done);\n  img.onload = function () {\n    self._handleLoad(img, x, y, width, height, done);\n  };\n  img.onerror = function () {\n    self._handleError(url, done);\n  };\n  img.src = url;\n  function cancel() {\n    img.onload = img.onerror = null;\n    img.src = '';\n    done.apply(null, arguments);\n  }\n  return cancel;\n};\nHtmlImageLoader.prototype._handleLoad = function (img, x, y, width, height, done) {\n  if (x === 0 && y === 0 && width === 1 && height === 1) {\n    // Fast path for when cropping is not needed.\n    done(null, new StaticAsset(img));\n    return;\n  }\n  x *= img.naturalWidth;\n  y *= img.naturalHeight;\n  width *= img.naturalWidth;\n  height *= img.naturalHeight;\n  if (useCreateImageBitmap) {\n    // Prefer to crop using createImageBitmap, which can potentially offload\n    // work to another thread and avoid blocking the user interface.\n    // Assume that the promise is never rejected.\n    global.createImageBitmap(img, x, y, width, height, createImageBitmapOpts).then(function (bitmap) {\n      done(null, new StaticAsset(bitmap));\n    });\n  } else {\n    // Fall back to cropping using a canvas, which can potentially block the\n    // user interface, but is the best we can do.\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var context = canvas.getContext('2d');\n    context.drawImage(img, x, y, width, height, 0, 0, width, height);\n    done(null, new StaticAsset(canvas));\n  }\n};\nHtmlImageLoader.prototype._handleError = function (url, done) {\n  // TODO: is there any way to distinguish a network error from other\n  // kinds of errors? For now we always return NetworkError since this\n  // prevents images to be retried continuously while we are offline.\n  done(new NetworkError('Network error: ' + url));\n};\nmodule.exports = HtmlImageLoader;","map":{"version":3,"names":["StaticAsset","require","NetworkError","browser","global","once","useCreateImageBitmap","createImageBitmap","firefox","createImageBitmapOpts","imageOrientation","premultiplyAlpha","HtmlImageLoader","stage","_stage","prototype","loadImage","url","rect","done","self","img","Image","crossOrigin","x","y","width","height","onload","_handleLoad","onerror","_handleError","src","cancel","apply","arguments","naturalWidth","naturalHeight","then","bitmap","canvas","document","createElement","context","getContext","drawImage","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/loaders/HtmlImage.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar StaticAsset = require('../assets/Static');\nvar NetworkError = require('../NetworkError');\nvar browser = require('bowser');\nvar global = require('../util/global');\nvar once = require('../util/once');\n\n// TODO: Move the load queue into the loader.\n\n// Whether to use createImageBitmap instead of a canvas for cropping.\n// See https://caniuse.com/?search=createimagebitmap\nvar useCreateImageBitmap = !!global.createImageBitmap && !browser.firefox;\n\n// Options for createImageBitmap.\nvar createImageBitmapOpts = {\n  imageOrientation: 'flipY',\n  premultiplyAlpha: 'premultiply'\n};\n\n/**\n * @class HtmlImageLoader\n * @implements ImageLoader\n * @classdesc\n *\n * A {@link Loader} for HTML images.\n *\n * @param {Stage} stage The stage which is going to request images to be loaded.\n */\nfunction HtmlImageLoader(stage) {\n  this._stage = stage;\n}\n\n/**\n * Loads an {@link Asset} from an image.\n * @param {string} url The image URL.\n * @param {?Rect} rect A {@link Rect} describing a portion of the image, or null\n *     to use the full image.\n * @param {function(?Error, Asset)} done The callback.\n * @return {function()} A function to cancel loading.\n */\nHtmlImageLoader.prototype.loadImage = function(url, rect, done) {\n  var self = this;\n\n  var img = new Image();\n\n  // Allow cross-domain image loading.\n  // This is required to be able to create WebGL textures from images fetched\n  // from a different domain. Note that setting the crossorigin attribute to\n  // 'anonymous' will trigger a CORS preflight for cross-domain requests, but no\n  // credentials (cookies or HTTP auth) will be sent; to do so, the attribute\n  // would have to be set to 'use-credentials' instead. Unfortunately, this is\n  // not a safe choice, as it causes requests to fail when the response contains\n  // an Access-Control-Allow-Origin header with a wildcard. See the section\n  // \"Credentialed requests and wildcards\" on:\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n  img.crossOrigin = 'anonymous';\n\n  var x = rect && rect.x || 0;\n  var y = rect && rect.y || 0;\n  var width = rect && rect.width || 1;\n  var height = rect && rect.height || 1;\n\n  done = once(done);\n\n  img.onload = function() {\n    self._handleLoad(img, x, y, width, height, done);\n  };\n\n  img.onerror = function() {\n    self._handleError(url, done);\n  };\n\n  img.src = url;\n\n  function cancel() {\n    img.onload = img.onerror = null;\n    img.src = '';\n    done.apply(null, arguments);\n  }\n\n  return cancel;\n};\n\nHtmlImageLoader.prototype._handleLoad = function(img, x, y, width, height, done) {\n  if (x === 0 && y === 0 && width === 1 && height === 1) {\n    // Fast path for when cropping is not needed.\n    done(null, new StaticAsset(img));\n    return;\n  }\n\n  x *= img.naturalWidth;\n  y *= img.naturalHeight;\n  width *= img.naturalWidth;\n  height *= img.naturalHeight;\n\n  if (useCreateImageBitmap) {\n    // Prefer to crop using createImageBitmap, which can potentially offload\n    // work to another thread and avoid blocking the user interface.\n    // Assume that the promise is never rejected.\n    global.createImageBitmap(img, x, y, width, height, createImageBitmapOpts)\n      .then(function(bitmap) {\n        done(null, new StaticAsset(bitmap));\n      });\n  } else {\n    // Fall back to cropping using a canvas, which can potentially block the\n    // user interface, but is the best we can do.\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var context = canvas.getContext('2d');\n    context.drawImage(img, x, y, width, height, 0, 0, width, height);\n    done(null, new StaticAsset(canvas));\n  }\n};\n\nHtmlImageLoader.prototype._handleError = function(url, done) {\n  // TODO: is there any way to distinguish a network error from other\n  // kinds of errors? For now we always return NetworkError since this\n  // prevents images to be retried continuously while we are offline.\n  done(new NetworkError('Network error: ' + url));\n};\n\nmodule.exports = HtmlImageLoader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}