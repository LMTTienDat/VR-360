{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar Dynamics = require('./Dynamics');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n/**\n * @class VelocityControlMethod\n * @implements ControlMethod\n * @classdesc\n *\n * Sets the velocity and friction of a single parameter.\n *\n * The user should emit 'active' and 'inactive' events if required.\n *\n * @param {String} parameter The parameter to be controlled (e.g. `x`, `y` or `zoom`)\n*/\nfunction VelocityControlMethod(parameter) {\n  if (!parameter) {\n    throw new Error(\"VelocityControlMethod: parameter must be defined\");\n  }\n  this._parameter = parameter;\n  this._dynamics = new Dynamics();\n}\neventEmitter(VelocityControlMethod);\n\n/**\n * Destructor.\n */\nVelocityControlMethod.prototype.destroy = function () {\n  clearOwnProperties(this);\n};\n\n/**\n * Set the parameter's velocity.\n * @param {Number} velocity\n */\nVelocityControlMethod.prototype.setVelocity = function (velocity) {\n  this._dynamics.velocity = velocity;\n  this.emit('parameterDynamics', this._parameter, this._dynamics);\n};\n\n/**\n * Set the parameter's friction.\n * @param {Number} friction\n */\nVelocityControlMethod.prototype.setFriction = function (friction) {\n  this._dynamics.friction = friction;\n  this.emit('parameterDynamics', this._parameter, this._dynamics);\n};\nmodule.exports = VelocityControlMethod;","map":{"version":3,"names":["eventEmitter","require","Dynamics","clearOwnProperties","VelocityControlMethod","parameter","Error","_parameter","_dynamics","prototype","destroy","setVelocity","velocity","emit","setFriction","friction","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/controls/Velocity.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar Dynamics = require('./Dynamics');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n/**\n * @class VelocityControlMethod\n * @implements ControlMethod\n * @classdesc\n *\n * Sets the velocity and friction of a single parameter.\n *\n * The user should emit 'active' and 'inactive' events if required.\n *\n * @param {String} parameter The parameter to be controlled (e.g. `x`, `y` or `zoom`)\n*/\nfunction VelocityControlMethod(parameter) {\n  if(!parameter) {\n    throw new Error(\"VelocityControlMethod: parameter must be defined\");\n  }\n\n  this._parameter = parameter;\n  this._dynamics = new Dynamics();\n}\neventEmitter(VelocityControlMethod);\n\n/**\n * Destructor.\n */\nVelocityControlMethod.prototype.destroy = function() {\n  clearOwnProperties(this);\n};\n\n/**\n * Set the parameter's velocity.\n * @param {Number} velocity\n */\nVelocityControlMethod.prototype.setVelocity = function(velocity) {\n  this._dynamics.velocity = velocity;\n  this.emit('parameterDynamics', this._parameter, this._dynamics);\n};\n\n/**\n * Set the parameter's friction.\n * @param {Number} friction\n */\nVelocityControlMethod.prototype.setFriction = function(friction) {\n  this._dynamics.friction = friction;\n  this.emit('parameterDynamics', this._parameter, this._dynamics);\n};\n\nmodule.exports = VelocityControlMethod;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACpC,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,qBAAqBA,CAACC,SAAS,EAAE;EACxC,IAAG,CAACA,SAAS,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EAEA,IAAI,CAACC,UAAU,GAAGF,SAAS;EAC3B,IAAI,CAACG,SAAS,GAAG,IAAIN,QAAQ,CAAC,CAAC;AACjC;AACAF,YAAY,CAACI,qBAAqB,CAAC;;AAEnC;AACA;AACA;AACAA,qBAAqB,CAACK,SAAS,CAACC,OAAO,GAAG,YAAW;EACnDP,kBAAkB,CAAC,IAAI,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACAC,qBAAqB,CAACK,SAAS,CAACE,WAAW,GAAG,UAASC,QAAQ,EAAE;EAC/D,IAAI,CAACJ,SAAS,CAACI,QAAQ,GAAGA,QAAQ;EAClC,IAAI,CAACC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAACN,UAAU,EAAE,IAAI,CAACC,SAAS,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACAJ,qBAAqB,CAACK,SAAS,CAACK,WAAW,GAAG,UAASC,QAAQ,EAAE;EAC/D,IAAI,CAACP,SAAS,CAACO,QAAQ,GAAGA,QAAQ;EAClC,IAAI,CAACF,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAACN,UAAU,EAAE,IAAI,CAACC,SAAS,CAAC;AACjE,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAGb,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}