{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar NetworkError = require('../NetworkError');\nvar WorkPool = require('../collections/WorkPool');\nvar chain = require('../util/chain');\nvar delay = require('../util/delay');\nvar now = require('../util/now');\n\n// Map template properties to their corresponding tile properties.\nvar templateProperties = {\n  x: 'x',\n  y: 'y',\n  z: 'z',\n  f: 'face'\n};\n\n// Default face order for cube maps.\nvar defaultCubeMapFaceOrder = 'bdflru';\n\n// Default maximum number of concurrent requests.\nvar defaultConcurrency = 4;\n\n// Default milliseconds to wait before retrying failed requests.\nvar defaultRetryDelay = 10000;\n\n/**\n * @class ImageUrlSource\n * @implements Source\n * @classdesc\n *\n * A {@link Source} that loads {@link Asset assets} from images given a URL and\n * a crop rectangle.\n *\n * @param {Function} sourceFromTile Function that receives a tile and returns\n * a `{ url, rect }` object, where `url` is an image URL and `rect`, when\n * present, is an `{ x, y, width, height }` object in normalized coordinates\n * denoting the portion of the image to use.\n * @param {Object} opts\n * @param {number} [opts.concurrency=4] Maximum number of tiles to request at\n *     the same time. The limit is per {@link ImageSourceUrl} instance.\n * @param {number} [opts.retryDelay=10000] Time in milliseconds to wait before\n *     retrying a failed request.\n */\nfunction ImageUrlSource(sourceFromTile, opts) {\n  opts = opts ? opts : {};\n  this._loadPool = new WorkPool({\n    concurrency: opts.concurrency || defaultConcurrency\n  });\n  this._retryDelay = opts.retryDelay || defaultRetryDelay;\n  this._retryMap = {};\n  this._sourceFromTile = sourceFromTile;\n}\neventEmitter(ImageUrlSource);\nImageUrlSource.prototype.loadAsset = function (stage, tile, done) {\n  var self = this;\n  var retryDelay = this._retryDelay;\n  var retryMap = this._retryMap;\n  var tileSource = this._sourceFromTile(tile);\n  var url = tileSource.url;\n  var rect = tileSource.rect;\n  var loadImage = stage.loadImage.bind(stage, url, rect);\n  var loadFn = function (done) {\n    // TODO: Deduplicate load requests for the same URL. Although the browser\n    // might be smart enough to avoid duplicate requests, they are still unduly\n    // impacted by the concurrency parameter.\n    return self._loadPool.push(loadImage, function (err, asset) {\n      if (err) {\n        if (err instanceof NetworkError) {\n          // If a network error occurred, wait before retrying.\n          retryMap[url] = now();\n          self.emit('networkError', err, tile);\n        }\n        done(err, tile);\n      } else {\n        // On a successful fetch, forget the previous timeout.\n        delete retryMap[url];\n        done(null, tile, asset);\n      }\n    });\n  };\n\n  // Check whether we are retrying a failed request.\n  var delayAmount;\n  var lastTime = retryMap[url];\n  if (lastTime != null) {\n    var currentTime = now();\n    var elapsed = currentTime - lastTime;\n    if (elapsed < retryDelay) {\n      // Wait before retrying.\n      delayAmount = retryDelay - elapsed;\n    } else {\n      // Retry timeout expired; perform the request at once.\n      delayAmount = 0;\n      delete retryMap[url];\n    }\n  }\n  var delayFn = delay.bind(null, delayAmount);\n  return chain(delayFn, loadFn)(done);\n};\n\n/**\n * Creates an ImageUrlSource from a string template.\n *\n * @param {String} url Tile URL template, which may contain the following\n *    placeholders:\n *    - `{f}` : tile face (one of `b`, `d`, `f`, `l`, `r`, `u`)\n *    - `{z}` : tile level index (0 is the smallest level)\n *    - `{x}` : tile horizontal index\n *    - `{y}` : tile vertical index\n * @param {Object} opts In addition to the options already supported by the\n *     {@link ImageUrlSource} constructor.\n * @param {String} opts.cubeMapPreviewUrl URL to use as the preview level.\n *     This must be a single image containing six cube faces laid out\n *     vertically according to the face order parameter.\n * @param {String} [opts.cubeMapPreviewFaceOrder='bdflru'] Face order within\n *     the preview image.\n */\nImageUrlSource.fromString = function (url, opts) {\n  opts = opts || {};\n  var faceOrder = opts && opts.cubeMapPreviewFaceOrder || defaultCubeMapFaceOrder;\n  var urlFn = opts.cubeMapPreviewUrl ? withPreview : withoutPreview;\n  return new ImageUrlSource(urlFn, opts);\n  function withoutPreview(tile) {\n    var tileUrl = url;\n    for (var property in templateProperties) {\n      var templateProperty = templateProperties[property];\n      var regExp = propertyRegExp(property);\n      var valueFromTile = tile.hasOwnProperty(templateProperty) ? tile[templateProperty] : '';\n      tileUrl = tileUrl.replace(regExp, valueFromTile);\n    }\n    return {\n      url: tileUrl\n    };\n  }\n  function withPreview(tile) {\n    if (tile.z === 0) {\n      return cubeMapUrl(tile);\n    } else {\n      return withoutPreview(tile);\n    }\n  }\n  function cubeMapUrl(tile) {\n    var y = faceOrder.indexOf(tile.face) / 6;\n    return {\n      url: opts.cubeMapPreviewUrl,\n      rect: {\n        x: 0,\n        y: y,\n        width: 1,\n        height: 1 / 6\n      }\n    };\n  }\n};\nfunction propertyRegExp(property) {\n  var regExpStr = '\\\\{(' + property + ')\\\\}';\n  return new RegExp(regExpStr, 'g');\n}\nmodule.exports = ImageUrlSource;","map":{"version":3,"names":["eventEmitter","require","NetworkError","WorkPool","chain","delay","now","templateProperties","x","y","z","f","defaultCubeMapFaceOrder","defaultConcurrency","defaultRetryDelay","ImageUrlSource","sourceFromTile","opts","_loadPool","concurrency","_retryDelay","retryDelay","_retryMap","_sourceFromTile","prototype","loadAsset","stage","tile","done","self","retryMap","tileSource","url","rect","loadImage","bind","loadFn","push","err","asset","emit","delayAmount","lastTime","currentTime","elapsed","delayFn","fromString","faceOrder","cubeMapPreviewFaceOrder","urlFn","cubeMapPreviewUrl","withPreview","withoutPreview","tileUrl","property","templateProperty","regExp","propertyRegExp","valueFromTile","hasOwnProperty","replace","cubeMapUrl","indexOf","face","width","height","regExpStr","RegExp","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/sources/ImageUrl.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar NetworkError = require('../NetworkError');\nvar WorkPool = require('../collections/WorkPool');\nvar chain = require('../util/chain');\nvar delay = require('../util/delay');\nvar now = require('../util/now');\n\n\n// Map template properties to their corresponding tile properties.\nvar templateProperties = {\n  x: 'x',\n  y: 'y',\n  z: 'z',\n  f: 'face'\n};\n\n// Default face order for cube maps.\nvar defaultCubeMapFaceOrder = 'bdflru';\n\n// Default maximum number of concurrent requests.\nvar defaultConcurrency = 4;\n\n// Default milliseconds to wait before retrying failed requests.\nvar defaultRetryDelay = 10000;\n\n\n/**\n * @class ImageUrlSource\n * @implements Source\n * @classdesc\n *\n * A {@link Source} that loads {@link Asset assets} from images given a URL and\n * a crop rectangle.\n *\n * @param {Function} sourceFromTile Function that receives a tile and returns\n * a `{ url, rect }` object, where `url` is an image URL and `rect`, when\n * present, is an `{ x, y, width, height }` object in normalized coordinates\n * denoting the portion of the image to use.\n * @param {Object} opts\n * @param {number} [opts.concurrency=4] Maximum number of tiles to request at\n *     the same time. The limit is per {@link ImageSourceUrl} instance.\n * @param {number} [opts.retryDelay=10000] Time in milliseconds to wait before\n *     retrying a failed request.\n */\nfunction ImageUrlSource(sourceFromTile, opts) {\n\n  opts = opts ? opts : {};\n\n  this._loadPool = new WorkPool({\n    concurrency: opts.concurrency || defaultConcurrency\n  });\n\n  this._retryDelay = opts.retryDelay || defaultRetryDelay;\n  this._retryMap = {};\n\n  this._sourceFromTile = sourceFromTile;\n}\n\neventEmitter(ImageUrlSource);\n\n\nImageUrlSource.prototype.loadAsset = function(stage, tile, done) {\n\n  var self = this;\n\n  var retryDelay = this._retryDelay;\n  var retryMap = this._retryMap;\n\n  var tileSource = this._sourceFromTile(tile);\n  var url = tileSource.url;\n  var rect = tileSource.rect;\n\n  var loadImage = stage.loadImage.bind(stage, url, rect);\n\n  var loadFn = function(done) {\n    // TODO: Deduplicate load requests for the same URL. Although the browser\n    // might be smart enough to avoid duplicate requests, they are still unduly\n    // impacted by the concurrency parameter.\n    return self._loadPool.push(loadImage, function(err, asset) {\n      if (err) {\n        if (err instanceof NetworkError) {\n          // If a network error occurred, wait before retrying.\n          retryMap[url] = now();\n          self.emit('networkError', err, tile);\n        }\n        done(err, tile);\n      } else {\n        // On a successful fetch, forget the previous timeout.\n        delete retryMap[url];\n        done(null, tile, asset);\n      }\n    });\n  };\n\n  // Check whether we are retrying a failed request.\n  var delayAmount;\n  var lastTime = retryMap[url];\n  if (lastTime != null) {\n    var currentTime = now();\n    var elapsed = currentTime - lastTime;\n    if (elapsed < retryDelay) {\n      // Wait before retrying.\n      delayAmount = retryDelay - elapsed;\n    } else {\n      // Retry timeout expired; perform the request at once.\n      delayAmount = 0;\n      delete retryMap[url];\n    }\n  }\n\n  var delayFn = delay.bind(null, delayAmount);\n\n  return chain(delayFn, loadFn)(done);\n};\n\n\n/**\n * Creates an ImageUrlSource from a string template.\n *\n * @param {String} url Tile URL template, which may contain the following\n *    placeholders:\n *    - `{f}` : tile face (one of `b`, `d`, `f`, `l`, `r`, `u`)\n *    - `{z}` : tile level index (0 is the smallest level)\n *    - `{x}` : tile horizontal index\n *    - `{y}` : tile vertical index\n * @param {Object} opts In addition to the options already supported by the\n *     {@link ImageUrlSource} constructor.\n * @param {String} opts.cubeMapPreviewUrl URL to use as the preview level.\n *     This must be a single image containing six cube faces laid out\n *     vertically according to the face order parameter.\n * @param {String} [opts.cubeMapPreviewFaceOrder='bdflru'] Face order within\n *     the preview image.\n */\nImageUrlSource.fromString = function(url, opts) {\n  opts = opts || {};\n\n  var faceOrder = opts && opts.cubeMapPreviewFaceOrder || defaultCubeMapFaceOrder;\n\n  var urlFn = opts.cubeMapPreviewUrl ? withPreview : withoutPreview;\n\n  return new ImageUrlSource(urlFn, opts);\n\n  function withoutPreview(tile) {\n    var tileUrl = url;\n\n    for (var property in templateProperties) {\n      var templateProperty = templateProperties[property];\n      var regExp = propertyRegExp(property);\n      var valueFromTile = tile.hasOwnProperty(templateProperty) ? tile[templateProperty] : '';\n      tileUrl = tileUrl.replace(regExp, valueFromTile);\n    }\n\n    return { url: tileUrl };\n  }\n\n  function withPreview(tile) {\n    if (tile.z === 0) {\n      return cubeMapUrl(tile);\n    }\n    else {\n      return withoutPreview(tile);\n    }\n  }\n\n  function cubeMapUrl(tile) {\n    var y = faceOrder.indexOf(tile.face) / 6;\n    return {\n      url: opts.cubeMapPreviewUrl,\n      rect: { x: 0, y: y, width: 1, height: 1/6 }\n    };\n  }\n};\n\nfunction propertyRegExp(property) {\n  var regExpStr = '\\\\{(' + property + ')\\\\}';\n  return new RegExp(regExpStr, 'g');\n}\n\nmodule.exports = ImageUrlSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}