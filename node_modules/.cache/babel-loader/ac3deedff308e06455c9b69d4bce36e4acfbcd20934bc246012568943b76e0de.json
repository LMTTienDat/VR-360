{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * @class RendererRegistry\n * @classdesc\n *\n * A RendererRegistry maps pairs of {@link Geometry} and {@link View} type into\n * the appropriate {@link Renderer} class. It is used by a {@link Stage} to\n * determine the appropriate renderer for a {@link Layer}.\n *\n * See also {@link Stage#registerRenderer}.\n */\nfunction RendererRegistry() {\n  this._renderers = {};\n}\n\n/**\n * Registers a renderer for the given geometry and view type.\n * @param {string} geometryType The geometry type, as given by\n *     {@link Geometry#type}.\n * @param {string} viewType The view type, as given by {@link View#type}.\n * @param {*} Renderer The renderer class.\n */\nRendererRegistry.prototype.set = function (geometryType, viewType, Renderer) {\n  if (!this._renderers[geometryType]) {\n    this._renderers[geometryType] = {};\n  }\n  this._renderers[geometryType][viewType] = Renderer;\n};\n\n/**\n * Retrieves the renderer for the given geometry and view type.\n * @param {string} geometryType The geometry type, as given by\n *     {@link Geometry#type}.\n * @param {string} viewType The view type, as given by {@link View#type}.\n * @param {*} Renderer The renderer class, or null if no such renderer has been\n * registered.\n */\nRendererRegistry.prototype.get = function (geometryType, viewType) {\n  var Renderer = this._renderers[geometryType] && this._renderers[geometryType][viewType];\n  return Renderer || null;\n};\nmodule.exports = RendererRegistry;","map":{"version":3,"names":["RendererRegistry","_renderers","prototype","set","geometryType","viewType","Renderer","get","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/stages/RendererRegistry.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\n/**\n * @class RendererRegistry\n * @classdesc\n *\n * A RendererRegistry maps pairs of {@link Geometry} and {@link View} type into\n * the appropriate {@link Renderer} class. It is used by a {@link Stage} to\n * determine the appropriate renderer for a {@link Layer}.\n *\n * See also {@link Stage#registerRenderer}.\n */\nfunction RendererRegistry() {\n  this._renderers = {};\n}\n\n/**\n * Registers a renderer for the given geometry and view type.\n * @param {string} geometryType The geometry type, as given by\n *     {@link Geometry#type}.\n * @param {string} viewType The view type, as given by {@link View#type}.\n * @param {*} Renderer The renderer class.\n */\nRendererRegistry.prototype.set = function(geometryType, viewType, Renderer) {\n  if (!this._renderers[geometryType]) {\n    this._renderers[geometryType] = {};\n  }\n  this._renderers[geometryType][viewType] = Renderer;\n};\n\n/**\n * Retrieves the renderer for the given geometry and view type.\n * @param {string} geometryType The geometry type, as given by\n *     {@link Geometry#type}.\n * @param {string} viewType The view type, as given by {@link View#type}.\n * @param {*} Renderer The renderer class, or null if no such renderer has been\n * registered.\n */\nRendererRegistry.prototype.get = function(geometryType, viewType) {\n  var Renderer = this._renderers[geometryType] &&\n      this._renderers[geometryType][viewType];\n  return Renderer || null;\n};\n\nmodule.exports = RendererRegistry;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAAA,EAAG;EAC1B,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACE,SAAS,CAACC,GAAG,GAAG,UAASC,YAAY,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAC1E,IAAI,CAAC,IAAI,CAACL,UAAU,CAACG,YAAY,CAAC,EAAE;IAClC,IAAI,CAACH,UAAU,CAACG,YAAY,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,IAAI,CAACH,UAAU,CAACG,YAAY,CAAC,CAACC,QAAQ,CAAC,GAAGC,QAAQ;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,gBAAgB,CAACE,SAAS,CAACK,GAAG,GAAG,UAASH,YAAY,EAAEC,QAAQ,EAAE;EAChE,IAAIC,QAAQ,GAAG,IAAI,CAACL,UAAU,CAACG,YAAY,CAAC,IACxC,IAAI,CAACH,UAAU,CAACG,YAAY,CAAC,CAACC,QAAQ,CAAC;EAC3C,OAAOC,QAAQ,IAAI,IAAI;AACzB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGT,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}