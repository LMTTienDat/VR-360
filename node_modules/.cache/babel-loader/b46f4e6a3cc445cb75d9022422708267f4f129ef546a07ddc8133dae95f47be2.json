{"ast":null,"code":"/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar mat4 = require('gl-matrix').mat4;\nvar vec4 = require('gl-matrix').vec4;\nvar pixelRatio = require('../util/pixelRatio');\nvar real = require('../util/real');\nvar clamp = require('../util/clamp');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// Default viewport dimensions.\n// Start with zero to ensure that those values are handled correctly.\nvar defaultWidth = 0;\nvar defaultHeight = 0;\n\n// Default view parameters.\nvar defaultX = 0.5;\nvar defaultY = 0.5;\nvar defaultZoom = 1;\n\n// Constant values used to simplify the frustum culling logic.\n// planeAxes[i] indicates the coordinate value that defines a frustum plane.\n// planeCmp[i] indicates how point and plane coordinates should be compared\n// to determine whether the point is on the outer side of the plane.\nvar planeAxes = [1,\n// top\n0,\n// right\n1,\n// bottom\n0 // left\n];\n\nvar planeCmp = [-1,\n// top\n-1,\n// right\n1,\n// bottom\n1 // left\n];\n\n// A zoom of exactly 0 breaks some computations, so we force a minimum positive\n// value. We use 6 decimal places for the epsilon value to avoid broken\n// rendering due to loss of precision in floating point computations.\nvar zoomLimitEpsilon = 0.000001;\n\n/**\n * @interface FlatViewParams\n *\n * A camera configuration for a {@link FlatView}.\n *\n * @property {number} x The horizontal coordinate of the image point displayed\n *     at the viewport center, in the [0, 1] range.\n *     When `x === 0.5`, the image is centered horizontally.\n *     When `x === 0`, the left edge of the image is at the viewport center.\n *     When `x === 1`, the right edge of the image is at the viewport center.\n * @property {number} y The vertical coordinate of the image point displayed at\n *     the viewport center, in the [0, 1] range.\n *     When `y === 0.5`, the image is centered vertically.\n *     When `y === 0`, the top edge of the image is at the viewport center.\n *     When `y === 1`, the bottom edge of the image is at the viewport center.\n * @property {number} zoom The horizontal zoom, in the [0, âˆž) range.\n *     When `zoom === 1`, the viewport is as wide as the image.\n *     When `zoom < 1`, the image is zoomed in.\n *     When `zoom > 1`, the image is zoomed out.\n * @property {number} mediaAspectRatio The image aspect ratio.\n *     When `mediaAspectRatio === 1`, the image width equals its height.\n *     When `mediaAspectRatio < 1`, the image width is less than its height.\n *     When `mediaAspectRatio > 1`, the image height is less than its width.\n */\n\n/**\n * @interface FlatViewCoords\n *\n * The position of a point in a flat image.\n *\n * @property {number} x The horizontal coordinate, in the [0, 1] range.\n * @property {number} y The vertical coordinate, in the [0, 1] range.\n */\n\n/**\n * @typedef {function} FlatViewLimiter\n *\n * View limiter for a {@link FlatView}.\n *\n * A view limiter is a function that receives a {@link FlatViewParams} object,\n * optionally modifies it in place, and returns it. It can be used to enforce\n * constraints on the view parameters.\n *\n * See {@link FlatView.limit} for commonly used limiters. They may be composed\n * together or with user-defined limiters with {@link util.compose}.\n *\n * @param {FlatViewParams} params\n * @return {FlatViewParams}\n */\n\n/**\n * @class FlatView\n * @implements View\n * @classdesc\n *\n * A {@link View} implementing an orthogonal projection for flat images.\n *\n * @param {FlatViewParams} params The initial view parameters. The\n *     `mediaAspectRatio` parameter must always be set. The other parameters\n *     default to `{x: 0.5, y: 0.5, z: 1 }` if unspecified.\n * @param {FlatViewLimiter=} limiter The view limiter. If unspecified, no view\n *     limiting is applied. See {@link FlatView.limit} for commonly used\n *     limiters.\n */\nfunction FlatView(params, limiter) {\n  // Require an aspect ratio to be specified.\n  if (!(params && params.mediaAspectRatio != null)) {\n    throw new Error('mediaAspectRatio must be defined');\n  }\n\n  // The initial values for the view parameters.\n  this._x = params && params.x != null ? params.x : defaultX;\n  this._y = params && params.y != null ? params.y : defaultY;\n  this._zoom = params && params.zoom != null ? params.zoom : defaultZoom;\n  this._mediaAspectRatio = params.mediaAspectRatio;\n  this._width = params && params.width != null ? params.width : defaultWidth;\n  this._height = params && params.height != null ? params.height : defaultHeight;\n\n  // The initial value for the view limiter.\n  this._limiter = limiter || null;\n\n  // The last calculated projection matrix and its inverse.\n  this._projMatrix = mat4.create();\n  this._invProjMatrix = mat4.create();\n\n  // The last calculated view frustum.\n  this._frustum = [0,\n  // top\n  0,\n  // right\n  0,\n  // bottom\n  0 // left\n  ];\n\n  // Whether the projection matrices and view frustum need to be updated.\n  this._projectionChanged = true;\n\n  // Temporary variables used for calculations.\n  this._params = {};\n  this._vec = vec4.create();\n\n  // Force view limiting on initial parameters.\n  this._update();\n}\neventEmitter(FlatView);\n\n/**\n * Destructor.\n */\nFlatView.prototype.destroy = function () {\n  clearOwnProperties(this);\n};\n\n/**\n * Get the x parameter.\n * @return {number}\n */\nFlatView.prototype.x = function () {\n  return this._x;\n};\n\n/**\n * Get the y parameter.\n * @return {number}\n */\nFlatView.prototype.y = function () {\n  return this._y;\n};\n\n/**\n * Get the zoom value.\n * @return {number}\n */\nFlatView.prototype.zoom = function () {\n  return this._zoom;\n};\n\n/**\n * Get the media aspect ratio.\n * @return {number}\n */\nFlatView.prototype.mediaAspectRatio = function () {\n  return this._mediaAspectRatio;\n};\n\n/**\n * Get the viewport width.\n * @return {number}\n */\nFlatView.prototype.width = function () {\n  return this._width;\n};\n\n/**\n * Get the viewport height.\n * @return {number}\n */\nFlatView.prototype.height = function () {\n  return this._height;\n};\n\n/**\n * Get the viewport dimensions. If an argument is supplied, it is filled in with\n * the result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {Size=} size\n * @return {Size}\n */\nFlatView.prototype.size = function (size) {\n  size = size || {};\n  size.width = this._width;\n  size.height = this._height;\n  return size;\n};\n\n/**\n * Get the view parameters. If an argument is supplied, it is filled in with the\n * result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {FlatViewParams=} params\n * @return {FlatViewParams}\n */\nFlatView.prototype.parameters = function (params) {\n  params = params || {};\n  params.x = this._x;\n  params.y = this._y;\n  params.zoom = this._zoom;\n  params.mediaAspectRatio = this._mediaAspectRatio;\n  return params;\n};\n\n/**\n * Get the view limiter, or null if unset.\n * @return {?FlatViewLimiter}\n */\nFlatView.prototype.limiter = function () {\n  return this._limiter;\n};\n\n/**\n * Set the x parameter.\n * @param {number} x\n */\nFlatView.prototype.setX = function (x) {\n  this._resetParams();\n  this._params.x = x;\n  this._update(this._params);\n};\n\n/**\n * Set the y parameter.\n * @param {number} y\n */\nFlatView.prototype.setY = function (y) {\n  this._resetParams();\n  this._params.y = y;\n  this._update(this._params);\n};\n\n/**\n * Set the zoom value.\n * @param {number} zoom\n */\nFlatView.prototype.setZoom = function (zoom) {\n  this._resetParams();\n  this._params.zoom = zoom;\n  this._update(this._params);\n};\n\n/**\n * Add xOffset to the x parameter.\n * @param {number} xOffset\n */\nFlatView.prototype.offsetX = function (xOffset) {\n  this.setX(this._x + xOffset);\n};\n\n/**\n * Add yOffset to the y parameter.\n * @param {number} yOffset\n */\nFlatView.prototype.offsetY = function (yOffset) {\n  this.setY(this._y + yOffset);\n};\n\n/**\n * Add zoomOffset to the zoom value.\n * @param {number} zoomOffset\n */\nFlatView.prototype.offsetZoom = function (zoomOffset) {\n  this.setZoom(this._zoom + zoomOffset);\n};\n\n/**\n * Set the media aspect ratio.\n * @param {number} mediaAspectRatio\n */\nFlatView.prototype.setMediaAspectRatio = function (mediaAspectRatio) {\n  this._resetParams();\n  this._params.mediaAspectRatio = mediaAspectRatio;\n  this._update(this._params);\n};\n\n/**\n * Set the viewport dimensions.\n * @param {Size} size\n */\nFlatView.prototype.setSize = function (size) {\n  this._resetParams();\n  this._params.width = size.width;\n  this._params.height = size.height;\n  this._update(this._params);\n};\n\n/**\n * Set the view parameters. Unspecified parameters are left unchanged.\n * @param {FlatViewParameters} params\n */\nFlatView.prototype.setParameters = function (params) {\n  this._resetParams();\n  this._params.x = params.x;\n  this._params.y = params.y;\n  this._params.zoom = params.zoom;\n  this._params.mediaAspectRatio = params.mediaAspectRatio;\n  this._update(this._params);\n};\n\n/**\n * Set the view limiter.\n * @param {?FlatViewLimiter} limiter The new limiter, or null to unset.\n */\nFlatView.prototype.setLimiter = function (limiter) {\n  this._limiter = limiter || null;\n  this._update();\n};\nFlatView.prototype._resetParams = function () {\n  var params = this._params;\n  params.x = null;\n  params.y = null;\n  params.zoom = null;\n  params.mediaAspectRatio = null;\n  params.width = null;\n  params.height = null;\n};\nFlatView.prototype._update = function (params) {\n  // Avoid object allocation when no parameters are supplied.\n  if (params == null) {\n    this._resetParams();\n    params = this._params;\n  }\n\n  // Save old parameters for later comparison.\n  var oldX = this._x;\n  var oldY = this._y;\n  var oldZoom = this._zoom;\n  var oldMediaAspectRatio = this._mediaAspectRatio;\n  var oldWidth = this._width;\n  var oldHeight = this._height;\n\n  // Fill in object with the new set of parameters to pass into the limiter.\n  params.x = params.x != null ? params.x : oldX;\n  params.y = params.y != null ? params.y : oldY;\n  params.zoom = params.zoom != null ? params.zoom : oldZoom;\n  params.mediaAspectRatio = params.mediaAspectRatio != null ? params.mediaAspectRatio : oldMediaAspectRatio;\n  params.width = params.width != null ? params.width : oldWidth;\n  params.height = params.height != null ? params.height : oldHeight;\n\n  // Apply view limiting when defined.\n  if (this._limiter) {\n    params = this._limiter(params);\n    if (!params) {\n      throw new Error('Bad view limiter');\n    }\n  }\n\n  // Grab the limited parameters.\n  var newX = params.x;\n  var newY = params.y;\n  var newZoom = params.zoom;\n  var newMediaAspectRatio = params.mediaAspectRatio;\n  var newWidth = params.width;\n  var newHeight = params.height;\n\n  // Consistency check.\n  if (!real(newX) || !real(newY) || !real(newZoom) || !real(newMediaAspectRatio) || !real(newWidth) || !real(newHeight)) {\n    throw new Error('Bad view - suspect a broken limiter');\n  }\n\n  // Constrain zoom.\n  newZoom = clamp(newZoom, zoomLimitEpsilon, Infinity);\n\n  // Update parameters.\n  this._x = newX;\n  this._y = newY;\n  this._zoom = newZoom;\n  this._mediaAspectRatio = newMediaAspectRatio;\n  this._width = newWidth;\n  this._height = newHeight;\n\n  // Check whether the parameters changed and emit the corresponding events.\n  if (newX !== oldX || newY !== oldY || newZoom !== oldZoom || newMediaAspectRatio !== oldMediaAspectRatio || newWidth !== oldWidth || newHeight !== oldHeight) {\n    this._projectionChanged = true;\n    this.emit('change');\n  }\n  if (newWidth !== oldWidth || newHeight !== oldHeight) {\n    this.emit('resize');\n  }\n};\nFlatView.prototype._zoomX = function () {\n  return this._zoom;\n};\nFlatView.prototype._zoomY = function () {\n  var mediaAspectRatio = this._mediaAspectRatio;\n  var aspect = this._width / this._height;\n  var zoomX = this._zoom;\n  var zoomY = zoomX * mediaAspectRatio / aspect;\n  if (isNaN(zoomY)) {\n    zoomY = zoomX;\n  }\n  return zoomY;\n};\nFlatView.prototype.updateWithControlParameters = function (parameters) {\n  var scale = this.zoom();\n  var zoomX = this._zoomX();\n  var zoomY = this._zoomY();\n\n  // TODO: should the scale be the same for both axes?\n  this.offsetX(parameters.axisScaledX * zoomX + parameters.x * scale);\n  this.offsetY(parameters.axisScaledY * zoomY + parameters.y * scale);\n  this.offsetZoom(parameters.zoom * scale);\n};\nFlatView.prototype._updateProjection = function () {\n  var projMatrix = this._projMatrix;\n  var invProjMatrix = this._invProjMatrix;\n  var frustum = this._frustum;\n\n  // Recalculate projection matrix when required.\n  if (this._projectionChanged) {\n    var x = this._x;\n    var y = this._y;\n    var zoomX = this._zoomX();\n    var zoomY = this._zoomY();\n\n    // Recalculate view frustum.\n    var top = frustum[0] = 0.5 - y + 0.5 * zoomY;\n    var right = frustum[1] = x - 0.5 + 0.5 * zoomX;\n    var bottom = frustum[2] = 0.5 - y - 0.5 * zoomY;\n    var left = frustum[3] = x - 0.5 - 0.5 * zoomX;\n\n    // Recalculate projection matrix and its inverse.\n    mat4.ortho(projMatrix, left, right, bottom, top, -1, 1);\n    mat4.invert(invProjMatrix, projMatrix);\n    this._projectionChanged = false;\n  }\n};\n\n/**\n * Returns the projection matrix for the current view.\n * @returns {mat4}\n */\nFlatView.prototype.projection = function () {\n  this._updateProjection();\n  return this._projMatrix;\n};\n\n/**\n * Returns the inverse projection matrix for the current view.\n * @returns {mat4}\n */\nFlatView.prototype.inverseProjection = function () {\n  this._updateProjection();\n  return this._invProjMatrix;\n};\n\n/**\n * Return whether the view frustum intersects the given rectangle.\n *\n * This function may return false positives, but never false negatives.\n * It is used for frustum culling, i.e., excluding invisible tiles from the\n * rendering process.\n *\n * @param {vec3[]} rectangle The vertices of the rectangle.\n */\nFlatView.prototype.intersects = function (rectangle) {\n  this._updateProjection();\n  var frustum = this._frustum;\n\n  // Check whether the rectangle is on the outer side of any of the frustum\n  // planes. This is a sufficient condition, though not necessary, for the\n  // rectangle to be completely outside the fruouter\n  for (var i = 0; i < frustum.length; i++) {\n    var limit = frustum[i];\n    var axis = planeAxes[i];\n    var cmp = planeCmp[i];\n    var inside = false;\n    for (var j = 0; j < rectangle.length; j++) {\n      var vertex = rectangle[j];\n      if (cmp < 0 && vertex[axis] < limit || cmp > 0 && vertex[axis] > limit) {\n        inside = true;\n        break;\n      }\n    }\n    if (!inside) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Select the level that should be used to render the view.\n * @param {Level[]} levelList the list of levels from which to select.\n * @return {Level} the selected level.\n */\nFlatView.prototype.selectLevel = function (levels) {\n  // Multiply the viewport width by the device pixel ratio to get the required\n  // horizontal resolution in pixels.\n  //\n  // Calculate the fraction of the image that would be visible at the current\n  // zoom value. Then, for each level, multiply by the level width to get the\n  // width in pixels of the portion that would be visible.\n  //\n  // Search for the smallest level that satifies the the required width,\n  // falling back on the largest level if none do.\n\n  var requiredPixels = pixelRatio() * this.width();\n  var zoomFactor = this._zoom;\n  for (var i = 0; i < levels.length; i++) {\n    var level = levels[i];\n    if (zoomFactor * level.width() >= requiredPixels) {\n      return level;\n    }\n  }\n  return levels[levels.length - 1];\n};\n\n/**\n * Convert view coordinates into screen coordinates. If a result argument is\n * provided, it is filled in and returned. Otherwise, a fresh object is filled\n * in and returned.\n *\n * @param {FlatViewCoords} coords The view coordinates.\n * @param {Coords=} result The result argument for the screen coordinates.\n * @return {Coords}\n */\nFlatView.prototype.coordinatesToScreen = function (coords, result) {\n  var ray = this._vec;\n  if (!result) {\n    result = {};\n  }\n  var width = this._width;\n  var height = this._height;\n\n  // Undefined on a null viewport.\n  if (width <= 0 || height <= 0) {\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n\n  // Extract coordinates from argument, filling in default values.\n  var x = coords && coords.x != null ? coords.x : defaultX;\n  var y = coords && coords.y != null ? coords.y : defaultY;\n\n  // Project view ray onto clip space.\n  vec4.set(ray, x - 0.5, 0.5 - y, -1, 1);\n  vec4.transformMat4(ray, ray, this.projection());\n\n  // Calculate perspective divide.\n  for (var i = 0; i < 3; i++) {\n    ray[i] /= ray[3];\n  }\n\n  // Convert to viewport coordinates and return.\n  result.x = width * (ray[0] + 1) / 2;\n  result.y = height * (1 - ray[1]) / 2;\n  return result;\n};\n\n/**\n * Convert screen coordinates into view coordinates. If a result argument is\n * provided, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {Coords} coords The screen coordinates.\n * @param {FlatViewCoords=} result The result argument for the view coordinates.\n * @return {FlatViewCoords}\n */\nFlatView.prototype.screenToCoordinates = function (coords, result) {\n  var ray = this._vec;\n  if (!result) {\n    result = {};\n  }\n  var width = this._width;\n  var height = this._height;\n\n  // Convert viewport coordinates to clip space.\n  var vecx = 2 * coords.x / width - 1;\n  var vecy = 1 - 2 * coords.y / height;\n  vec4.set(ray, vecx, vecy, 1, 1);\n\n  // Project back to world space.\n  vec4.transformMat4(ray, ray, this.inverseProjection());\n\n  // Convert to flat coordinates.\n  result.x = 0.5 + ray[0];\n  result.y = 0.5 - ray[1];\n  return result;\n};\n\n/**\n * Factory functions for view limiters. See {@link FlatViewLimiter}.\n * @namespace\n */\nFlatView.limit = {\n  /**\n   * Returns a view limiter that constrains the x parameter.\n   * @param {number} min The minimum x value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  x: function (min, max) {\n    return function limitX(params) {\n      params.x = clamp(params.x, min, max);\n      return params;\n    };\n  },\n  /**\n   * Return a view limiter that constrains the y parameter.\n   * @param {number} min The minimum y value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  y: function (min, max) {\n    return function limitY(params) {\n      params.y = clamp(params.y, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter than constrains the zoom parameter.\n   * @param {number} min The minimum zoom value.\n   * @param {number} max The maximum zoom value.\n   * @return {FlatViewLimiter}\n   */\n  zoom: function (min, max) {\n    return function limitZoom(params) {\n      params.zoom = clamp(params.zoom, min, max);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that prevents zooming in beyond the given\n   * resolution.\n   * @param {number} size The image width in pixels.\n   * @return {FlatViewLimiter}\n   */\n  resolution: function (size) {\n    return function limitResolution(params) {\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n      var width = params.width;\n      var minZoom = pixelRatio() * width / size;\n      params.zoom = clamp(params.zoom, minZoom, Infinity);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the values of the x parameter that\n   * are inside the viewport.\n   * @param {number} min The minimum x value.\n   * @param {number} max The maximum x value.\n   * @return {FlatViewLimiter}\n   */\n  visibleX: function (min, max) {\n    return function limitVisibleX(params) {\n      // Calculate the zoom value that makes the specified range fully visible.\n      var maxZoom = max - min;\n\n      // Clamp zoom to the maximum value.\n      if (params.zoom > maxZoom) {\n        params.zoom = maxZoom;\n      }\n\n      // Bound X such that the image is visible up to the range edges.\n      var minX = min + 0.5 * params.zoom;\n      var maxX = max - 0.5 * params.zoom;\n      params.x = clamp(params.x, minX, maxX);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the values of the y parameter that\n   * are inside the viewport.\n   * @param {number} min The minimum y value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  visibleY: function (min, max) {\n    return function limitVisibleY(params) {\n      // Do nothing for a null viewport.\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n\n      // Calculate the X to Y conversion factor.\n      var viewportAspectRatio = params.width / params.height;\n      var factor = viewportAspectRatio / params.mediaAspectRatio;\n\n      // Calculate the zoom value that makes the specified range fully visible.\n      var maxZoom = (max - min) * factor;\n\n      // Clamp zoom to the maximum value.\n      if (params.zoom > maxZoom) {\n        params.zoom = maxZoom;\n      }\n\n      // Bound Y such that the image is visible up to the range edges.\n      var minY = min + 0.5 * params.zoom / factor;\n      var maxY = max - 0.5 * params.zoom / factor;\n      params.y = clamp(params.y, minY, maxY);\n      return params;\n    };\n  },\n  /**\n   * Returns a view limiter that constrains the zoom parameter such that\n   * zooming out is prevented beyond the point at which the image is fully\n   * visible. Unless the image and the viewport have the same aspect ratio,\n   * this will cause bands to appear around the image.\n   * @return {FlatViewLimiter}\n   */\n  letterbox: function () {\n    return function limitLetterbox(params) {\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n      var viewportAspectRatio = params.width / params.height;\n      var fullWidthZoom = 1.0;\n      var fullHeightZoom = viewportAspectRatio / params.mediaAspectRatio;\n\n      // If the image is wider than the viewport, limit the horizontal zoom to\n      // the image width.\n      if (params.mediaAspectRatio >= viewportAspectRatio) {\n        params.zoom = Math.min(params.zoom, fullWidthZoom);\n      }\n\n      // If the image is narrower than the viewport, limit the vertical zoom to\n      // the image height.\n      if (params.mediaAspectRatio <= viewportAspectRatio) {\n        params.zoom = Math.min(params.zoom, fullHeightZoom);\n      }\n\n      // If the full image width is visible, limit x to the central point.\n      // Else, bound x such that image is visible up to the horizontal edges.\n      var minX, maxX;\n      if (params.zoom > fullWidthZoom) {\n        minX = maxX = 0.5;\n      } else {\n        minX = 0.0 + 0.5 * params.zoom / fullWidthZoom;\n        maxX = 1.0 - 0.5 * params.zoom / fullWidthZoom;\n      }\n\n      // If the full image height is visible, limit y to the central point.\n      // Else, bound y such that image is visible up to the vertical edges.\n      var minY, maxY;\n      if (params.zoom > fullHeightZoom) {\n        minY = maxY = 0.5;\n      } else {\n        minY = 0.0 + 0.5 * params.zoom / fullHeightZoom;\n        maxY = 1.0 - 0.5 * params.zoom / fullHeightZoom;\n      }\n\n      // Clamp x and y into the calculated bounds.\n      params.x = clamp(params.x, minX, maxX);\n      params.y = clamp(params.y, minY, maxY);\n      return params;\n    };\n  }\n};\nFlatView.type = FlatView.prototype.type = 'flat';\nmodule.exports = FlatView;","map":{"version":3,"names":["eventEmitter","require","mat4","vec4","pixelRatio","real","clamp","clearOwnProperties","defaultWidth","defaultHeight","defaultX","defaultY","defaultZoom","planeAxes","planeCmp","zoomLimitEpsilon","FlatView","params","limiter","mediaAspectRatio","Error","_x","x","_y","y","_zoom","zoom","_mediaAspectRatio","_width","width","_height","height","_limiter","_projMatrix","create","_invProjMatrix","_frustum","_projectionChanged","_params","_vec","_update","prototype","destroy","size","parameters","setX","_resetParams","setY","setZoom","offsetX","xOffset","offsetY","yOffset","offsetZoom","zoomOffset","setMediaAspectRatio","setSize","setParameters","setLimiter","oldX","oldY","oldZoom","oldMediaAspectRatio","oldWidth","oldHeight","newX","newY","newZoom","newMediaAspectRatio","newWidth","newHeight","Infinity","emit","_zoomX","_zoomY","aspect","zoomX","zoomY","isNaN","updateWithControlParameters","scale","axisScaledX","axisScaledY","_updateProjection","projMatrix","invProjMatrix","frustum","top","right","bottom","left","ortho","invert","projection","inverseProjection","intersects","rectangle","i","length","limit","axis","cmp","inside","j","vertex","selectLevel","levels","requiredPixels","zoomFactor","level","coordinatesToScreen","coords","result","ray","set","transformMat4","screenToCoordinates","vecx","vecy","min","max","limitX","limitY","limitZoom","resolution","limitResolution","minZoom","visibleX","limitVisibleX","maxZoom","minX","maxX","visibleY","limitVisibleY","viewportAspectRatio","factor","minY","maxY","letterbox","limitLetterbox","fullWidthZoom","fullHeightZoom","Math","type","module","exports"],"sources":["E:/VR/node_modules/marzipano/src/views/Flat.js"],"sourcesContent":["/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar eventEmitter = require('minimal-event-emitter');\nvar mat4 = require('gl-matrix').mat4;\nvar vec4 = require('gl-matrix').vec4;\nvar pixelRatio = require('../util/pixelRatio');\nvar real = require('../util/real');\nvar clamp = require('../util/clamp');\nvar clearOwnProperties = require('../util/clearOwnProperties');\n\n// Default viewport dimensions.\n// Start with zero to ensure that those values are handled correctly.\nvar defaultWidth = 0;\nvar defaultHeight = 0;\n\n// Default view parameters.\nvar defaultX = 0.5;\nvar defaultY = 0.5;\nvar defaultZoom = 1;\n\n// Constant values used to simplify the frustum culling logic.\n// planeAxes[i] indicates the coordinate value that defines a frustum plane.\n// planeCmp[i] indicates how point and plane coordinates should be compared\n// to determine whether the point is on the outer side of the plane.\nvar planeAxes = [\n  1, // top\n  0, // right\n  1, // bottom\n  0  // left\n];\nvar planeCmp = [\n  -1, // top\n  -1, // right\n   1, // bottom\n   1  // left\n];\n\n// A zoom of exactly 0 breaks some computations, so we force a minimum positive\n// value. We use 6 decimal places for the epsilon value to avoid broken\n// rendering due to loss of precision in floating point computations.\nvar zoomLimitEpsilon = 0.000001;\n\n\n/**\n * @interface FlatViewParams\n *\n * A camera configuration for a {@link FlatView}.\n *\n * @property {number} x The horizontal coordinate of the image point displayed\n *     at the viewport center, in the [0, 1] range.\n *     When `x === 0.5`, the image is centered horizontally.\n *     When `x === 0`, the left edge of the image is at the viewport center.\n *     When `x === 1`, the right edge of the image is at the viewport center.\n * @property {number} y The vertical coordinate of the image point displayed at\n *     the viewport center, in the [0, 1] range.\n *     When `y === 0.5`, the image is centered vertically.\n *     When `y === 0`, the top edge of the image is at the viewport center.\n *     When `y === 1`, the bottom edge of the image is at the viewport center.\n * @property {number} zoom The horizontal zoom, in the [0, âˆž) range.\n *     When `zoom === 1`, the viewport is as wide as the image.\n *     When `zoom < 1`, the image is zoomed in.\n *     When `zoom > 1`, the image is zoomed out.\n * @property {number} mediaAspectRatio The image aspect ratio.\n *     When `mediaAspectRatio === 1`, the image width equals its height.\n *     When `mediaAspectRatio < 1`, the image width is less than its height.\n *     When `mediaAspectRatio > 1`, the image height is less than its width.\n */\n\n\n/**\n * @interface FlatViewCoords\n *\n * The position of a point in a flat image.\n *\n * @property {number} x The horizontal coordinate, in the [0, 1] range.\n * @property {number} y The vertical coordinate, in the [0, 1] range.\n */\n\n\n/**\n * @typedef {function} FlatViewLimiter\n *\n * View limiter for a {@link FlatView}.\n *\n * A view limiter is a function that receives a {@link FlatViewParams} object,\n * optionally modifies it in place, and returns it. It can be used to enforce\n * constraints on the view parameters.\n *\n * See {@link FlatView.limit} for commonly used limiters. They may be composed\n * together or with user-defined limiters with {@link util.compose}.\n *\n * @param {FlatViewParams} params\n * @return {FlatViewParams}\n */\n\n\n/**\n * @class FlatView\n * @implements View\n * @classdesc\n *\n * A {@link View} implementing an orthogonal projection for flat images.\n *\n * @param {FlatViewParams} params The initial view parameters. The\n *     `mediaAspectRatio` parameter must always be set. The other parameters\n *     default to `{x: 0.5, y: 0.5, z: 1 }` if unspecified.\n * @param {FlatViewLimiter=} limiter The view limiter. If unspecified, no view\n *     limiting is applied. See {@link FlatView.limit} for commonly used\n *     limiters.\n */\nfunction FlatView(params, limiter) {\n  // Require an aspect ratio to be specified.\n  if (!(params && params.mediaAspectRatio != null)) {\n    throw new Error('mediaAspectRatio must be defined');\n  }\n\n  // The initial values for the view parameters.\n  this._x = params && params.x != null ? params.x : defaultX;\n  this._y = params && params.y != null ? params.y : defaultY;\n  this._zoom = params && params.zoom != null ? params.zoom : defaultZoom;\n  this._mediaAspectRatio = params.mediaAspectRatio;\n  this._width = params && params.width != null ?\n    params.width : defaultWidth;\n  this._height = params && params.height != null ?\n    params.height : defaultHeight;\n\n  // The initial value for the view limiter.\n  this._limiter = limiter || null;\n\n  // The last calculated projection matrix and its inverse.\n  this._projMatrix = mat4.create();\n  this._invProjMatrix = mat4.create();\n\n  // The last calculated view frustum.\n  this._frustum = [\n    0, // top\n    0, // right\n    0, // bottom\n    0  // left\n  ];\n\n  // Whether the projection matrices and view frustum need to be updated.\n  this._projectionChanged = true;\n\n  // Temporary variables used for calculations.\n  this._params = {};\n  this._vec = vec4.create();\n\n  // Force view limiting on initial parameters.\n  this._update();\n}\n\neventEmitter(FlatView);\n\n\n/**\n * Destructor.\n */\nFlatView.prototype.destroy = function() {\n  clearOwnProperties(this);\n};\n\n\n/**\n * Get the x parameter.\n * @return {number}\n */\nFlatView.prototype.x = function() {\n  return this._x;\n};\n\n\n/**\n * Get the y parameter.\n * @return {number}\n */\nFlatView.prototype.y = function() {\n  return this._y;\n};\n\n\n/**\n * Get the zoom value.\n * @return {number}\n */\nFlatView.prototype.zoom = function() {\n  return this._zoom;\n};\n\n\n/**\n * Get the media aspect ratio.\n * @return {number}\n */\nFlatView.prototype.mediaAspectRatio = function() {\n  return this._mediaAspectRatio;\n};\n\n\n/**\n * Get the viewport width.\n * @return {number}\n */\nFlatView.prototype.width = function() {\n  return this._width;\n};\n\n\n/**\n * Get the viewport height.\n * @return {number}\n */\nFlatView.prototype.height = function() {\n  return this._height;\n};\n\n\n/**\n * Get the viewport dimensions. If an argument is supplied, it is filled in with\n * the result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {Size=} size\n * @return {Size}\n */\nFlatView.prototype.size = function(size) {\n  size = size || {};\n  size.width = this._width;\n  size.height = this._height;\n  return size;\n};\n\n\n/**\n * Get the view parameters. If an argument is supplied, it is filled in with the\n * result and returned. Otherwise, a fresh object is filled in and returned.\n * @param {FlatViewParams=} params\n * @return {FlatViewParams}\n */\nFlatView.prototype.parameters = function(params) {\n  params = params || {};\n  params.x = this._x;\n  params.y = this._y;\n  params.zoom = this._zoom;\n  params.mediaAspectRatio = this._mediaAspectRatio;\n  return params;\n};\n\n\n/**\n * Get the view limiter, or null if unset.\n * @return {?FlatViewLimiter}\n */\nFlatView.prototype.limiter = function() {\n  return this._limiter;\n};\n\n\n/**\n * Set the x parameter.\n * @param {number} x\n */\nFlatView.prototype.setX = function(x) {\n  this._resetParams();\n  this._params.x = x;\n  this._update(this._params);\n};\n\n\n/**\n * Set the y parameter.\n * @param {number} y\n */\nFlatView.prototype.setY = function(y) {\n  this._resetParams();\n  this._params.y = y;\n  this._update(this._params);\n};\n\n\n/**\n * Set the zoom value.\n * @param {number} zoom\n */\nFlatView.prototype.setZoom = function(zoom) {\n  this._resetParams();\n  this._params.zoom = zoom;\n  this._update(this._params);\n};\n\n\n/**\n * Add xOffset to the x parameter.\n * @param {number} xOffset\n */\nFlatView.prototype.offsetX = function(xOffset) {\n  this.setX(this._x + xOffset);\n};\n\n\n/**\n * Add yOffset to the y parameter.\n * @param {number} yOffset\n */\nFlatView.prototype.offsetY = function(yOffset)\n{\n  this.setY(this._y + yOffset);\n};\n\n\n/**\n * Add zoomOffset to the zoom value.\n * @param {number} zoomOffset\n */\nFlatView.prototype.offsetZoom = function(zoomOffset) {\n  this.setZoom(this._zoom + zoomOffset);\n};\n\n\n/**\n * Set the media aspect ratio.\n * @param {number} mediaAspectRatio\n */\nFlatView.prototype.setMediaAspectRatio = function(mediaAspectRatio) {\n  this._resetParams();\n  this._params.mediaAspectRatio = mediaAspectRatio;\n  this._update(this._params);\n};\n\n\n/**\n * Set the viewport dimensions.\n * @param {Size} size\n */\nFlatView.prototype.setSize = function(size) {\n  this._resetParams();\n  this._params.width = size.width;\n  this._params.height = size.height;\n  this._update(this._params);\n};\n\n\n/**\n * Set the view parameters. Unspecified parameters are left unchanged.\n * @param {FlatViewParameters} params\n */\nFlatView.prototype.setParameters = function(params) {\n  this._resetParams();\n  this._params.x = params.x;\n  this._params.y = params.y;\n  this._params.zoom = params.zoom;\n  this._params.mediaAspectRatio = params.mediaAspectRatio;\n  this._update(this._params);\n};\n\n\n/**\n * Set the view limiter.\n * @param {?FlatViewLimiter} limiter The new limiter, or null to unset.\n */\nFlatView.prototype.setLimiter = function(limiter) {\n  this._limiter = limiter || null;\n  this._update();\n};\n\n\nFlatView.prototype._resetParams = function() {\n  var params = this._params;\n  params.x = null;\n  params.y = null;\n  params.zoom = null;\n  params.mediaAspectRatio = null;\n  params.width = null;\n  params.height = null;\n};\n\n\nFlatView.prototype._update = function(params) {\n\n  // Avoid object allocation when no parameters are supplied.\n  if (params == null) {\n    this._resetParams();\n    params = this._params;\n  }\n\n  // Save old parameters for later comparison.\n  var oldX = this._x;\n  var oldY = this._y;\n  var oldZoom = this._zoom;\n  var oldMediaAspectRatio = this._mediaAspectRatio;\n  var oldWidth = this._width;\n  var oldHeight = this._height;\n\n  // Fill in object with the new set of parameters to pass into the limiter.\n  params.x = params.x != null ? params.x : oldX;\n  params.y = params.y != null ? params.y : oldY;\n  params.zoom = params.zoom != null ? params.zoom : oldZoom;\n  params.mediaAspectRatio = params.mediaAspectRatio != null ?\n    params.mediaAspectRatio : oldMediaAspectRatio;\n  params.width = params.width != null ? params.width : oldWidth;\n  params.height = params.height != null ? params.height : oldHeight;\n\n  // Apply view limiting when defined.\n  if (this._limiter) {\n    params = this._limiter(params);\n    if (!params) {\n      throw new Error('Bad view limiter');\n    }\n  }\n\n  // Grab the limited parameters.\n  var newX = params.x;\n  var newY = params.y;\n  var newZoom = params.zoom;\n  var newMediaAspectRatio = params.mediaAspectRatio;\n  var newWidth = params.width;\n  var newHeight = params.height;\n\n  // Consistency check.\n  if (!real(newX) || !real(newY) || !real(newZoom) ||\n      !real(newMediaAspectRatio) || !real(newWidth) || !real(newHeight)) {\n    throw new Error('Bad view - suspect a broken limiter');\n  }\n\n  // Constrain zoom.\n  newZoom = clamp(newZoom, zoomLimitEpsilon, Infinity);\n\n  // Update parameters.\n  this._x = newX;\n  this._y = newY;\n  this._zoom = newZoom;\n  this._mediaAspectRatio = newMediaAspectRatio;\n  this._width = newWidth;\n  this._height = newHeight;\n\n  // Check whether the parameters changed and emit the corresponding events.\n  if (newX !== oldX || newY !== oldY || newZoom !== oldZoom ||\n      newMediaAspectRatio !== oldMediaAspectRatio ||\n      newWidth !== oldWidth || newHeight !== oldHeight) {\n    this._projectionChanged = true;\n    this.emit('change');\n  }\n  if (newWidth !== oldWidth || newHeight !== oldHeight) {\n    this.emit('resize');\n  }\n\n};\n\n\nFlatView.prototype._zoomX = function() {\n  return this._zoom;\n};\n\n\nFlatView.prototype._zoomY = function() {\n  var mediaAspectRatio = this._mediaAspectRatio;\n  var aspect = this._width / this._height;\n  var zoomX = this._zoom;\n  var zoomY = zoomX * mediaAspectRatio / aspect;\n  if (isNaN(zoomY)) {\n    zoomY = zoomX;\n  }\n  return zoomY;\n};\n\n\nFlatView.prototype.updateWithControlParameters = function(parameters) {\n  var scale = this.zoom();\n  var zoomX = this._zoomX();\n  var zoomY = this._zoomY();\n\n  // TODO: should the scale be the same for both axes?\n  this.offsetX(parameters.axisScaledX * zoomX + parameters.x * scale);\n  this.offsetY(parameters.axisScaledY * zoomY + parameters.y * scale);\n  this.offsetZoom(parameters.zoom * scale);\n};\n\n\nFlatView.prototype._updateProjection = function() {\n  var projMatrix = this._projMatrix;\n  var invProjMatrix = this._invProjMatrix;\n  var frustum = this._frustum;\n\n  // Recalculate projection matrix when required.\n  if (this._projectionChanged) {\n    var x = this._x;\n    var y = this._y;\n    var zoomX = this._zoomX();\n    var zoomY = this._zoomY();\n\n    // Recalculate view frustum.\n    var top     = frustum[0] = (0.5 - y) + 0.5 * zoomY;\n    var right   = frustum[1] = (x - 0.5) + 0.5 * zoomX;\n    var bottom  = frustum[2] = (0.5 - y) - 0.5 * zoomY;\n    var left    = frustum[3] = (x - 0.5) - 0.5 * zoomX;\n\n    // Recalculate projection matrix and its inverse.\n    mat4.ortho(projMatrix, left, right, bottom, top, -1, 1);\n    mat4.invert(invProjMatrix, projMatrix);\n\n    this._projectionChanged = false;\n  }\n};\n\n\n/**\n * Returns the projection matrix for the current view.\n * @returns {mat4}\n */\nFlatView.prototype.projection = function() {\n  this._updateProjection();\n  return this._projMatrix;\n};\n\n\n/**\n * Returns the inverse projection matrix for the current view.\n * @returns {mat4}\n */\nFlatView.prototype.inverseProjection = function() {\n  this._updateProjection();\n  return this._invProjMatrix;\n};\n\n\n/**\n * Return whether the view frustum intersects the given rectangle.\n *\n * This function may return false positives, but never false negatives.\n * It is used for frustum culling, i.e., excluding invisible tiles from the\n * rendering process.\n *\n * @param {vec3[]} rectangle The vertices of the rectangle.\n */\nFlatView.prototype.intersects = function(rectangle) {\n  this._updateProjection();\n\n  var frustum = this._frustum;\n\n  // Check whether the rectangle is on the outer side of any of the frustum\n  // planes. This is a sufficient condition, though not necessary, for the\n  // rectangle to be completely outside the fruouter\n  for (var i = 0; i < frustum.length; i++) {\n    var limit = frustum[i];\n    var axis = planeAxes[i];\n    var cmp = planeCmp[i];\n    var inside = false;\n    for (var j = 0; j < rectangle.length; j++) {\n      var vertex = rectangle[j];\n      if (cmp < 0 && vertex[axis] < limit || cmp > 0 && vertex[axis] > limit) {\n        inside = true;\n        break;\n      }\n    }\n    if (!inside) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Select the level that should be used to render the view.\n * @param {Level[]} levelList the list of levels from which to select.\n * @return {Level} the selected level.\n */\nFlatView.prototype.selectLevel = function(levels) {\n\n  // Multiply the viewport width by the device pixel ratio to get the required\n  // horizontal resolution in pixels.\n  //\n  // Calculate the fraction of the image that would be visible at the current\n  // zoom value. Then, for each level, multiply by the level width to get the\n  // width in pixels of the portion that would be visible.\n  //\n  // Search for the smallest level that satifies the the required width,\n  // falling back on the largest level if none do.\n\n  var requiredPixels = pixelRatio() * this.width();\n  var zoomFactor = this._zoom;\n\n  for (var i = 0; i < levels.length; i++) {\n    var level = levels[i];\n    if (zoomFactor * level.width() >= requiredPixels) {\n      return level;\n    }\n  }\n\n  return levels[levels.length - 1];\n\n};\n\n\n/**\n * Convert view coordinates into screen coordinates. If a result argument is\n * provided, it is filled in and returned. Otherwise, a fresh object is filled\n * in and returned.\n *\n * @param {FlatViewCoords} coords The view coordinates.\n * @param {Coords=} result The result argument for the screen coordinates.\n * @return {Coords}\n */\nFlatView.prototype.coordinatesToScreen = function(coords, result) {\n  var ray = this._vec;\n\n  if (!result) {\n    result = {};\n  }\n\n  var width = this._width;\n  var height = this._height;\n\n  // Undefined on a null viewport.\n  if (width <= 0 || height <= 0) {\n    result.x = null;\n    result.y = null;\n    return null;\n  }\n\n  // Extract coordinates from argument, filling in default values.\n  var x = coords && coords.x != null ? coords.x : defaultX;\n  var y = coords && coords.y != null ? coords.y : defaultY;\n\n  // Project view ray onto clip space.\n  vec4.set(ray, x - 0.5, 0.5 - y, -1, 1);\n  vec4.transformMat4(ray, ray, this.projection());\n\n  // Calculate perspective divide.\n  for (var i = 0; i < 3; i++) {\n    ray[i] /= ray[3];\n  }\n\n  // Convert to viewport coordinates and return.\n  result.x = width * (ray[0] + 1) / 2;\n  result.y = height * (1 - ray[1]) / 2;\n\n  return result;\n};\n\n\n/**\n * Convert screen coordinates into view coordinates. If a result argument is\n * provided, it is filled in with the result and returned. Otherwise, a fresh\n * object is filled in and returned.\n *\n * @param {Coords} coords The screen coordinates.\n * @param {FlatViewCoords=} result The result argument for the view coordinates.\n * @return {FlatViewCoords}\n */\nFlatView.prototype.screenToCoordinates = function(coords, result) {\n  var ray = this._vec;\n\n  if (!result) {\n    result = {};\n  }\n\n  var width = this._width;\n  var height = this._height;\n\n  // Convert viewport coordinates to clip space.\n  var vecx = 2 * coords.x / width - 1;\n  var vecy = 1 - 2 * coords.y / height;\n  vec4.set(ray, vecx, vecy, 1, 1);\n\n  // Project back to world space.\n  vec4.transformMat4(ray, ray, this.inverseProjection());\n\n  // Convert to flat coordinates.\n  result.x = 0.5 + ray[0];\n  result.y = 0.5 - ray[1];\n\n  return result;\n};\n\n\n/**\n * Factory functions for view limiters. See {@link FlatViewLimiter}.\n * @namespace\n */\nFlatView.limit = {\n\n  /**\n   * Returns a view limiter that constrains the x parameter.\n   * @param {number} min The minimum x value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  x: function(min, max) {\n    return function limitX(params) {\n      params.x = clamp(params.x, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Return a view limiter that constrains the y parameter.\n   * @param {number} min The minimum y value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  y: function(min, max) {\n    return function limitY(params) {\n      params.y = clamp(params.y, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter than constrains the zoom parameter.\n   * @param {number} min The minimum zoom value.\n   * @param {number} max The maximum zoom value.\n   * @return {FlatViewLimiter}\n   */\n  zoom: function(min, max) {\n    return function limitZoom(params) {\n      params.zoom = clamp(params.zoom, min, max);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that prevents zooming in beyond the given\n   * resolution.\n   * @param {number} size The image width in pixels.\n   * @return {FlatViewLimiter}\n   */\n  resolution: function(size) {\n    return function limitResolution(params) {\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n      var width = params.width;\n      var minZoom = pixelRatio() * width / size;\n      params.zoom = clamp(params.zoom, minZoom, Infinity);\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the values of the x parameter that\n   * are inside the viewport.\n   * @param {number} min The minimum x value.\n   * @param {number} max The maximum x value.\n   * @return {FlatViewLimiter}\n   */\n  visibleX: function(min, max) {\n    return function limitVisibleX(params) {\n      // Calculate the zoom value that makes the specified range fully visible.\n      var maxZoom = max - min;\n\n      // Clamp zoom to the maximum value.\n      if (params.zoom > maxZoom) {\n        params.zoom = maxZoom;\n      }\n\n      // Bound X such that the image is visible up to the range edges.\n      var minX = min + 0.5 * params.zoom;\n      var maxX = max - 0.5 * params.zoom;\n      params.x = clamp(params.x, minX, maxX);\n\n      return params;\n    };\n  },\n\n  /**\n   * Returns a view limiter that constrains the values of the y parameter that\n   * are inside the viewport.\n   * @param {number} min The minimum y value.\n   * @param {number} max The maximum y value.\n   * @return {FlatViewLimiter}\n   */\n  visibleY: function(min, max) {\n    return function limitVisibleY(params) {\n\n      // Do nothing for a null viewport.\n      if (params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n\n      // Calculate the X to Y conversion factor.\n      var viewportAspectRatio = params.width / params.height;\n      var factor = viewportAspectRatio / params.mediaAspectRatio;\n\n      // Calculate the zoom value that makes the specified range fully visible.\n      var maxZoom = (max - min) * factor;\n\n      // Clamp zoom to the maximum value.\n      if (params.zoom > maxZoom) {\n        params.zoom = maxZoom;\n      }\n\n      // Bound Y such that the image is visible up to the range edges.\n      var minY = min + 0.5 * params.zoom / factor;\n      var maxY = max - 0.5 * params.zoom / factor;\n      params.y = clamp(params.y, minY, maxY);\n\n      return params;\n    };\n  },\n\n\n  /**\n   * Returns a view limiter that constrains the zoom parameter such that\n   * zooming out is prevented beyond the point at which the image is fully\n   * visible. Unless the image and the viewport have the same aspect ratio,\n   * this will cause bands to appear around the image.\n   * @return {FlatViewLimiter}\n   */\n  letterbox: function() {\n    return function limitLetterbox(params) {\n      if(params.width <= 0 || params.height <= 0) {\n        return params;\n      }\n      var viewportAspectRatio = params.width / params.height;\n\n      var fullWidthZoom = 1.0;\n      var fullHeightZoom = viewportAspectRatio / params.mediaAspectRatio;\n\n      // If the image is wider than the viewport, limit the horizontal zoom to\n      // the image width.\n      if (params.mediaAspectRatio >= viewportAspectRatio) {\n        params.zoom = Math.min(params.zoom, fullWidthZoom);\n      }\n\n      // If the image is narrower than the viewport, limit the vertical zoom to\n      // the image height.\n      if (params.mediaAspectRatio <= viewportAspectRatio) {\n        params.zoom = Math.min(params.zoom, fullHeightZoom);\n      }\n\n      // If the full image width is visible, limit x to the central point.\n      // Else, bound x such that image is visible up to the horizontal edges.\n      var minX, maxX;\n      if (params.zoom > fullWidthZoom) {\n        minX = maxX = 0.5;\n      } else {\n        minX = 0.0 + 0.5 * params.zoom / fullWidthZoom;\n        maxX = 1.0 - 0.5 * params.zoom / fullWidthZoom;\n      }\n\n      // If the full image height is visible, limit y to the central point.\n      // Else, bound y such that image is visible up to the vertical edges.\n      var minY, maxY;\n      if (params.zoom > fullHeightZoom) {\n        minY = maxY = 0.5;\n      } else {\n        minY = 0.0 + 0.5 * params.zoom / fullHeightZoom;\n        maxY = 1.0 - 0.5 * params.zoom / fullHeightZoom;\n      }\n\n      // Clamp x and y into the calculated bounds.\n      params.x = clamp(params.x, minX, maxX);\n      params.y = clamp(params.y, minY, maxY);\n\n      return params;\n    };\n  }\n\n};\n\n\nFlatView.type = FlatView.prototype.type = 'flat';\n\n\nmodule.exports = FlatView;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}